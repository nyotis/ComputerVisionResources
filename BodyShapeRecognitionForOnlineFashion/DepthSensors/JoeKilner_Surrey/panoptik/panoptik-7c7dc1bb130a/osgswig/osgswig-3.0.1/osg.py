# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osg', [dirname(__file__)])
        except ImportError:
            import _osg
            return _osg
        if fp is not None:
            try:
                _mod = imp.load_module('_osg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osg = swig_import_helper()
    del swig_import_helper
else:
    import _osg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _osg.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _osg.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _osg.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _osg.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _osg.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _osg.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _osg.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _osg.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _osg.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _osg.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _osg.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osg.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osg.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osg.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

GL_FALSE = _osg.GL_FALSE
GL_TRUE = _osg.GL_TRUE
GL_BYTE = _osg.GL_BYTE
GL_UNSIGNED_BYTE = _osg.GL_UNSIGNED_BYTE
GL_SHORT = _osg.GL_SHORT
GL_UNSIGNED_SHORT = _osg.GL_UNSIGNED_SHORT
GL_INT = _osg.GL_INT
GL_UNSIGNED_INT = _osg.GL_UNSIGNED_INT
GL_FLOAT = _osg.GL_FLOAT
GL_2_BYTES = _osg.GL_2_BYTES
GL_3_BYTES = _osg.GL_3_BYTES
GL_4_BYTES = _osg.GL_4_BYTES
GL_DOUBLE = _osg.GL_DOUBLE
GL_POINTS = _osg.GL_POINTS
GL_LINES = _osg.GL_LINES
GL_LINE_LOOP = _osg.GL_LINE_LOOP
GL_LINE_STRIP = _osg.GL_LINE_STRIP
GL_TRIANGLES = _osg.GL_TRIANGLES
GL_TRIANGLE_STRIP = _osg.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _osg.GL_TRIANGLE_FAN
GL_QUADS = _osg.GL_QUADS
GL_QUAD_STRIP = _osg.GL_QUAD_STRIP
GL_POLYGON = _osg.GL_POLYGON
GL_VERTEX_ARRAY = _osg.GL_VERTEX_ARRAY
GL_NORMAL_ARRAY = _osg.GL_NORMAL_ARRAY
GL_COLOR_ARRAY = _osg.GL_COLOR_ARRAY
GL_INDEX_ARRAY = _osg.GL_INDEX_ARRAY
GL_TEXTURE_COORD_ARRAY = _osg.GL_TEXTURE_COORD_ARRAY
GL_EDGE_FLAG_ARRAY = _osg.GL_EDGE_FLAG_ARRAY
GL_VERTEX_ARRAY_SIZE = _osg.GL_VERTEX_ARRAY_SIZE
GL_VERTEX_ARRAY_TYPE = _osg.GL_VERTEX_ARRAY_TYPE
GL_VERTEX_ARRAY_STRIDE = _osg.GL_VERTEX_ARRAY_STRIDE
GL_NORMAL_ARRAY_TYPE = _osg.GL_NORMAL_ARRAY_TYPE
GL_NORMAL_ARRAY_STRIDE = _osg.GL_NORMAL_ARRAY_STRIDE
GL_COLOR_ARRAY_SIZE = _osg.GL_COLOR_ARRAY_SIZE
GL_COLOR_ARRAY_TYPE = _osg.GL_COLOR_ARRAY_TYPE
GL_COLOR_ARRAY_STRIDE = _osg.GL_COLOR_ARRAY_STRIDE
GL_INDEX_ARRAY_TYPE = _osg.GL_INDEX_ARRAY_TYPE
GL_INDEX_ARRAY_STRIDE = _osg.GL_INDEX_ARRAY_STRIDE
GL_TEXTURE_COORD_ARRAY_SIZE = _osg.GL_TEXTURE_COORD_ARRAY_SIZE
GL_TEXTURE_COORD_ARRAY_TYPE = _osg.GL_TEXTURE_COORD_ARRAY_TYPE
GL_TEXTURE_COORD_ARRAY_STRIDE = _osg.GL_TEXTURE_COORD_ARRAY_STRIDE
GL_EDGE_FLAG_ARRAY_STRIDE = _osg.GL_EDGE_FLAG_ARRAY_STRIDE
GL_VERTEX_ARRAY_POINTER = _osg.GL_VERTEX_ARRAY_POINTER
GL_NORMAL_ARRAY_POINTER = _osg.GL_NORMAL_ARRAY_POINTER
GL_COLOR_ARRAY_POINTER = _osg.GL_COLOR_ARRAY_POINTER
GL_INDEX_ARRAY_POINTER = _osg.GL_INDEX_ARRAY_POINTER
GL_TEXTURE_COORD_ARRAY_POINTER = _osg.GL_TEXTURE_COORD_ARRAY_POINTER
GL_EDGE_FLAG_ARRAY_POINTER = _osg.GL_EDGE_FLAG_ARRAY_POINTER
GL_V2F = _osg.GL_V2F
GL_V3F = _osg.GL_V3F
GL_C4UB_V2F = _osg.GL_C4UB_V2F
GL_C4UB_V3F = _osg.GL_C4UB_V3F
GL_C3F_V3F = _osg.GL_C3F_V3F
GL_N3F_V3F = _osg.GL_N3F_V3F
GL_C4F_N3F_V3F = _osg.GL_C4F_N3F_V3F
GL_T2F_V3F = _osg.GL_T2F_V3F
GL_T4F_V4F = _osg.GL_T4F_V4F
GL_T2F_C4UB_V3F = _osg.GL_T2F_C4UB_V3F
GL_T2F_C3F_V3F = _osg.GL_T2F_C3F_V3F
GL_T2F_N3F_V3F = _osg.GL_T2F_N3F_V3F
GL_T2F_C4F_N3F_V3F = _osg.GL_T2F_C4F_N3F_V3F
GL_T4F_C4F_N3F_V4F = _osg.GL_T4F_C4F_N3F_V4F
GL_MATRIX_MODE = _osg.GL_MATRIX_MODE
GL_MODELVIEW = _osg.GL_MODELVIEW
GL_PROJECTION = _osg.GL_PROJECTION
GL_TEXTURE = _osg.GL_TEXTURE
GL_POINT_SMOOTH = _osg.GL_POINT_SMOOTH
GL_POINT_SIZE = _osg.GL_POINT_SIZE
GL_POINT_SIZE_GRANULARITY = _osg.GL_POINT_SIZE_GRANULARITY
GL_POINT_SIZE_RANGE = _osg.GL_POINT_SIZE_RANGE
GL_LINE_SMOOTH = _osg.GL_LINE_SMOOTH
GL_LINE_STIPPLE = _osg.GL_LINE_STIPPLE
GL_LINE_STIPPLE_PATTERN = _osg.GL_LINE_STIPPLE_PATTERN
GL_LINE_STIPPLE_REPEAT = _osg.GL_LINE_STIPPLE_REPEAT
GL_LINE_WIDTH = _osg.GL_LINE_WIDTH
GL_LINE_WIDTH_GRANULARITY = _osg.GL_LINE_WIDTH_GRANULARITY
GL_LINE_WIDTH_RANGE = _osg.GL_LINE_WIDTH_RANGE
GL_POINT = _osg.GL_POINT
GL_LINE = _osg.GL_LINE
GL_FILL = _osg.GL_FILL
GL_CW = _osg.GL_CW
GL_CCW = _osg.GL_CCW
GL_FRONT = _osg.GL_FRONT
GL_BACK = _osg.GL_BACK
GL_POLYGON_MODE = _osg.GL_POLYGON_MODE
GL_POLYGON_SMOOTH = _osg.GL_POLYGON_SMOOTH
GL_POLYGON_STIPPLE = _osg.GL_POLYGON_STIPPLE
GL_EDGE_FLAG = _osg.GL_EDGE_FLAG
GL_CULL_FACE = _osg.GL_CULL_FACE
GL_CULL_FACE_MODE = _osg.GL_CULL_FACE_MODE
GL_FRONT_FACE = _osg.GL_FRONT_FACE
GL_POLYGON_OFFSET_FACTOR = _osg.GL_POLYGON_OFFSET_FACTOR
GL_POLYGON_OFFSET_UNITS = _osg.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_POINT = _osg.GL_POLYGON_OFFSET_POINT
GL_POLYGON_OFFSET_LINE = _osg.GL_POLYGON_OFFSET_LINE
GL_POLYGON_OFFSET_FILL = _osg.GL_POLYGON_OFFSET_FILL
GL_COMPILE = _osg.GL_COMPILE
GL_COMPILE_AND_EXECUTE = _osg.GL_COMPILE_AND_EXECUTE
GL_LIST_BASE = _osg.GL_LIST_BASE
GL_LIST_INDEX = _osg.GL_LIST_INDEX
GL_LIST_MODE = _osg.GL_LIST_MODE
GL_NEVER = _osg.GL_NEVER
GL_LESS = _osg.GL_LESS
GL_EQUAL = _osg.GL_EQUAL
GL_LEQUAL = _osg.GL_LEQUAL
GL_GREATER = _osg.GL_GREATER
GL_NOTEQUAL = _osg.GL_NOTEQUAL
GL_GEQUAL = _osg.GL_GEQUAL
GL_ALWAYS = _osg.GL_ALWAYS
GL_DEPTH_TEST = _osg.GL_DEPTH_TEST
GL_DEPTH_BITS = _osg.GL_DEPTH_BITS
GL_DEPTH_CLEAR_VALUE = _osg.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _osg.GL_DEPTH_FUNC
GL_DEPTH_RANGE = _osg.GL_DEPTH_RANGE
GL_DEPTH_WRITEMASK = _osg.GL_DEPTH_WRITEMASK
GL_DEPTH_COMPONENT = _osg.GL_DEPTH_COMPONENT
GL_LIGHTING = _osg.GL_LIGHTING
GL_LIGHT0 = _osg.GL_LIGHT0
GL_LIGHT1 = _osg.GL_LIGHT1
GL_LIGHT2 = _osg.GL_LIGHT2
GL_LIGHT3 = _osg.GL_LIGHT3
GL_LIGHT4 = _osg.GL_LIGHT4
GL_LIGHT5 = _osg.GL_LIGHT5
GL_LIGHT6 = _osg.GL_LIGHT6
GL_LIGHT7 = _osg.GL_LIGHT7
GL_SPOT_EXPONENT = _osg.GL_SPOT_EXPONENT
GL_SPOT_CUTOFF = _osg.GL_SPOT_CUTOFF
GL_CONSTANT_ATTENUATION = _osg.GL_CONSTANT_ATTENUATION
GL_LINEAR_ATTENUATION = _osg.GL_LINEAR_ATTENUATION
GL_QUADRATIC_ATTENUATION = _osg.GL_QUADRATIC_ATTENUATION
GL_AMBIENT = _osg.GL_AMBIENT
GL_DIFFUSE = _osg.GL_DIFFUSE
GL_SPECULAR = _osg.GL_SPECULAR
GL_SHININESS = _osg.GL_SHININESS
GL_EMISSION = _osg.GL_EMISSION
GL_POSITION = _osg.GL_POSITION
GL_SPOT_DIRECTION = _osg.GL_SPOT_DIRECTION
GL_AMBIENT_AND_DIFFUSE = _osg.GL_AMBIENT_AND_DIFFUSE
GL_COLOR_INDEXES = _osg.GL_COLOR_INDEXES
GL_LIGHT_MODEL_TWO_SIDE = _osg.GL_LIGHT_MODEL_TWO_SIDE
GL_LIGHT_MODEL_LOCAL_VIEWER = _osg.GL_LIGHT_MODEL_LOCAL_VIEWER
GL_LIGHT_MODEL_AMBIENT = _osg.GL_LIGHT_MODEL_AMBIENT
GL_FRONT_AND_BACK = _osg.GL_FRONT_AND_BACK
GL_SHADE_MODEL = _osg.GL_SHADE_MODEL
GL_FLAT = _osg.GL_FLAT
GL_SMOOTH = _osg.GL_SMOOTH
GL_COLOR_MATERIAL = _osg.GL_COLOR_MATERIAL
GL_COLOR_MATERIAL_FACE = _osg.GL_COLOR_MATERIAL_FACE
GL_COLOR_MATERIAL_PARAMETER = _osg.GL_COLOR_MATERIAL_PARAMETER
GL_NORMALIZE = _osg.GL_NORMALIZE
GL_CLIP_PLANE0 = _osg.GL_CLIP_PLANE0
GL_CLIP_PLANE1 = _osg.GL_CLIP_PLANE1
GL_CLIP_PLANE2 = _osg.GL_CLIP_PLANE2
GL_CLIP_PLANE3 = _osg.GL_CLIP_PLANE3
GL_CLIP_PLANE4 = _osg.GL_CLIP_PLANE4
GL_CLIP_PLANE5 = _osg.GL_CLIP_PLANE5
GL_ACCUM_RED_BITS = _osg.GL_ACCUM_RED_BITS
GL_ACCUM_GREEN_BITS = _osg.GL_ACCUM_GREEN_BITS
GL_ACCUM_BLUE_BITS = _osg.GL_ACCUM_BLUE_BITS
GL_ACCUM_ALPHA_BITS = _osg.GL_ACCUM_ALPHA_BITS
GL_ACCUM_CLEAR_VALUE = _osg.GL_ACCUM_CLEAR_VALUE
GL_ACCUM = _osg.GL_ACCUM
GL_ADD = _osg.GL_ADD
GL_LOAD = _osg.GL_LOAD
GL_MULT = _osg.GL_MULT
GL_RETURN = _osg.GL_RETURN
GL_ALPHA_TEST = _osg.GL_ALPHA_TEST
GL_ALPHA_TEST_REF = _osg.GL_ALPHA_TEST_REF
GL_ALPHA_TEST_FUNC = _osg.GL_ALPHA_TEST_FUNC
GL_BLEND = _osg.GL_BLEND
GL_BLEND_SRC = _osg.GL_BLEND_SRC
GL_BLEND_DST = _osg.GL_BLEND_DST
GL_ZERO = _osg.GL_ZERO
GL_ONE = _osg.GL_ONE
GL_SRC_COLOR = _osg.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _osg.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _osg.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _osg.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _osg.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _osg.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _osg.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _osg.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _osg.GL_SRC_ALPHA_SATURATE
GL_FEEDBACK = _osg.GL_FEEDBACK
GL_RENDER = _osg.GL_RENDER
GL_SELECT = _osg.GL_SELECT
GL_2D = _osg.GL_2D
GL_3D = _osg.GL_3D
GL_3D_COLOR = _osg.GL_3D_COLOR
GL_3D_COLOR_TEXTURE = _osg.GL_3D_COLOR_TEXTURE
GL_4D_COLOR_TEXTURE = _osg.GL_4D_COLOR_TEXTURE
GL_POINT_TOKEN = _osg.GL_POINT_TOKEN
GL_LINE_TOKEN = _osg.GL_LINE_TOKEN
GL_LINE_RESET_TOKEN = _osg.GL_LINE_RESET_TOKEN
GL_POLYGON_TOKEN = _osg.GL_POLYGON_TOKEN
GL_BITMAP_TOKEN = _osg.GL_BITMAP_TOKEN
GL_DRAW_PIXEL_TOKEN = _osg.GL_DRAW_PIXEL_TOKEN
GL_COPY_PIXEL_TOKEN = _osg.GL_COPY_PIXEL_TOKEN
GL_PASS_THROUGH_TOKEN = _osg.GL_PASS_THROUGH_TOKEN
GL_FEEDBACK_BUFFER_POINTER = _osg.GL_FEEDBACK_BUFFER_POINTER
GL_FEEDBACK_BUFFER_SIZE = _osg.GL_FEEDBACK_BUFFER_SIZE
GL_FEEDBACK_BUFFER_TYPE = _osg.GL_FEEDBACK_BUFFER_TYPE
GL_SELECTION_BUFFER_POINTER = _osg.GL_SELECTION_BUFFER_POINTER
GL_SELECTION_BUFFER_SIZE = _osg.GL_SELECTION_BUFFER_SIZE
GL_FOG = _osg.GL_FOG
GL_FOG_MODE = _osg.GL_FOG_MODE
GL_FOG_DENSITY = _osg.GL_FOG_DENSITY
GL_FOG_COLOR = _osg.GL_FOG_COLOR
GL_FOG_INDEX = _osg.GL_FOG_INDEX
GL_FOG_START = _osg.GL_FOG_START
GL_FOG_END = _osg.GL_FOG_END
GL_LINEAR = _osg.GL_LINEAR
GL_EXP = _osg.GL_EXP
GL_EXP2 = _osg.GL_EXP2
GL_LOGIC_OP = _osg.GL_LOGIC_OP
GL_INDEX_LOGIC_OP = _osg.GL_INDEX_LOGIC_OP
GL_COLOR_LOGIC_OP = _osg.GL_COLOR_LOGIC_OP
GL_LOGIC_OP_MODE = _osg.GL_LOGIC_OP_MODE
GL_CLEAR = _osg.GL_CLEAR
GL_SET = _osg.GL_SET
GL_COPY = _osg.GL_COPY
GL_COPY_INVERTED = _osg.GL_COPY_INVERTED
GL_NOOP = _osg.GL_NOOP
GL_INVERT = _osg.GL_INVERT
GL_AND = _osg.GL_AND
GL_NAND = _osg.GL_NAND
GL_OR = _osg.GL_OR
GL_NOR = _osg.GL_NOR
GL_XOR = _osg.GL_XOR
GL_EQUIV = _osg.GL_EQUIV
GL_AND_REVERSE = _osg.GL_AND_REVERSE
GL_AND_INVERTED = _osg.GL_AND_INVERTED
GL_OR_REVERSE = _osg.GL_OR_REVERSE
GL_OR_INVERTED = _osg.GL_OR_INVERTED
GL_STENCIL_BITS = _osg.GL_STENCIL_BITS
GL_STENCIL_TEST = _osg.GL_STENCIL_TEST
GL_STENCIL_CLEAR_VALUE = _osg.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_FUNC = _osg.GL_STENCIL_FUNC
GL_STENCIL_VALUE_MASK = _osg.GL_STENCIL_VALUE_MASK
GL_STENCIL_FAIL = _osg.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_FAIL = _osg.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _osg.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_REF = _osg.GL_STENCIL_REF
GL_STENCIL_WRITEMASK = _osg.GL_STENCIL_WRITEMASK
GL_STENCIL_INDEX = _osg.GL_STENCIL_INDEX
GL_KEEP = _osg.GL_KEEP
GL_REPLACE = _osg.GL_REPLACE
GL_INCR = _osg.GL_INCR
GL_DECR = _osg.GL_DECR
GL_NONE = _osg.GL_NONE
GL_LEFT = _osg.GL_LEFT
GL_RIGHT = _osg.GL_RIGHT
GL_FRONT_LEFT = _osg.GL_FRONT_LEFT
GL_FRONT_RIGHT = _osg.GL_FRONT_RIGHT
GL_BACK_LEFT = _osg.GL_BACK_LEFT
GL_BACK_RIGHT = _osg.GL_BACK_RIGHT
GL_AUX0 = _osg.GL_AUX0
GL_AUX1 = _osg.GL_AUX1
GL_AUX2 = _osg.GL_AUX2
GL_AUX3 = _osg.GL_AUX3
GL_COLOR_INDEX = _osg.GL_COLOR_INDEX
GL_RED = _osg.GL_RED
GL_GREEN = _osg.GL_GREEN
GL_BLUE = _osg.GL_BLUE
GL_ALPHA = _osg.GL_ALPHA
GL_LUMINANCE = _osg.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _osg.GL_LUMINANCE_ALPHA
GL_ALPHA_BITS = _osg.GL_ALPHA_BITS
GL_RED_BITS = _osg.GL_RED_BITS
GL_GREEN_BITS = _osg.GL_GREEN_BITS
GL_BLUE_BITS = _osg.GL_BLUE_BITS
GL_INDEX_BITS = _osg.GL_INDEX_BITS
GL_SUBPIXEL_BITS = _osg.GL_SUBPIXEL_BITS
GL_AUX_BUFFERS = _osg.GL_AUX_BUFFERS
GL_READ_BUFFER = _osg.GL_READ_BUFFER
GL_DRAW_BUFFER = _osg.GL_DRAW_BUFFER
GL_DOUBLEBUFFER = _osg.GL_DOUBLEBUFFER
GL_STEREO = _osg.GL_STEREO
GL_BITMAP = _osg.GL_BITMAP
GL_COLOR = _osg.GL_COLOR
GL_DEPTH = _osg.GL_DEPTH
GL_STENCIL = _osg.GL_STENCIL
GL_DITHER = _osg.GL_DITHER
GL_RGB = _osg.GL_RGB
GL_RGBA = _osg.GL_RGBA
GL_MAX_LIST_NESTING = _osg.GL_MAX_LIST_NESTING
GL_MAX_EVAL_ORDER = _osg.GL_MAX_EVAL_ORDER
GL_MAX_LIGHTS = _osg.GL_MAX_LIGHTS
GL_MAX_CLIP_PLANES = _osg.GL_MAX_CLIP_PLANES
GL_MAX_TEXTURE_SIZE = _osg.GL_MAX_TEXTURE_SIZE
GL_MAX_PIXEL_MAP_TABLE = _osg.GL_MAX_PIXEL_MAP_TABLE
GL_MAX_ATTRIB_STACK_DEPTH = _osg.GL_MAX_ATTRIB_STACK_DEPTH
GL_MAX_MODELVIEW_STACK_DEPTH = _osg.GL_MAX_MODELVIEW_STACK_DEPTH
GL_MAX_NAME_STACK_DEPTH = _osg.GL_MAX_NAME_STACK_DEPTH
GL_MAX_PROJECTION_STACK_DEPTH = _osg.GL_MAX_PROJECTION_STACK_DEPTH
GL_MAX_TEXTURE_STACK_DEPTH = _osg.GL_MAX_TEXTURE_STACK_DEPTH
GL_MAX_VIEWPORT_DIMS = _osg.GL_MAX_VIEWPORT_DIMS
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = _osg.GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
GL_ATTRIB_STACK_DEPTH = _osg.GL_ATTRIB_STACK_DEPTH
GL_CLIENT_ATTRIB_STACK_DEPTH = _osg.GL_CLIENT_ATTRIB_STACK_DEPTH
GL_COLOR_CLEAR_VALUE = _osg.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _osg.GL_COLOR_WRITEMASK
GL_CURRENT_INDEX = _osg.GL_CURRENT_INDEX
GL_CURRENT_COLOR = _osg.GL_CURRENT_COLOR
GL_CURRENT_NORMAL = _osg.GL_CURRENT_NORMAL
GL_CURRENT_RASTER_COLOR = _osg.GL_CURRENT_RASTER_COLOR
GL_CURRENT_RASTER_DISTANCE = _osg.GL_CURRENT_RASTER_DISTANCE
GL_CURRENT_RASTER_INDEX = _osg.GL_CURRENT_RASTER_INDEX
GL_CURRENT_RASTER_POSITION = _osg.GL_CURRENT_RASTER_POSITION
GL_CURRENT_RASTER_TEXTURE_COORDS = _osg.GL_CURRENT_RASTER_TEXTURE_COORDS
GL_CURRENT_RASTER_POSITION_VALID = _osg.GL_CURRENT_RASTER_POSITION_VALID
GL_CURRENT_TEXTURE_COORDS = _osg.GL_CURRENT_TEXTURE_COORDS
GL_INDEX_CLEAR_VALUE = _osg.GL_INDEX_CLEAR_VALUE
GL_INDEX_MODE = _osg.GL_INDEX_MODE
GL_INDEX_WRITEMASK = _osg.GL_INDEX_WRITEMASK
GL_MODELVIEW_MATRIX = _osg.GL_MODELVIEW_MATRIX
GL_MODELVIEW_STACK_DEPTH = _osg.GL_MODELVIEW_STACK_DEPTH
GL_NAME_STACK_DEPTH = _osg.GL_NAME_STACK_DEPTH
GL_PROJECTION_MATRIX = _osg.GL_PROJECTION_MATRIX
GL_PROJECTION_STACK_DEPTH = _osg.GL_PROJECTION_STACK_DEPTH
GL_RENDER_MODE = _osg.GL_RENDER_MODE
GL_RGBA_MODE = _osg.GL_RGBA_MODE
GL_TEXTURE_MATRIX = _osg.GL_TEXTURE_MATRIX
GL_TEXTURE_STACK_DEPTH = _osg.GL_TEXTURE_STACK_DEPTH
GL_VIEWPORT = _osg.GL_VIEWPORT
GL_AUTO_NORMAL = _osg.GL_AUTO_NORMAL
GL_MAP1_COLOR_4 = _osg.GL_MAP1_COLOR_4
GL_MAP1_INDEX = _osg.GL_MAP1_INDEX
GL_MAP1_NORMAL = _osg.GL_MAP1_NORMAL
GL_MAP1_TEXTURE_COORD_1 = _osg.GL_MAP1_TEXTURE_COORD_1
GL_MAP1_TEXTURE_COORD_2 = _osg.GL_MAP1_TEXTURE_COORD_2
GL_MAP1_TEXTURE_COORD_3 = _osg.GL_MAP1_TEXTURE_COORD_3
GL_MAP1_TEXTURE_COORD_4 = _osg.GL_MAP1_TEXTURE_COORD_4
GL_MAP1_VERTEX_3 = _osg.GL_MAP1_VERTEX_3
GL_MAP1_VERTEX_4 = _osg.GL_MAP1_VERTEX_4
GL_MAP2_COLOR_4 = _osg.GL_MAP2_COLOR_4
GL_MAP2_INDEX = _osg.GL_MAP2_INDEX
GL_MAP2_NORMAL = _osg.GL_MAP2_NORMAL
GL_MAP2_TEXTURE_COORD_1 = _osg.GL_MAP2_TEXTURE_COORD_1
GL_MAP2_TEXTURE_COORD_2 = _osg.GL_MAP2_TEXTURE_COORD_2
GL_MAP2_TEXTURE_COORD_3 = _osg.GL_MAP2_TEXTURE_COORD_3
GL_MAP2_TEXTURE_COORD_4 = _osg.GL_MAP2_TEXTURE_COORD_4
GL_MAP2_VERTEX_3 = _osg.GL_MAP2_VERTEX_3
GL_MAP2_VERTEX_4 = _osg.GL_MAP2_VERTEX_4
GL_MAP1_GRID_DOMAIN = _osg.GL_MAP1_GRID_DOMAIN
GL_MAP1_GRID_SEGMENTS = _osg.GL_MAP1_GRID_SEGMENTS
GL_MAP2_GRID_DOMAIN = _osg.GL_MAP2_GRID_DOMAIN
GL_MAP2_GRID_SEGMENTS = _osg.GL_MAP2_GRID_SEGMENTS
GL_COEFF = _osg.GL_COEFF
GL_ORDER = _osg.GL_ORDER
GL_DOMAIN = _osg.GL_DOMAIN
GL_PERSPECTIVE_CORRECTION_HINT = _osg.GL_PERSPECTIVE_CORRECTION_HINT
GL_POINT_SMOOTH_HINT = _osg.GL_POINT_SMOOTH_HINT
GL_LINE_SMOOTH_HINT = _osg.GL_LINE_SMOOTH_HINT
GL_POLYGON_SMOOTH_HINT = _osg.GL_POLYGON_SMOOTH_HINT
GL_FOG_HINT = _osg.GL_FOG_HINT
GL_DONT_CARE = _osg.GL_DONT_CARE
GL_FASTEST = _osg.GL_FASTEST
GL_NICEST = _osg.GL_NICEST
GL_SCISSOR_BOX = _osg.GL_SCISSOR_BOX
GL_SCISSOR_TEST = _osg.GL_SCISSOR_TEST
GL_MAP_COLOR = _osg.GL_MAP_COLOR
GL_MAP_STENCIL = _osg.GL_MAP_STENCIL
GL_INDEX_SHIFT = _osg.GL_INDEX_SHIFT
GL_INDEX_OFFSET = _osg.GL_INDEX_OFFSET
GL_RED_SCALE = _osg.GL_RED_SCALE
GL_RED_BIAS = _osg.GL_RED_BIAS
GL_GREEN_SCALE = _osg.GL_GREEN_SCALE
GL_GREEN_BIAS = _osg.GL_GREEN_BIAS
GL_BLUE_SCALE = _osg.GL_BLUE_SCALE
GL_BLUE_BIAS = _osg.GL_BLUE_BIAS
GL_ALPHA_SCALE = _osg.GL_ALPHA_SCALE
GL_ALPHA_BIAS = _osg.GL_ALPHA_BIAS
GL_DEPTH_SCALE = _osg.GL_DEPTH_SCALE
GL_DEPTH_BIAS = _osg.GL_DEPTH_BIAS
GL_PIXEL_MAP_S_TO_S_SIZE = _osg.GL_PIXEL_MAP_S_TO_S_SIZE
GL_PIXEL_MAP_I_TO_I_SIZE = _osg.GL_PIXEL_MAP_I_TO_I_SIZE
GL_PIXEL_MAP_I_TO_R_SIZE = _osg.GL_PIXEL_MAP_I_TO_R_SIZE
GL_PIXEL_MAP_I_TO_G_SIZE = _osg.GL_PIXEL_MAP_I_TO_G_SIZE
GL_PIXEL_MAP_I_TO_B_SIZE = _osg.GL_PIXEL_MAP_I_TO_B_SIZE
GL_PIXEL_MAP_I_TO_A_SIZE = _osg.GL_PIXEL_MAP_I_TO_A_SIZE
GL_PIXEL_MAP_R_TO_R_SIZE = _osg.GL_PIXEL_MAP_R_TO_R_SIZE
GL_PIXEL_MAP_G_TO_G_SIZE = _osg.GL_PIXEL_MAP_G_TO_G_SIZE
GL_PIXEL_MAP_B_TO_B_SIZE = _osg.GL_PIXEL_MAP_B_TO_B_SIZE
GL_PIXEL_MAP_A_TO_A_SIZE = _osg.GL_PIXEL_MAP_A_TO_A_SIZE
GL_PIXEL_MAP_S_TO_S = _osg.GL_PIXEL_MAP_S_TO_S
GL_PIXEL_MAP_I_TO_I = _osg.GL_PIXEL_MAP_I_TO_I
GL_PIXEL_MAP_I_TO_R = _osg.GL_PIXEL_MAP_I_TO_R
GL_PIXEL_MAP_I_TO_G = _osg.GL_PIXEL_MAP_I_TO_G
GL_PIXEL_MAP_I_TO_B = _osg.GL_PIXEL_MAP_I_TO_B
GL_PIXEL_MAP_I_TO_A = _osg.GL_PIXEL_MAP_I_TO_A
GL_PIXEL_MAP_R_TO_R = _osg.GL_PIXEL_MAP_R_TO_R
GL_PIXEL_MAP_G_TO_G = _osg.GL_PIXEL_MAP_G_TO_G
GL_PIXEL_MAP_B_TO_B = _osg.GL_PIXEL_MAP_B_TO_B
GL_PIXEL_MAP_A_TO_A = _osg.GL_PIXEL_MAP_A_TO_A
GL_PACK_ALIGNMENT = _osg.GL_PACK_ALIGNMENT
GL_PACK_LSB_FIRST = _osg.GL_PACK_LSB_FIRST
GL_PACK_ROW_LENGTH = _osg.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_PIXELS = _osg.GL_PACK_SKIP_PIXELS
GL_PACK_SKIP_ROWS = _osg.GL_PACK_SKIP_ROWS
GL_PACK_SWAP_BYTES = _osg.GL_PACK_SWAP_BYTES
GL_UNPACK_ALIGNMENT = _osg.GL_UNPACK_ALIGNMENT
GL_UNPACK_LSB_FIRST = _osg.GL_UNPACK_LSB_FIRST
GL_UNPACK_ROW_LENGTH = _osg.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_PIXELS = _osg.GL_UNPACK_SKIP_PIXELS
GL_UNPACK_SKIP_ROWS = _osg.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SWAP_BYTES = _osg.GL_UNPACK_SWAP_BYTES
GL_ZOOM_X = _osg.GL_ZOOM_X
GL_ZOOM_Y = _osg.GL_ZOOM_Y
GL_TEXTURE_ENV = _osg.GL_TEXTURE_ENV
GL_TEXTURE_ENV_MODE = _osg.GL_TEXTURE_ENV_MODE
GL_TEXTURE_1D = _osg.GL_TEXTURE_1D
GL_TEXTURE_2D = _osg.GL_TEXTURE_2D
GL_TEXTURE_WRAP_S = _osg.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _osg.GL_TEXTURE_WRAP_T
GL_TEXTURE_MAG_FILTER = _osg.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _osg.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_ENV_COLOR = _osg.GL_TEXTURE_ENV_COLOR
GL_TEXTURE_GEN_S = _osg.GL_TEXTURE_GEN_S
GL_TEXTURE_GEN_T = _osg.GL_TEXTURE_GEN_T
GL_TEXTURE_GEN_MODE = _osg.GL_TEXTURE_GEN_MODE
GL_TEXTURE_BORDER_COLOR = _osg.GL_TEXTURE_BORDER_COLOR
GL_TEXTURE_WIDTH = _osg.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _osg.GL_TEXTURE_HEIGHT
GL_TEXTURE_BORDER = _osg.GL_TEXTURE_BORDER
GL_TEXTURE_COMPONENTS = _osg.GL_TEXTURE_COMPONENTS
GL_TEXTURE_RED_SIZE = _osg.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _osg.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _osg.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _osg.GL_TEXTURE_ALPHA_SIZE
GL_TEXTURE_LUMINANCE_SIZE = _osg.GL_TEXTURE_LUMINANCE_SIZE
GL_TEXTURE_INTENSITY_SIZE = _osg.GL_TEXTURE_INTENSITY_SIZE
GL_NEAREST_MIPMAP_NEAREST = _osg.GL_NEAREST_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _osg.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_NEAREST = _osg.GL_LINEAR_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_LINEAR = _osg.GL_LINEAR_MIPMAP_LINEAR
GL_OBJECT_LINEAR = _osg.GL_OBJECT_LINEAR
GL_OBJECT_PLANE = _osg.GL_OBJECT_PLANE
GL_EYE_LINEAR = _osg.GL_EYE_LINEAR
GL_EYE_PLANE = _osg.GL_EYE_PLANE
GL_SPHERE_MAP = _osg.GL_SPHERE_MAP
GL_DECAL = _osg.GL_DECAL
GL_MODULATE = _osg.GL_MODULATE
GL_NEAREST = _osg.GL_NEAREST
GL_REPEAT = _osg.GL_REPEAT
GL_CLAMP = _osg.GL_CLAMP
GL_S = _osg.GL_S
GL_T = _osg.GL_T
GL_R = _osg.GL_R
GL_Q = _osg.GL_Q
GL_TEXTURE_GEN_R = _osg.GL_TEXTURE_GEN_R
GL_TEXTURE_GEN_Q = _osg.GL_TEXTURE_GEN_Q
GL_VENDOR = _osg.GL_VENDOR
GL_RENDERER = _osg.GL_RENDERER
GL_VERSION = _osg.GL_VERSION
GL_EXTENSIONS = _osg.GL_EXTENSIONS
GL_NO_ERROR = _osg.GL_NO_ERROR
GL_INVALID_ENUM = _osg.GL_INVALID_ENUM
GL_INVALID_VALUE = _osg.GL_INVALID_VALUE
GL_INVALID_OPERATION = _osg.GL_INVALID_OPERATION
GL_STACK_OVERFLOW = _osg.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _osg.GL_STACK_UNDERFLOW
GL_OUT_OF_MEMORY = _osg.GL_OUT_OF_MEMORY
GL_CURRENT_BIT = _osg.GL_CURRENT_BIT
GL_POINT_BIT = _osg.GL_POINT_BIT
GL_LINE_BIT = _osg.GL_LINE_BIT
GL_POLYGON_BIT = _osg.GL_POLYGON_BIT
GL_POLYGON_STIPPLE_BIT = _osg.GL_POLYGON_STIPPLE_BIT
GL_PIXEL_MODE_BIT = _osg.GL_PIXEL_MODE_BIT
GL_LIGHTING_BIT = _osg.GL_LIGHTING_BIT
GL_FOG_BIT = _osg.GL_FOG_BIT
GL_DEPTH_BUFFER_BIT = _osg.GL_DEPTH_BUFFER_BIT
GL_ACCUM_BUFFER_BIT = _osg.GL_ACCUM_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _osg.GL_STENCIL_BUFFER_BIT
GL_VIEWPORT_BIT = _osg.GL_VIEWPORT_BIT
GL_TRANSFORM_BIT = _osg.GL_TRANSFORM_BIT
GL_ENABLE_BIT = _osg.GL_ENABLE_BIT
GL_COLOR_BUFFER_BIT = _osg.GL_COLOR_BUFFER_BIT
GL_HINT_BIT = _osg.GL_HINT_BIT
GL_EVAL_BIT = _osg.GL_EVAL_BIT
GL_LIST_BIT = _osg.GL_LIST_BIT
GL_TEXTURE_BIT = _osg.GL_TEXTURE_BIT
GL_SCISSOR_BIT = _osg.GL_SCISSOR_BIT
GL_ALL_ATTRIB_BITS = _osg.GL_ALL_ATTRIB_BITS
GL_PROXY_TEXTURE_1D = _osg.GL_PROXY_TEXTURE_1D
GL_PROXY_TEXTURE_2D = _osg.GL_PROXY_TEXTURE_2D
GL_TEXTURE_PRIORITY = _osg.GL_TEXTURE_PRIORITY
GL_TEXTURE_RESIDENT = _osg.GL_TEXTURE_RESIDENT
GL_TEXTURE_BINDING_1D = _osg.GL_TEXTURE_BINDING_1D
GL_TEXTURE_BINDING_2D = _osg.GL_TEXTURE_BINDING_2D
GL_TEXTURE_INTERNAL_FORMAT = _osg.GL_TEXTURE_INTERNAL_FORMAT
GL_ALPHA4 = _osg.GL_ALPHA4
GL_ALPHA8 = _osg.GL_ALPHA8
GL_ALPHA12 = _osg.GL_ALPHA12
GL_ALPHA16 = _osg.GL_ALPHA16
GL_LUMINANCE4 = _osg.GL_LUMINANCE4
GL_LUMINANCE8 = _osg.GL_LUMINANCE8
GL_LUMINANCE12 = _osg.GL_LUMINANCE12
GL_LUMINANCE16 = _osg.GL_LUMINANCE16
GL_LUMINANCE4_ALPHA4 = _osg.GL_LUMINANCE4_ALPHA4
GL_LUMINANCE6_ALPHA2 = _osg.GL_LUMINANCE6_ALPHA2
GL_LUMINANCE8_ALPHA8 = _osg.GL_LUMINANCE8_ALPHA8
GL_LUMINANCE12_ALPHA4 = _osg.GL_LUMINANCE12_ALPHA4
GL_LUMINANCE12_ALPHA12 = _osg.GL_LUMINANCE12_ALPHA12
GL_LUMINANCE16_ALPHA16 = _osg.GL_LUMINANCE16_ALPHA16
GL_INTENSITY = _osg.GL_INTENSITY
GL_INTENSITY4 = _osg.GL_INTENSITY4
GL_INTENSITY8 = _osg.GL_INTENSITY8
GL_INTENSITY12 = _osg.GL_INTENSITY12
GL_INTENSITY16 = _osg.GL_INTENSITY16
GL_R3_G3_B2 = _osg.GL_R3_G3_B2
GL_RGB4 = _osg.GL_RGB4
GL_RGB5 = _osg.GL_RGB5
GL_RGB8 = _osg.GL_RGB8
GL_RGB10 = _osg.GL_RGB10
GL_RGB12 = _osg.GL_RGB12
GL_RGB16 = _osg.GL_RGB16
GL_RGBA2 = _osg.GL_RGBA2
GL_RGBA4 = _osg.GL_RGBA4
GL_RGB5_A1 = _osg.GL_RGB5_A1
GL_RGBA8 = _osg.GL_RGBA8
GL_RGB10_A2 = _osg.GL_RGB10_A2
GL_RGBA12 = _osg.GL_RGBA12
GL_RGBA16 = _osg.GL_RGBA16
GL_CLIENT_PIXEL_STORE_BIT = _osg.GL_CLIENT_PIXEL_STORE_BIT
GL_CLIENT_VERTEX_ARRAY_BIT = _osg.GL_CLIENT_VERTEX_ARRAY_BIT
GL_ALL_CLIENT_ATTRIB_BITS = _osg.GL_ALL_CLIENT_ATTRIB_BITS
GL_CLIENT_ALL_ATTRIB_BITS = _osg.GL_CLIENT_ALL_ATTRIB_BITS
OSG_VERSION = _osg.OSG_VERSION
OPENSCENEGRAPH_MAJOR_VERSION = _osg.OPENSCENEGRAPH_MAJOR_VERSION
OPENSCENEGRAPH_MINOR_VERSION = _osg.OPENSCENEGRAPH_MINOR_VERSION
OPENSCENEGRAPH_PATCH_VERSION = _osg.OPENSCENEGRAPH_PATCH_VERSION
OPENSCENEGRAPH_SOVERSION = _osg.OPENSCENEGRAPH_SOVERSION

def osgGetVersion():
  """osgGetVersion() -> char"""
  return _osg.osgGetVersion()

def osgGetSOVersion():
  """osgGetSOVersion() -> char"""
  return _osg.osgGetSOVersion()

def osgGetLibraryName():
  """osgGetLibraryName() -> char"""
  return _osg.osgGetLibraryName()
OSG_VERSION_MAJOR = _osg.OSG_VERSION_MAJOR
OSG_VERSION_MINOR = _osg.OSG_VERSION_MINOR
OSG_VERSION_PATCH = _osg.OSG_VERSION_PATCH
OSG_VERSION_RELEASE = _osg.OSG_VERSION_RELEASE
OSG_VERSION_REVISION = _osg.OSG_VERSION_REVISION
OSG_CONFIG = _osg.OSG_CONFIG
class DrawCallback(_object):
    """Proxy of C++ DrawCallback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DrawCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DrawCallback
        __init__(self, DrawCallback arg0, CopyOp arg1) -> DrawCallback
        """
        if self.__class__ == DrawCallback:
            _self = None
        else:
            _self = self
        this = _osg.new_DrawCallback(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(self, RenderInfo renderInfo)
        __call__(self, Camera arg0)
        """
        return _osg.DrawCallback___call__(self, *args)

    __swig_destroy__ = _osg.delete_DrawCallback
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osg.disown_DrawCallback(self)
        return weakref_proxy(self)
DrawCallback_swigregister = _osg.DrawCallback_swigregister
DrawCallback_swigregister(DrawCallback)

OSG_NOTIFY_H = _osg.OSG_NOTIFY_H
ALWAYS = _osg.ALWAYS
FATAL = _osg.FATAL
WARN = _osg.WARN
NOTICE = _osg.NOTICE
INFO = _osg.INFO
DEBUG_INFO = _osg.DEBUG_INFO
DEBUG_FP = _osg.DEBUG_FP

def setNotifyLevel(*args):
  """setNotifyLevel(NotifySeverity severity)"""
  return _osg.setNotifyLevel(*args)

def getNotifyLevel():
  """getNotifyLevel() -> NotifySeverity"""
  return _osg.getNotifyLevel()

def initNotifyLevel():
  """initNotifyLevel() -> bool"""
  return _osg.initNotifyLevel()

def isNotifyEnabled(*args):
  """isNotifyEnabled(NotifySeverity severity) -> bool"""
  return _osg.isNotifyEnabled(*args)
class NotifyHandler(_object):
    """Proxy of C++ osg::NotifyHandler class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyHandler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def notify(self, *args):
        """notify(self, NotifySeverity severity, char message)"""
        return _osg.NotifyHandler_notify(self, *args)

    __swig_destroy__ = _osg.delete_NotifyHandler
    __del__ = lambda self : None;
NotifyHandler_swigregister = _osg.NotifyHandler_swigregister
NotifyHandler_swigregister(NotifyHandler)

def notify(*args):
  """
    notify(NotifySeverity severity) -> std::ostream
    notify() -> std::ostream
    """
  return _osg.notify(*args)


def setNotifyHandler(*args):
  """setNotifyHandler(NotifyHandler handler)"""
  return _osg.setNotifyHandler(*args)

def getNotifyHandler():
  """getNotifyHandler() -> NotifyHandler"""
  return _osg.getNotifyHandler()
class StandardNotifyHandler(NotifyHandler):
    """Proxy of C++ osg::StandardNotifyHandler class"""
    __swig_setmethods__ = {}
    for _s in [NotifyHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardNotifyHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [NotifyHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandardNotifyHandler, name)
    __repr__ = _swig_repr
    def notify(self, *args):
        """notify(self, NotifySeverity severity, char message)"""
        return _osg.StandardNotifyHandler_notify(self, *args)

    def __init__(self): 
        """__init__(self) -> StandardNotifyHandler"""
        this = _osg.new_StandardNotifyHandler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_StandardNotifyHandler
    __del__ = lambda self : None;
StandardNotifyHandler_swigregister = _osg.StandardNotifyHandler_swigregister
StandardNotifyHandler_swigregister(StandardNotifyHandler)


def asciiToDouble(*args):
  """asciiToDouble(char str) -> double"""
  return _osg.asciiToDouble(*args)

def asciiToFloat(*args):
  """asciiToFloat(char str) -> float"""
  return _osg.asciiToFloat(*args)

def findAsciiToDouble(*args):
  """findAsciiToDouble(char str) -> double"""
  return _osg.findAsciiToDouble(*args)

def findAsciiToFloat(*args):
  """findAsciiToFloat(char str) -> float"""
  return _osg.findAsciiToFloat(*args)
OSG_REFERENCED = _osg.OSG_REFERENCED
class Referenced(_object):
    """Proxy of C++ osg::Referenced class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Referenced, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Referenced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Referenced
        __init__(self, bool threadSafeRefUnref) -> Referenced
        __init__(self, Referenced arg0) -> Referenced
        """
        this = _osg.new_Referenced(*args)
        try: self.this.append(this)
        except: self.this = this
    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Referenced_setThreadSafeRefUnref(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.Referenced_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.Referenced_getRefMutex(self)

    def getGlobalReferencedMutex():
        """getGlobalReferencedMutex() -> OpenThreads::Mutex"""
        return _osg.Referenced_getGlobalReferencedMutex()

    if _newclass:getGlobalReferencedMutex = staticmethod(getGlobalReferencedMutex)
    __swig_getmethods__["getGlobalReferencedMutex"] = lambda x: getGlobalReferencedMutex
    def ref(self):
        """ref(self) -> int"""
        return _osg.Referenced_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.Referenced_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.Referenced_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.Referenced_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.Referenced_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.Referenced_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.Referenced_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.Referenced_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(*args):
        """setThreadSafeReferenceCounting(bool enableThreadSafeReferenceCounting)"""
        return _osg.Referenced_setThreadSafeReferenceCounting(*args)

    if _newclass:setThreadSafeReferenceCounting = staticmethod(setThreadSafeReferenceCounting)
    __swig_getmethods__["setThreadSafeReferenceCounting"] = lambda x: setThreadSafeReferenceCounting
    def getThreadSafeReferenceCounting():
        """getThreadSafeReferenceCounting() -> bool"""
        return _osg.Referenced_getThreadSafeReferenceCounting()

    if _newclass:getThreadSafeReferenceCounting = staticmethod(getThreadSafeReferenceCounting)
    __swig_getmethods__["getThreadSafeReferenceCounting"] = lambda x: getThreadSafeReferenceCounting
    def setDeleteHandler(*args):
        """setDeleteHandler(DeleteHandler handler)"""
        return _osg.Referenced_setDeleteHandler(*args)

    if _newclass:setDeleteHandler = staticmethod(setDeleteHandler)
    __swig_getmethods__["setDeleteHandler"] = lambda x: setDeleteHandler
    def getDeleteHandler():
        """getDeleteHandler() -> DeleteHandler"""
        return _osg.Referenced_getDeleteHandler()

    if _newclass:getDeleteHandler = staticmethod(getDeleteHandler)
    __swig_getmethods__["getDeleteHandler"] = lambda x: getDeleteHandler
    __swig_destroy__ = _osg.delete_Referenced
    __del__ = lambda self : None;
Referenced_swigregister = _osg.Referenced_swigregister
Referenced_swigregister(Referenced)
cvar = _osg.cvar
PI = cvar.PI
PI_2 = cvar.PI_2
PI_4 = cvar.PI_4
LN_2 = cvar.LN_2
INVLN_2 = cvar.INVLN_2

def equivalent(*args):
  """
    equivalent(float lhs, float rhs, float epsilon = 1e-6) -> bool
    equivalent(float lhs, float rhs) -> bool
    equivalent(double lhs, double rhs, double epsilon = 1e-6) -> bool
    equivalent(double lhs, double rhs) -> bool
    """
  return _osg.equivalent(*args)

def inDegrees(*args):
  """
    inDegrees(float angle) -> float
    inDegrees(double angle) -> double
    """
  return _osg.inDegrees(*args)

def DegreesToRadians(*args):
  """
    DegreesToRadians(float angle) -> float
    DegreesToRadians(double angle) -> double
    """
  return _osg.DegreesToRadians(*args)

def RadiansToDegrees(*args):
  """
    RadiansToDegrees(float angle) -> float
    RadiansToDegrees(double angle) -> double
    """
  return _osg.RadiansToDegrees(*args)

def round(*args):
  """
    round(float v) -> float
    round(double v) -> double
    """
  return _osg.round(*args)

def isNaN(*args):
  """
    isNaN(float v) -> bool
    isNaN(double v) -> bool
    """
  return _osg.isNaN(*args)

def Referenced_getGlobalReferencedMutex():
  """Referenced_getGlobalReferencedMutex() -> OpenThreads::Mutex"""
  return _osg.Referenced_getGlobalReferencedMutex()

def Referenced_setThreadSafeReferenceCounting(*args):
  """Referenced_setThreadSafeReferenceCounting(bool enableThreadSafeReferenceCounting)"""
  return _osg.Referenced_setThreadSafeReferenceCounting(*args)

def Referenced_getThreadSafeReferenceCounting():
  """Referenced_getThreadSafeReferenceCounting() -> bool"""
  return _osg.Referenced_getThreadSafeReferenceCounting()

def Referenced_setDeleteHandler(*args):
  """Referenced_setDeleteHandler(DeleteHandler handler)"""
  return _osg.Referenced_setDeleteHandler(*args)

def Referenced_getDeleteHandler():
  """Referenced_getDeleteHandler() -> DeleteHandler"""
  return _osg.Referenced_getDeleteHandler()


def intrusive_ptr_add_ref(*args):
  """intrusive_ptr_add_ref(Referenced p)"""
  return _osg.intrusive_ptr_add_ref(*args)

def intrusive_ptr_release(*args):
  """intrusive_ptr_release(Referenced p)"""
  return _osg.intrusive_ptr_release(*args)
OSG_REF_PTR = _osg.OSG_REF_PTR
OSG_MIXIN_VECTOR = _osg.OSG_MIXIN_VECTOR
OSG_DELETEHANDLER = _osg.OSG_DELETEHANDLER
class DeleteHandler(_object):
    """Proxy of C++ osg::DeleteHandler class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeleteHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeleteHandler, name)
    __repr__ = _swig_repr
    def __init__(self, numberOfFramesToRetainObjects = 0): 
        """
        __init__(self, int numberOfFramesToRetainObjects = 0) -> DeleteHandler
        __init__(self) -> DeleteHandler
        """
        this = _osg.new_DeleteHandler(numberOfFramesToRetainObjects)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_DeleteHandler
    __del__ = lambda self : None;
    def setNumFramesToRetainObjects(self, *args):
        """setNumFramesToRetainObjects(self, unsigned int numberOfFramesToRetainObjects)"""
        return _osg.DeleteHandler_setNumFramesToRetainObjects(self, *args)

    def getNumFramesToRetainObjects(self):
        """getNumFramesToRetainObjects(self) -> unsigned int"""
        return _osg.DeleteHandler_getNumFramesToRetainObjects(self)

    def setFrameNumber(self, *args):
        """setFrameNumber(self, unsigned int frameNumber)"""
        return _osg.DeleteHandler_setFrameNumber(self, *args)

    def getFrameNumber(self):
        """getFrameNumber(self) -> unsigned int"""
        return _osg.DeleteHandler_getFrameNumber(self)

    def doDelete(self, *args):
        """doDelete(self, Referenced object)"""
        return _osg.DeleteHandler_doDelete(self, *args)

    def flush(self):
        """flush(self)"""
        return _osg.DeleteHandler_flush(self)

    def flushAll(self):
        """flushAll(self)"""
        return _osg.DeleteHandler_flushAll(self)

    def requestDelete(self, *args):
        """requestDelete(self, Referenced object)"""
        return _osg.DeleteHandler_requestDelete(self, *args)

DeleteHandler_swigregister = _osg.DeleteHandler_swigregister
DeleteHandler_swigregister(DeleteHandler)

OSG_COPYOP = _osg.OSG_COPYOP
class CopyOp(_object):
    """Proxy of C++ osg::CopyOp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CopyOp, name)
    __repr__ = _swig_repr
    SHALLOW_COPY = _osg.CopyOp_SHALLOW_COPY
    DEEP_COPY_OBJECTS = _osg.CopyOp_DEEP_COPY_OBJECTS
    DEEP_COPY_NODES = _osg.CopyOp_DEEP_COPY_NODES
    DEEP_COPY_DRAWABLES = _osg.CopyOp_DEEP_COPY_DRAWABLES
    DEEP_COPY_STATESETS = _osg.CopyOp_DEEP_COPY_STATESETS
    DEEP_COPY_STATEATTRIBUTES = _osg.CopyOp_DEEP_COPY_STATEATTRIBUTES
    DEEP_COPY_TEXTURES = _osg.CopyOp_DEEP_COPY_TEXTURES
    DEEP_COPY_IMAGES = _osg.CopyOp_DEEP_COPY_IMAGES
    DEEP_COPY_ARRAYS = _osg.CopyOp_DEEP_COPY_ARRAYS
    DEEP_COPY_PRIMITIVES = _osg.CopyOp_DEEP_COPY_PRIMITIVES
    DEEP_COPY_SHAPES = _osg.CopyOp_DEEP_COPY_SHAPES
    DEEP_COPY_UNIFORMS = _osg.CopyOp_DEEP_COPY_UNIFORMS
    DEEP_COPY_CALLBACKS = _osg.CopyOp_DEEP_COPY_CALLBACKS
    DEEP_COPY_USERDATA = _osg.CopyOp_DEEP_COPY_USERDATA
    DEEP_COPY_ALL = _osg.CopyOp_DEEP_COPY_ALL
    def __init__(self, *args): 
        """
        __init__(self, CopyFlags flags = SHALLOW_COPY) -> CopyOp
        __init__(self) -> CopyOp
        """
        this = _osg.new_CopyOp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CopyOp
    __del__ = lambda self : None;
    def setCopyFlags(self, *args):
        """setCopyFlags(self, CopyFlags flags)"""
        return _osg.CopyOp_setCopyFlags(self, *args)

    def getCopyFlags(self):
        """getCopyFlags(self) -> CopyFlags"""
        return _osg.CopyOp_getCopyFlags(self)

    def __call__(self, *args):
        """
        __call__(self, Referenced ref) -> Referenced
        __call__(self, Object obj) -> Object
        __call__(self, Node node) -> Node
        __call__(self, Drawable drawable) -> Drawable
        __call__(self, StateSet stateset) -> StateSet
        __call__(self, StateAttribute attr) -> StateAttribute
        __call__(self, Texture text) -> Texture
        __call__(self, Image image) -> Image
        __call__(self, Array array) -> Array
        __call__(self, PrimitiveSet primitives) -> PrimitiveSet
        __call__(self, Shape shape) -> Shape
        __call__(self, Uniform shape) -> Uniform
        __call__(self, NodeCallback nodecallback) -> NodeCallback
        __call__(self, StateAttributeCallback stateattributecallback) -> StateAttributeCallback
        """
        return _osg.CopyOp___call__(self, *args)

CopyOp_swigregister = _osg.CopyOp_swigregister
CopyOp_swigregister(CopyOp)

OSG_OBJECT = _osg.OSG_OBJECT
class Object(Referenced):
    """Proxy of C++ osg::Object class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Object_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osg.Object_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object arg0) -> bool"""
        return _osg.Object_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Object_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Object_className(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Object_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.Object_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.Object_getName(self)

    DYNAMIC = _osg.Object_DYNAMIC
    STATIC = _osg.Object_STATIC
    UNSPECIFIED = _osg.Object_UNSPECIFIED
    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.Object_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.Object_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.Object_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.Object_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.Object_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.Object_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.Object_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.Object_getUserData(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osg.Object_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.Object_releaseGLObjects(self, arg0)

Object_swigregister = _osg.Object_swigregister
Object_swigregister(Object)

OSG_VEC2S = _osg.OSG_VEC2S
class Vec2s(_object):
    """Proxy of C++ osg::Vec2s class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2s, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2s_num_components
    __swig_setmethods__["_v"] = _osg.Vec2s__v_set
    __swig_getmethods__["_v"] = _osg.Vec2s__v_get
    if _newclass:_v = _swig_property(_osg.Vec2s__v_get, _osg.Vec2s__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec2s
        __init__(self, value_type x, value_type y) -> Vec2s
        """
        this = _osg.new_Vec2s(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec2s v) -> bool"""
        return _osg.Vec2s___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec2s v) -> bool"""
        return _osg.Vec2s___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec2s v) -> bool"""
        return _osg.Vec2s___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec2s_ptr(self, *args)

    def set(self, *args):
        """
        set(self, value_type x, value_type y)
        set(self, Vec2s rhs)
        """
        return _osg.Vec2s_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec2s_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec2s_y(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec2s_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec2s_g(self)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec2s"""
        return _osg.Vec2s___div__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, value_type rhs) -> Vec2s
        __mul__(self, Vec2s rhs) -> Vec2s
        """
        return _osg.Vec2s___mul__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec2s rhs) -> Vec2s"""
        return _osg.Vec2s___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec2s rhs) -> Vec2s"""
        return _osg.Vec2s___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec2s"""
        return _osg.Vec2s___neg__(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec2s___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec2s___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec2s___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec2s___len__(self)

    __swig_destroy__ = _osg.delete_Vec2s
    __del__ = lambda self : None;
Vec2s_swigregister = _osg.Vec2s_swigregister
Vec2s_swigregister(Vec2s)

OSG_VEC3S = _osg.OSG_VEC3S
class Vec3s(_object):
    """Proxy of C++ osg::Vec3s class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3s, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3s_num_components
    __swig_setmethods__["_v"] = _osg.Vec3s__v_set
    __swig_getmethods__["_v"] = _osg.Vec3s__v_get
    if _newclass:_v = _swig_property(_osg.Vec3s__v_get, _osg.Vec3s__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec3s
        __init__(self, value_type r, value_type g, value_type b) -> Vec3s
        """
        this = _osg.new_Vec3s(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec3s v) -> bool"""
        return _osg.Vec3s___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec3s v) -> bool"""
        return _osg.Vec3s___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec3s v) -> bool"""
        return _osg.Vec3s___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec3s_ptr(self, *args)

    def set(self, *args):
        """
        set(self, value_type r, value_type g, value_type b)
        set(self, Vec3s rhs)
        """
        return _osg.Vec3s_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec3s_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec3s_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec3s_z(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec3s_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec3s_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec3s_b(self)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec3s"""
        return _osg.Vec3s___div__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, value_type rhs) -> Vec3s
        __mul__(self, Vec3s rhs) -> Vec3s
        """
        return _osg.Vec3s___mul__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec3s rhs) -> Vec3s"""
        return _osg.Vec3s___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec3s rhs) -> Vec3s"""
        return _osg.Vec3s___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec3s"""
        return _osg.Vec3s___neg__(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec3s___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec3s___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec3s___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec3s___len__(self)

    __swig_destroy__ = _osg.delete_Vec3s
    __del__ = lambda self : None;
Vec3s_swigregister = _osg.Vec3s_swigregister
Vec3s_swigregister(Vec3s)

OSG_VEC4S = _osg.OSG_VEC4S
class Vec4s(_object):
    """Proxy of C++ osg::Vec4s class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4s, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4s_num_components
    __swig_setmethods__["_v"] = _osg.Vec4s__v_set
    __swig_getmethods__["_v"] = _osg.Vec4s__v_get
    if _newclass:_v = _swig_property(_osg.Vec4s__v_get, _osg.Vec4s__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4s
        __init__(self, value_type x, value_type y, value_type z, value_type w) -> Vec4s
        """
        this = _osg.new_Vec4s(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec4s v) -> bool"""
        return _osg.Vec4s___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec4s v) -> bool"""
        return _osg.Vec4s___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec4s v) -> bool"""
        return _osg.Vec4s___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec4s_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type x, value_type y, value_type z, value_type w)"""
        return _osg.Vec4s_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec4s_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec4s_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec4s_z(self)

    def w(self):
        """w(self) -> value_type"""
        return _osg.Vec4s_w(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec4s_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec4s_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec4s_b(self)

    def a(self):
        """a(self) -> value_type"""
        return _osg.Vec4s_a(self)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec4s"""
        return _osg.Vec4s___div__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, value_type rhs) -> Vec4s
        __mul__(self, Vec4s rhs) -> Vec4s
        """
        return _osg.Vec4s___mul__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec4s rhs) -> Vec4s"""
        return _osg.Vec4s___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec4s rhs) -> Vec4s"""
        return _osg.Vec4s___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec4s"""
        return _osg.Vec4s___neg__(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec4s___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec4s___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec4s___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec4s___len__(self)

    __swig_destroy__ = _osg.delete_Vec4s
    __del__ = lambda self : None;
Vec4s_swigregister = _osg.Vec4s_swigregister
Vec4s_swigregister(Vec4s)

OSG_VEC4UB = _osg.OSG_VEC4UB
class Vec4ub(_object):
    """Proxy of C++ osg::Vec4ub class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4ub, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4ub, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4ub_num_components
    __swig_setmethods__["_v"] = _osg.Vec4ub__v_set
    __swig_getmethods__["_v"] = _osg.Vec4ub__v_get
    if _newclass:_v = _swig_property(_osg.Vec4ub__v_get, _osg.Vec4ub__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4ub
        __init__(self, value_type x, value_type y, value_type z, value_type w) -> Vec4ub
        """
        this = _osg.new_Vec4ub(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec4ub v) -> bool"""
        return _osg.Vec4ub___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec4ub v) -> bool"""
        return _osg.Vec4ub___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec4ub v) -> bool"""
        return _osg.Vec4ub___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec4ub_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type r, value_type g, value_type b, value_type a)"""
        return _osg.Vec4ub_set(self, *args)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec4ub_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec4ub_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec4ub_b(self)

    def a(self):
        """a(self) -> value_type"""
        return _osg.Vec4ub_a(self)

    def __mul__(self, *args):
        """__mul__(self, float rhs) -> Vec4ub"""
        return _osg.Vec4ub___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, float rhs) -> Vec4ub"""
        return _osg.Vec4ub___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec4ub rhs) -> Vec4ub"""
        return _osg.Vec4ub___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec4ub rhs) -> Vec4ub"""
        return _osg.Vec4ub___sub__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec4ub___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec4ub___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec4ub___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec4ub___len__(self)

    __swig_destroy__ = _osg.delete_Vec4ub
    __del__ = lambda self : None;
Vec4ub_swigregister = _osg.Vec4ub_swigregister
Vec4ub_swigregister(Vec4ub)

OSG_VEC2B = _osg.OSG_VEC2B
class Vec2b(_object):
    """Proxy of C++ osg::Vec2b class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2b, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2b_num_components
    __swig_setmethods__["_v"] = _osg.Vec2b__v_set
    __swig_getmethods__["_v"] = _osg.Vec2b__v_get
    if _newclass:_v = _swig_property(_osg.Vec2b__v_get, _osg.Vec2b__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec2b
        __init__(self, value_type r, value_type g) -> Vec2b
        """
        this = _osg.new_Vec2b(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec2b v) -> bool"""
        return _osg.Vec2b___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec2b v) -> bool"""
        return _osg.Vec2b___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec2b v) -> bool"""
        return _osg.Vec2b___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec2b_ptr(self, *args)

    def set(self, *args):
        """
        set(self, value_type x, value_type y)
        set(self, Vec2b rhs)
        """
        return _osg.Vec2b_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec2b_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec2b_y(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec2b_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec2b_g(self)

    def __mul__(self, *args):
        """__mul__(self, float rhs) -> Vec2b"""
        return _osg.Vec2b___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, float rhs) -> Vec2b"""
        return _osg.Vec2b___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec2b rhs) -> Vec2b"""
        return _osg.Vec2b___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec2b rhs) -> Vec2b"""
        return _osg.Vec2b___sub__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec2b___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec2b___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec2b___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec2b___len__(self)

    __swig_destroy__ = _osg.delete_Vec2b
    __del__ = lambda self : None;
Vec2b_swigregister = _osg.Vec2b_swigregister
Vec2b_swigregister(Vec2b)

OSG_VEC3B = _osg.OSG_VEC3B
class Vec3b(_object):
    """Proxy of C++ osg::Vec3b class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3b, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3b_num_components
    __swig_setmethods__["_v"] = _osg.Vec3b__v_set
    __swig_getmethods__["_v"] = _osg.Vec3b__v_get
    if _newclass:_v = _swig_property(_osg.Vec3b__v_get, _osg.Vec3b__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec3b
        __init__(self, value_type r, value_type g, value_type b) -> Vec3b
        """
        this = _osg.new_Vec3b(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec3b v) -> bool"""
        return _osg.Vec3b___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec3b v) -> bool"""
        return _osg.Vec3b___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec3b v) -> bool"""
        return _osg.Vec3b___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec3b_ptr(self, *args)

    def set(self, *args):
        """
        set(self, value_type r, value_type g, value_type b)
        set(self, Vec3b rhs)
        """
        return _osg.Vec3b_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec3b_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec3b_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec3b_z(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec3b_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec3b_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec3b_b(self)

    def __mul__(self, *args):
        """__mul__(self, float rhs) -> Vec3b"""
        return _osg.Vec3b___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, float rhs) -> Vec3b"""
        return _osg.Vec3b___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec3b rhs) -> Vec3b"""
        return _osg.Vec3b___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec3b rhs) -> Vec3b"""
        return _osg.Vec3b___sub__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec3b___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec3b___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec3b___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec3b___len__(self)

    __swig_destroy__ = _osg.delete_Vec3b
    __del__ = lambda self : None;
Vec3b_swigregister = _osg.Vec3b_swigregister
Vec3b_swigregister(Vec3b)

OSG_VEC4B = _osg.OSG_VEC4B
class Vec4b(_object):
    """Proxy of C++ osg::Vec4b class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4b, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4b, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4b_num_components
    __swig_setmethods__["_v"] = _osg.Vec4b__v_set
    __swig_getmethods__["_v"] = _osg.Vec4b__v_get
    if _newclass:_v = _swig_property(_osg.Vec4b__v_get, _osg.Vec4b__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4b
        __init__(self, value_type x, value_type y, value_type z, value_type w) -> Vec4b
        """
        this = _osg.new_Vec4b(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec4b v) -> bool"""
        return _osg.Vec4b___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec4b v) -> bool"""
        return _osg.Vec4b___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec4b v) -> bool"""
        return _osg.Vec4b___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec4b_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type x, value_type y, value_type z, value_type w)"""
        return _osg.Vec4b_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec4b_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec4b_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec4b_z(self)

    def w(self):
        """w(self) -> value_type"""
        return _osg.Vec4b_w(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec4b_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec4b_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec4b_b(self)

    def a(self):
        """a(self) -> value_type"""
        return _osg.Vec4b_a(self)

    def __mul__(self, *args):
        """__mul__(self, float rhs) -> Vec4b"""
        return _osg.Vec4b___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, float rhs) -> Vec4b"""
        return _osg.Vec4b___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec4b rhs) -> Vec4b"""
        return _osg.Vec4b___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec4b rhs) -> Vec4b"""
        return _osg.Vec4b___sub__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec4b___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec4b___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec4b___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec4b___len__(self)

    __swig_destroy__ = _osg.delete_Vec4b
    __del__ = lambda self : None;
Vec4b_swigregister = _osg.Vec4b_swigregister
Vec4b_swigregister(Vec4b)

OSG_VEC2F = _osg.OSG_VEC2F
class Vec2f(_object):
    """Proxy of C++ osg::Vec2f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2f, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2f_num_components
    __swig_setmethods__["_v"] = _osg.Vec2f__v_set
    __swig_getmethods__["_v"] = _osg.Vec2f__v_get
    if _newclass:_v = _swig_property(_osg.Vec2f__v_get, _osg.Vec2f__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec2f
        __init__(self, value_type x, value_type y) -> Vec2f
        """
        this = _osg.new_Vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec2f v) -> bool"""
        return _osg.Vec2f___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec2f v) -> bool"""
        return _osg.Vec2f___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec2f v) -> bool"""
        return _osg.Vec2f___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec2f_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type x, value_type y)"""
        return _osg.Vec2f_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec2f_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec2f_y(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Vec2f_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Vec2f_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(self, Vec2f rhs) -> value_type
        __mul__(self, value_type rhs) -> Vec2f
        """
        return _osg.Vec2f___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec2f"""
        return _osg.Vec2f___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec2f rhs) -> Vec2f"""
        return _osg.Vec2f___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec2f rhs) -> Vec2f"""
        return _osg.Vec2f___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec2f"""
        return _osg.Vec2f___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Vec2f_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Vec2f_length2(self)

    def normalize(self):
        """normalize(self) -> value_type"""
        return _osg.Vec2f_normalize(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec2f___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec2f___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec2f___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec2f___len__(self)

    __swig_destroy__ = _osg.delete_Vec2f
    __del__ = lambda self : None;
Vec2f_swigregister = _osg.Vec2f_swigregister
Vec2f_swigregister(Vec2f)

OSG_VEC3F = _osg.OSG_VEC3F
class Vec3f(_object):
    """Proxy of C++ osg::Vec3f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3f_num_components
    __swig_setmethods__["_v"] = _osg.Vec3f__v_set
    __swig_getmethods__["_v"] = _osg.Vec3f__v_get
    if _newclass:_v = _swig_property(_osg.Vec3f__v_get, _osg.Vec3f__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec3f
        __init__(self, value_type x, value_type y, value_type z) -> Vec3f
        __init__(self, Vec2f v2, value_type zz) -> Vec3f
        """
        this = _osg.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec3f v) -> bool"""
        return _osg.Vec3f___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec3f v) -> bool"""
        return _osg.Vec3f___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec3f v) -> bool"""
        return _osg.Vec3f___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec3f_ptr(self, *args)

    def set(self, *args):
        """
        set(self, value_type x, value_type y, value_type z)
        set(self, Vec3f rhs)
        """
        return _osg.Vec3f_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec3f_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec3f_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec3f_z(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Vec3f_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Vec3f_isNaN(self)

    def __xor__(self, *args):
        """__xor__(self, Vec3f rhs) -> Vec3f"""
        return _osg.Vec3f___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, Vec3f rhs) -> value_type
        __mul__(self, value_type rhs) -> Vec3f
        """
        return _osg.Vec3f___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec3f"""
        return _osg.Vec3f___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec3f rhs) -> Vec3f"""
        return _osg.Vec3f___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec3f rhs) -> Vec3f"""
        return _osg.Vec3f___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec3f"""
        return _osg.Vec3f___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Vec3f_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Vec3f_length2(self)

    def normalize(self):
        """normalize(self) -> value_type"""
        return _osg.Vec3f_normalize(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec3f___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec3f___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec3f___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec3f___len__(self)

    __swig_destroy__ = _osg.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _osg.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

OSG_VEC4F = _osg.OSG_VEC4F
class Vec4f(_object):
    """Proxy of C++ osg::Vec4f class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4f, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4f_num_components
    __swig_setmethods__["_v"] = _osg.Vec4f__v_set
    __swig_getmethods__["_v"] = _osg.Vec4f__v_get
    if _newclass:_v = _swig_property(_osg.Vec4f__v_get, _osg.Vec4f__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4f
        __init__(self, value_type x, value_type y, value_type z, value_type w) -> Vec4f
        __init__(self, Vec3f v3, value_type w) -> Vec4f
        """
        this = _osg.new_Vec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec4f v) -> bool"""
        return _osg.Vec4f___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec4f v) -> bool"""
        return _osg.Vec4f___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec4f v) -> bool"""
        return _osg.Vec4f___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec4f_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type x, value_type y, value_type z, value_type w)"""
        return _osg.Vec4f_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec4f_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec4f_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec4f_z(self)

    def w(self):
        """w(self) -> value_type"""
        return _osg.Vec4f_w(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec4f_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec4f_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec4f_b(self)

    def a(self):
        """a(self) -> value_type"""
        return _osg.Vec4f_a(self)

    def asABGR(self):
        """asABGR(self) -> unsigned int"""
        return _osg.Vec4f_asABGR(self)

    def asRGBA(self):
        """asRGBA(self) -> unsigned int"""
        return _osg.Vec4f_asRGBA(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Vec4f_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Vec4f_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(self, Vec4f rhs) -> value_type
        __mul__(self, value_type rhs) -> Vec4f
        """
        return _osg.Vec4f___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec4f"""
        return _osg.Vec4f___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec4f rhs) -> Vec4f"""
        return _osg.Vec4f___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec4f rhs) -> Vec4f"""
        return _osg.Vec4f___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec4f"""
        return _osg.Vec4f___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Vec4f_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Vec4f_length2(self)

    def normalize(self):
        """normalize(self) -> value_type"""
        return _osg.Vec4f_normalize(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec4f___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec4f___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec4f___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec4f___len__(self)

    __swig_destroy__ = _osg.delete_Vec4f
    __del__ = lambda self : None;
Vec4f_swigregister = _osg.Vec4f_swigregister
Vec4f_swigregister(Vec4f)
X_AXIS = cvar.X_AXIS
Y_AXIS = cvar.Y_AXIS
Z_AXIS = cvar.Z_AXIS

OSG_VEC2D = _osg.OSG_VEC2D
class Vec2d(_object):
    """Proxy of C++ osg::Vec2d class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2d, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec2d_num_components
    __swig_setmethods__["_v"] = _osg.Vec2d__v_set
    __swig_getmethods__["_v"] = _osg.Vec2d__v_get
    if _newclass:_v = _swig_property(_osg.Vec2d__v_get, _osg.Vec2d__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec2d
        __init__(self, value_type x, value_type y) -> Vec2d
        __init__(self, Vec2f vec) -> Vec2d
        """
        this = _osg.new_Vec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec2d v) -> bool"""
        return _osg.Vec2d___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec2d v) -> bool"""
        return _osg.Vec2d___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec2d v) -> bool"""
        return _osg.Vec2d___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec2d_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type x, value_type y)"""
        return _osg.Vec2d_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec2d_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec2d_y(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Vec2d_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Vec2d_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(self, Vec2d rhs) -> value_type
        __mul__(self, value_type rhs) -> Vec2d
        """
        return _osg.Vec2d___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec2d"""
        return _osg.Vec2d___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec2d rhs) -> Vec2d"""
        return _osg.Vec2d___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec2d rhs) -> Vec2d"""
        return _osg.Vec2d___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec2d"""
        return _osg.Vec2d___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Vec2d_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Vec2d_length2(self)

    def normalize(self):
        """normalize(self) -> value_type"""
        return _osg.Vec2d_normalize(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec2d___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec2d___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec2d___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec2d___len__(self)

    __swig_destroy__ = _osg.delete_Vec2d
    __del__ = lambda self : None;
Vec2d_swigregister = _osg.Vec2d_swigregister
Vec2d_swigregister(Vec2d)

OSG_VEC3D = _osg.OSG_VEC3D
class Vec3d(_object):
    """Proxy of C++ osg::Vec3d class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3d, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec3d_num_components
    __swig_setmethods__["_v"] = _osg.Vec3d__v_set
    __swig_getmethods__["_v"] = _osg.Vec3d__v_get
    if _newclass:_v = _swig_property(_osg.Vec3d__v_get, _osg.Vec3d__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec3d
        __init__(self, Vec3f vec) -> Vec3d
        __init__(self, value_type x, value_type y, value_type z) -> Vec3d
        __init__(self, Vec2d v2, value_type zz) -> Vec3d
        """
        this = _osg.new_Vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec3d v) -> bool"""
        return _osg.Vec3d___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec3d v) -> bool"""
        return _osg.Vec3d___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec3d v) -> bool"""
        return _osg.Vec3d___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec3d_ptr(self, *args)

    def set(self, *args):
        """
        set(self, value_type x, value_type y, value_type z)
        set(self, Vec3d rhs)
        """
        return _osg.Vec3d_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec3d_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec3d_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec3d_z(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Vec3d_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Vec3d_isNaN(self)

    def __xor__(self, *args):
        """__xor__(self, Vec3d rhs) -> Vec3d"""
        return _osg.Vec3d___xor__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, Vec3d rhs) -> value_type
        __mul__(self, value_type rhs) -> Vec3d
        """
        return _osg.Vec3d___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec3d"""
        return _osg.Vec3d___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec3d rhs) -> Vec3d"""
        return _osg.Vec3d___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec3d rhs) -> Vec3d"""
        return _osg.Vec3d___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec3d"""
        return _osg.Vec3d___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Vec3d_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Vec3d_length2(self)

    def normalize(self):
        """normalize(self) -> value_type"""
        return _osg.Vec3d_normalize(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec3d___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec3d___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec3d___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec3d___len__(self)

    __swig_destroy__ = _osg.delete_Vec3d
    __del__ = lambda self : None;
Vec3d_swigregister = _osg.Vec3d_swigregister
Vec3d_swigregister(Vec3d)

OSG_VEC4D = _osg.OSG_VEC4D
class Vec4d(_object):
    """Proxy of C++ osg::Vec4d class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4d, name)
    __repr__ = _swig_repr
    num_components = _osg.Vec4d_num_components
    __swig_setmethods__["_v"] = _osg.Vec4d__v_set
    __swig_getmethods__["_v"] = _osg.Vec4d__v_get
    if _newclass:_v = _swig_property(_osg.Vec4d__v_get, _osg.Vec4d__v_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4d
        __init__(self, value_type x, value_type y, value_type z, value_type w) -> Vec4d
        __init__(self, Vec3d v3, value_type w) -> Vec4d
        __init__(self, Vec4f vec) -> Vec4d
        """
        this = _osg.new_Vec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, Vec4d v) -> bool"""
        return _osg.Vec4d___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Vec4d v) -> bool"""
        return _osg.Vec4d___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Vec4d v) -> bool"""
        return _osg.Vec4d___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Vec4d_ptr(self, *args)

    def set(self, *args):
        """set(self, value_type x, value_type y, value_type z, value_type w)"""
        return _osg.Vec4d_set(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Vec4d_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Vec4d_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Vec4d_z(self)

    def w(self):
        """w(self) -> value_type"""
        return _osg.Vec4d_w(self)

    def r(self):
        """r(self) -> value_type"""
        return _osg.Vec4d_r(self)

    def g(self):
        """g(self) -> value_type"""
        return _osg.Vec4d_g(self)

    def b(self):
        """b(self) -> value_type"""
        return _osg.Vec4d_b(self)

    def a(self):
        """a(self) -> value_type"""
        return _osg.Vec4d_a(self)

    def asABGR(self):
        """asABGR(self) -> unsigned int"""
        return _osg.Vec4d_asABGR(self)

    def asRGBA(self):
        """asRGBA(self) -> unsigned int"""
        return _osg.Vec4d_asRGBA(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Vec4d_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Vec4d_isNaN(self)

    def __mul__(self, *args):
        """
        __mul__(self, Vec4d rhs) -> value_type
        __mul__(self, value_type rhs) -> Vec4d
        """
        return _osg.Vec4d___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Vec4d"""
        return _osg.Vec4d___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Vec4d rhs) -> Vec4d"""
        return _osg.Vec4d___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Vec4d rhs) -> Vec4d"""
        return _osg.Vec4d___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Vec4d"""
        return _osg.Vec4d___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Vec4d_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Vec4d_length2(self)

    def normalize(self):
        """normalize(self) -> value_type"""
        return _osg.Vec4d_normalize(self)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Vec4d___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Vec4d___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Vec4d___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Vec4d___len__(self)

    __swig_destroy__ = _osg.delete_Vec4d
    __del__ = lambda self : None;
Vec4d_swigregister = _osg.Vec4d_swigregister
Vec4d_swigregister(Vec4d)

OSG_VEC4 = _osg.OSG_VEC4
OSG_VEC3 = _osg.OSG_VEC3
OSG_VEC2 = _osg.OSG_VEC2
Vec2 = Vec2f
Vec3 = Vec3f
Vec4 = Vec4f

OSG_QUAT = _osg.OSG_QUAT
class Quat(_object):
    """Proxy of C++ osg::Quat class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_v"] = _osg.Quat__v_set
    __swig_getmethods__["_v"] = _osg.Quat__v_get
    if _newclass:_v = _swig_property(_osg.Quat__v_get, _osg.Quat__v_set)
    def __eq__(self, *args):
        """__eq__(self, Quat v) -> bool"""
        return _osg.Quat___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Quat v) -> bool"""
        return _osg.Quat___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Quat v) -> bool"""
        return _osg.Quat___lt__(self, *args)

    def asVec4(self):
        """asVec4(self) -> Vec4d"""
        return _osg.Quat_asVec4(self)

    def asVec3(self):
        """asVec3(self) -> Vec3d"""
        return _osg.Quat_asVec3(self)

    def set(self, *args):
        """
        set(self, value_type x, value_type y, value_type z, value_type w)
        set(self, Vec4f v)
        set(self, Vec4d v)
        set(self, Matrixf matrix)
        set(self, Matrixd matrix)
        """
        return _osg.Quat_set(self, *args)

    def get(self, *args):
        """
        get(self, Matrixf matrix)
        get(self, Matrixd matrix)
        """
        return _osg.Quat_get(self, *args)

    def x(self):
        """x(self) -> value_type"""
        return _osg.Quat_x(self)

    def y(self):
        """y(self) -> value_type"""
        return _osg.Quat_y(self)

    def z(self):
        """z(self) -> value_type"""
        return _osg.Quat_z(self)

    def w(self):
        """w(self) -> value_type"""
        return _osg.Quat_w(self)

    def zeroRotation(self):
        """zeroRotation(self) -> bool"""
        return _osg.Quat_zeroRotation(self)

    def __div__(self, *args):
        """
        __div__(self, value_type rhs) -> Quat
        __div__(self, Quat denom) -> Quat
        """
        return _osg.Quat___div__(self, *args)

    def __add__(self, *args):
        """__add__(self, Quat rhs) -> Quat"""
        return _osg.Quat___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, Quat rhs) -> Quat"""
        return _osg.Quat___sub__(self, *args)

    def __neg__(self):
        """__neg__(self) -> Quat"""
        return _osg.Quat___neg__(self)

    def length(self):
        """length(self) -> value_type"""
        return _osg.Quat_length(self)

    def length2(self):
        """length2(self) -> value_type"""
        return _osg.Quat_length2(self)

    def conj(self):
        """conj(self) -> Quat"""
        return _osg.Quat_conj(self)

    def inverse(self):
        """inverse(self) -> Quat"""
        return _osg.Quat_inverse(self)

    def makeRotate(self, *args):
        """
        makeRotate(self, value_type angle, value_type x, value_type y, value_type z)
        makeRotate(self, value_type angle, Vec3f vec)
        makeRotate(self, value_type angle, Vec3d vec)
        makeRotate(self, value_type angle1, Vec3f axis1, value_type angle2, 
            Vec3f axis2, value_type angle3, Vec3f axis3)
        makeRotate(self, value_type angle1, Vec3d axis1, value_type angle2, 
            Vec3d axis2, value_type angle3, Vec3d axis3)
        makeRotate(self, Vec3f vec1, Vec3f vec2)
        makeRotate(self, Vec3d vec1, Vec3d vec2)
        """
        return _osg.Quat_makeRotate(self, *args)

    def makeRotate_original(self, *args):
        """makeRotate_original(self, Vec3d vec1, Vec3d vec2)"""
        return _osg.Quat_makeRotate_original(self, *args)

    def getRotate(self, *args):
        """
        getRotate(self)
        getRotate(self, Vec3f vec)
        getRotate(self, Vec3d vec)
        """
        return _osg.Quat_getRotate(self, *args)

    def slerp(self, *args):
        """slerp(self, value_type t, Quat _from, Quat to)"""
        return _osg.Quat_slerp(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, value_type rhs) -> Quat
        __mul__(self, Quat rhs) -> Quat
        __mul__(self, Vec3f v) -> Vec3f
        __mul__(self, Vec3d v) -> Vec3d
        """
        return _osg.Quat___mul__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Quat___str__(self)

    def __getitem__(self, *args):
        """__getitem__(self, int i) -> value_type"""
        return _osg.Quat___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, int i, value_type v)"""
        return _osg.Quat___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> int"""
        return _osg.Quat___len__(self)

    def __init__(self, *args): 
        """
        __init__(self) -> Quat
        __init__(self, value_type x, value_type y, value_type z, value_type w) -> Quat
        __init__(self, Vec4f v) -> Quat
        __init__(self, Vec4d v) -> Quat
        __init__(self, value_type angle, Vec3f axis) -> Quat
        __init__(self, value_type angle, Vec3d axis) -> Quat
        __init__(self, value_type angle1, Vec3f axis1, value_type angle2, 
            Vec3f axis2, value_type angle3, Vec3f axis3) -> Quat
        __init__(self, value_type angle1, Vec3d axis1, value_type angle2, 
            Vec3d axis2, value_type angle3, Vec3d axis3) -> Quat
        __init__(self, Quat other) -> Quat
        """
        this = _osg.new_Quat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Quat
    __del__ = lambda self : None;
Quat_swigregister = _osg.Quat_swigregister
Quat_swigregister(Quat)

def componentMultiply(*args):
  """
    componentMultiply(Vec2s lhs, Vec2s rhs) -> Vec2s
    componentMultiply(Vec3s lhs, Vec3s rhs) -> Vec3s
    componentMultiply(Vec4s lhs, Vec4s rhs) -> Vec4s
    componentMultiply(Vec2f lhs, Vec2f rhs) -> Vec2f
    componentMultiply(Vec3f lhs, Vec3f rhs) -> Vec3f
    componentMultiply(Vec4f lhs, Vec4f rhs) -> Vec4f
    componentMultiply(Vec2d lhs, Vec2d rhs) -> Vec2d
    componentMultiply(Vec3d lhs, Vec3d rhs) -> Vec3d
    componentMultiply(Vec4d lhs, Vec4d rhs) -> Vec4d
    """
  return _osg.componentMultiply(*args)

def componentDivide(*args):
  """
    componentDivide(Vec2s lhs, Vec2s rhs) -> Vec2s
    componentDivide(Vec3s lhs, Vec3s rhs) -> Vec3s
    componentDivide(Vec4s lhs, Vec4s rhs) -> Vec4s
    componentDivide(Vec2f lhs, Vec2f rhs) -> Vec2f
    componentDivide(Vec3f lhs, Vec3f rhs) -> Vec3f
    componentDivide(Vec4f lhs, Vec4f rhs) -> Vec4f
    componentDivide(Vec2d lhs, Vec2d rhs) -> Vec2d
    componentDivide(Vec3d lhs, Vec3d rhs) -> Vec3d
    componentDivide(Vec4d lhs, Vec4d rhs) -> Vec4d
    """
  return _osg.componentDivide(*args)

OSG_MATRIXD = _osg.OSG_MATRIXD
class Matrixd(_object):
    """Proxy of C++ osg::Matrixd class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrixd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrixd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Matrixd
        __init__(self, Matrixd mat) -> Matrixd
        __init__(self, Matrixf mat) -> Matrixd
        __init__(self, float ptr) -> Matrixd
        __init__(self, double ptr) -> Matrixd
        __init__(self, Quat quat) -> Matrixd
        __init__(self, value_type a00, value_type a01, value_type a02, value_type a03, 
            value_type a10, value_type a11, 
            value_type a12, value_type a13, value_type a20, 
            value_type a21, value_type a22, value_type a23, 
            value_type a30, value_type a31, value_type a32, 
            value_type a33) -> Matrixd
        """
        this = _osg.new_Matrixd(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Matrixd
    __del__ = lambda self : None;
    def compare(self, *args):
        """compare(self, Matrixd m) -> int"""
        return _osg.Matrixd_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Matrixd m) -> bool"""
        return _osg.Matrixd___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, Matrixd m) -> bool"""
        return _osg.Matrixd___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Matrixd m) -> bool"""
        return _osg.Matrixd___ne__(self, *args)

    def __call__(self, *args):
        """__call__(self, int row, int col) -> value_type"""
        return _osg.Matrixd___call__(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Matrixd_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Matrixd_isNaN(self)

    def set(self, *args):
        """
        set(self, Matrixd rhs)
        set(self, Matrixf rhs)
        set(self, float ptr)
        set(self, double ptr)
        set(self, value_type a00, value_type a01, value_type a02, value_type a03, 
            value_type a10, value_type a11, 
            value_type a12, value_type a13, value_type a20, 
            value_type a21, value_type a22, value_type a23, 
            value_type a30, value_type a31, value_type a32, 
            value_type a33)
        """
        return _osg.Matrixd_set(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Matrixd_ptr(self, *args)

    def isIdentity(self):
        """isIdentity(self) -> bool"""
        return _osg.Matrixd_isIdentity(self)

    def makeIdentity(self):
        """makeIdentity(self)"""
        return _osg.Matrixd_makeIdentity(self)

    def makeScale(self, *args):
        """
        makeScale(self, Vec3f arg0)
        makeScale(self, Vec3d arg0)
        makeScale(self, value_type arg0, value_type arg1, value_type arg2)
        """
        return _osg.Matrixd_makeScale(self, *args)

    def makeTranslate(self, *args):
        """
        makeTranslate(self, Vec3f arg0)
        makeTranslate(self, Vec3d arg0)
        makeTranslate(self, value_type arg0, value_type arg1, value_type arg2)
        """
        return _osg.Matrixd_makeTranslate(self, *args)

    def makeRotate(self, *args):
        """
        makeRotate(self, Vec3f _from, Vec3f to)
        makeRotate(self, Vec3d _from, Vec3d to)
        makeRotate(self, value_type angle, Vec3f axis)
        makeRotate(self, value_type angle, Vec3d axis)
        makeRotate(self, value_type angle, value_type x, value_type y, value_type z)
        makeRotate(self, Quat arg0)
        makeRotate(self, value_type angle1, Vec3f axis1, value_type angle2, 
            Vec3f axis2, value_type angle3, Vec3f axis3)
        makeRotate(self, value_type angle1, Vec3d axis1, value_type angle2, 
            Vec3d axis2, value_type angle3, Vec3d axis3)
        """
        return _osg.Matrixd_makeRotate(self, *args)

    def decompose(self, *args):
        """
        decompose(self, Vec3f translation, Quat rotation, Vec3f scale, Quat so)
        decompose(self, Vec3d translation, Quat rotation, Vec3d scale, Quat so)
        """
        return _osg.Matrixd_decompose(self, *args)

    def makeOrtho(self, *args):
        """
        makeOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.Matrixd_makeOrtho(self, *args)

    def getOrtho(self, *args):
        """
        getOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.Matrixd_getOrtho(self, *args)

    def makeOrtho2D(self, *args):
        """makeOrtho2D(self, double left, double right, double bottom, double top)"""
        return _osg.Matrixd_makeOrtho2D(self, *args)

    def makeFrustum(self, *args):
        """
        makeFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.Matrixd_makeFrustum(self, *args)

    def getFrustum(self, *args):
        """
        getFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.Matrixd_getFrustum(self, *args)

    def makePerspective(self, *args):
        """makePerspective(self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.Matrixd_makePerspective(self, *args)

    def getPerspective(self, *args):
        """getPerspective(self, double fovy, double aspectRatio, double zNear, double zFar) -> bool"""
        return _osg.Matrixd_getPerspective(self, *args)

    def makeLookAt(self, *args):
        """makeLookAt(self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.Matrixd_makeLookAt(self, *args)

    def getLookAt(self, *args):
        """
        getLookAt(self, Vec3f eye, Vec3f center, Vec3f up, value_type lookDistance = 1.0)
        getLookAt(self, Vec3f eye, Vec3f center, Vec3f up)
        getLookAt(self, Vec3d eye, Vec3d center, Vec3d up, value_type lookDistance = 1.0)
        getLookAt(self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osg.Matrixd_getLookAt(self, *args)

    def invert(self, *args):
        """invert(self, Matrixd rhs) -> bool"""
        return _osg.Matrixd_invert(self, *args)

    def invert_4x3(self, *args):
        """invert_4x3(self, Matrixd rhs) -> bool"""
        return _osg.Matrixd_invert_4x3(self, *args)

    def invert_4x4(self, *args):
        """invert_4x4(self, Matrixd rhs) -> bool"""
        return _osg.Matrixd_invert_4x4(self, *args)

    def orthoNormalize(self, *args):
        """orthoNormalize(self, Matrixd rhs)"""
        return _osg.Matrixd_orthoNormalize(self, *args)

    def identity():
        """identity() -> Matrixd"""
        return _osg.Matrixd_identity()

    if _newclass:identity = staticmethod(identity)
    __swig_getmethods__["identity"] = lambda x: identity
    def scale(*args):
        """
        scale(Vec3f sv) -> Matrixd
        scale(Vec3d sv) -> Matrixd
        scale(value_type sx, value_type sy, value_type sz) -> Matrixd
        """
        return _osg.Matrixd_scale(*args)

    if _newclass:scale = staticmethod(scale)
    __swig_getmethods__["scale"] = lambda x: scale
    def translate(*args):
        """
        translate(Vec3f dv) -> Matrixd
        translate(Vec3d dv) -> Matrixd
        translate(value_type x, value_type y, value_type z) -> Matrixd
        """
        return _osg.Matrixd_translate(*args)

    if _newclass:translate = staticmethod(translate)
    __swig_getmethods__["translate"] = lambda x: translate
    def rotate(*args):
        """
        rotate(Vec3f _from, Vec3f to) -> Matrixd
        rotate(Vec3d _from, Vec3d to) -> Matrixd
        rotate(value_type angle, value_type x, value_type y, value_type z) -> Matrixd
        rotate(value_type angle, Vec3f axis) -> Matrixd
        rotate(value_type angle, Vec3d axis) -> Matrixd
        rotate(value_type angle1, Vec3f axis1, value_type angle2, 
            Vec3f axis2, value_type angle3, Vec3f axis3) -> Matrixd
        rotate(value_type angle1, Vec3d axis1, value_type angle2, 
            Vec3d axis2, value_type angle3, Vec3d axis3) -> Matrixd
        rotate(Quat quat) -> Matrixd
        """
        return _osg.Matrixd_rotate(*args)

    if _newclass:rotate = staticmethod(rotate)
    __swig_getmethods__["rotate"] = lambda x: rotate
    def inverse(*args):
        """inverse(Matrixd matrix) -> Matrixd"""
        return _osg.Matrixd_inverse(*args)

    if _newclass:inverse = staticmethod(inverse)
    __swig_getmethods__["inverse"] = lambda x: inverse
    def orthoNormal(*args):
        """orthoNormal(Matrixd matrix) -> Matrixd"""
        return _osg.Matrixd_orthoNormal(*args)

    if _newclass:orthoNormal = staticmethod(orthoNormal)
    __swig_getmethods__["orthoNormal"] = lambda x: orthoNormal
    def ortho(*args):
        """
        ortho(double left, double right, double bottom, double top, 
            double zNear, double zFar) -> Matrixd
        """
        return _osg.Matrixd_ortho(*args)

    if _newclass:ortho = staticmethod(ortho)
    __swig_getmethods__["ortho"] = lambda x: ortho
    def ortho2D(*args):
        """ortho2D(double left, double right, double bottom, double top) -> Matrixd"""
        return _osg.Matrixd_ortho2D(*args)

    if _newclass:ortho2D = staticmethod(ortho2D)
    __swig_getmethods__["ortho2D"] = lambda x: ortho2D
    def frustum(*args):
        """
        frustum(double left, double right, double bottom, double top, 
            double zNear, double zFar) -> Matrixd
        """
        return _osg.Matrixd_frustum(*args)

    if _newclass:frustum = staticmethod(frustum)
    __swig_getmethods__["frustum"] = lambda x: frustum
    def perspective(*args):
        """perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixd"""
        return _osg.Matrixd_perspective(*args)

    if _newclass:perspective = staticmethod(perspective)
    __swig_getmethods__["perspective"] = lambda x: perspective
    def lookAt(*args):
        """
        lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixd
        lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixd
        """
        return _osg.Matrixd_lookAt(*args)

    if _newclass:lookAt = staticmethod(lookAt)
    __swig_getmethods__["lookAt"] = lambda x: lookAt
    def setRotate(self, *args):
        """setRotate(self, Quat q)"""
        return _osg.Matrixd_setRotate(self, *args)

    def getRotate(self):
        """getRotate(self) -> Quat"""
        return _osg.Matrixd_getRotate(self)

    def setTrans(self, *args):
        """
        setTrans(self, value_type tx, value_type ty, value_type tz)
        setTrans(self, Vec3f v)
        setTrans(self, Vec3d v)
        """
        return _osg.Matrixd_setTrans(self, *args)

    def getTrans(self):
        """getTrans(self) -> Vec3d"""
        return _osg.Matrixd_getTrans(self)

    def getScale(self):
        """getScale(self) -> Vec3d"""
        return _osg.Matrixd_getScale(self)

    def transform3x3(*args):
        """
        transform3x3(Vec3f v, Matrixd m) -> Vec3f
        transform3x3(Vec3d v, Matrixd m) -> Vec3d
        transform3x3(Matrixd m, Vec3f v) -> Vec3f
        transform3x3(Matrixd m, Vec3d v) -> Vec3d
        """
        return _osg.Matrixd_transform3x3(*args)

    if _newclass:transform3x3 = staticmethod(transform3x3)
    __swig_getmethods__["transform3x3"] = lambda x: transform3x3
    def mult(self, *args):
        """mult(self, Matrixd arg0, Matrixd arg1)"""
        return _osg.Matrixd_mult(self, *args)

    def preMult(self, *args):
        """
        preMult(self, Vec3f v) -> Vec3f
        preMult(self, Vec3d v) -> Vec3d
        preMult(self, Vec4f v) -> Vec4f
        preMult(self, Vec4d v) -> Vec4d
        preMult(self, Matrixd arg0)
        """
        return _osg.Matrixd_preMult(self, *args)

    def postMult(self, *args):
        """
        postMult(self, Vec3f v) -> Vec3f
        postMult(self, Vec3d v) -> Vec3d
        postMult(self, Vec4f v) -> Vec4f
        postMult(self, Vec4d v) -> Vec4d
        postMult(self, Matrixd arg0)
        """
        return _osg.Matrixd_postMult(self, *args)

    def preMultTranslate(self, *args):
        """
        preMultTranslate(self, Vec3d v)
        preMultTranslate(self, Vec3f v)
        """
        return _osg.Matrixd_preMultTranslate(self, *args)

    def postMultTranslate(self, *args):
        """
        postMultTranslate(self, Vec3d v)
        postMultTranslate(self, Vec3f v)
        """
        return _osg.Matrixd_postMultTranslate(self, *args)

    def preMultScale(self, *args):
        """
        preMultScale(self, Vec3d v)
        preMultScale(self, Vec3f v)
        """
        return _osg.Matrixd_preMultScale(self, *args)

    def postMultScale(self, *args):
        """
        postMultScale(self, Vec3d v)
        postMultScale(self, Vec3f v)
        """
        return _osg.Matrixd_postMultScale(self, *args)

    def preMultRotate(self, *args):
        """preMultRotate(self, Quat q)"""
        return _osg.Matrixd_preMultRotate(self, *args)

    def postMultRotate(self, *args):
        """postMultRotate(self, Quat q)"""
        return _osg.Matrixd_postMultRotate(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, Vec3f v) -> Vec3f
        __mul__(self, Vec3d v) -> Vec3d
        __mul__(self, Vec4f v) -> Vec4f
        __mul__(self, Vec4d v) -> Vec4d
        __mul__(self, Matrixd m) -> Matrixd
        """
        return _osg.Matrixd___mul__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Matrixd___str__(self)

Matrixd_swigregister = _osg.Matrixd_swigregister
Matrixd_swigregister(Matrixd)

def Matrixd_identity():
  """Matrixd_identity() -> Matrixd"""
  return _osg.Matrixd_identity()

def Matrixd_scale(*args):
  """
    scale(Vec3f sv) -> Matrixd
    scale(Vec3d sv) -> Matrixd
    Matrixd_scale(value_type sx, value_type sy, value_type sz) -> Matrixd
    """
  return _osg.Matrixd_scale(*args)

def Matrixd_translate(*args):
  """
    translate(Vec3f dv) -> Matrixd
    translate(Vec3d dv) -> Matrixd
    Matrixd_translate(value_type x, value_type y, value_type z) -> Matrixd
    """
  return _osg.Matrixd_translate(*args)

def Matrixd_rotate(*args):
  """
    rotate(Vec3f _from, Vec3f to) -> Matrixd
    rotate(Vec3d _from, Vec3d to) -> Matrixd
    rotate(value_type angle, value_type x, value_type y, value_type z) -> Matrixd
    rotate(value_type angle, Vec3f axis) -> Matrixd
    rotate(value_type angle, Vec3d axis) -> Matrixd
    rotate(value_type angle1, Vec3f axis1, value_type angle2, 
        Vec3f axis2, value_type angle3, Vec3f axis3) -> Matrixd
    rotate(value_type angle1, Vec3d axis1, value_type angle2, 
        Vec3d axis2, value_type angle3, Vec3d axis3) -> Matrixd
    Matrixd_rotate(Quat quat) -> Matrixd
    """
  return _osg.Matrixd_rotate(*args)

def Matrixd_inverse(*args):
  """Matrixd_inverse(Matrixd matrix) -> Matrixd"""
  return _osg.Matrixd_inverse(*args)

def Matrixd_orthoNormal(*args):
  """Matrixd_orthoNormal(Matrixd matrix) -> Matrixd"""
  return _osg.Matrixd_orthoNormal(*args)

def Matrixd_ortho(*args):
  """
    Matrixd_ortho(double left, double right, double bottom, double top, 
        double zNear, double zFar) -> Matrixd
    """
  return _osg.Matrixd_ortho(*args)

def Matrixd_ortho2D(*args):
  """Matrixd_ortho2D(double left, double right, double bottom, double top) -> Matrixd"""
  return _osg.Matrixd_ortho2D(*args)

def Matrixd_frustum(*args):
  """
    Matrixd_frustum(double left, double right, double bottom, double top, 
        double zNear, double zFar) -> Matrixd
    """
  return _osg.Matrixd_frustum(*args)

def Matrixd_perspective(*args):
  """Matrixd_perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixd"""
  return _osg.Matrixd_perspective(*args)

def Matrixd_lookAt(*args):
  """
    lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixd
    Matrixd_lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixd
    """
  return _osg.Matrixd_lookAt(*args)

def Matrixd_transform3x3(*args):
  """
    transform3x3(Vec3f v, Matrixd m) -> Vec3f
    transform3x3(Vec3d v, Matrixd m) -> Vec3d
    transform3x3(Matrixd m, Vec3f v) -> Vec3f
    Matrixd_transform3x3(Matrixd m, Vec3d v) -> Vec3d
    """
  return _osg.Matrixd_transform3x3(*args)

class RefMatrixd(Object,Matrixd):
    """Proxy of C++ osg::RefMatrixd class"""
    __swig_setmethods__ = {}
    for _s in [Object,Matrixd]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefMatrixd, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,Matrixd]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefMatrixd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RefMatrixd
        __init__(self, Matrixd other) -> RefMatrixd
        __init__(self, Matrixf other) -> RefMatrixd
        __init__(self, RefMatrixd other) -> RefMatrixd
        __init__(self, value_type _def) -> RefMatrixd
        __init__(self, value_type a00, value_type a01, value_type a02, value_type a03, 
            value_type a10, value_type a11, 
            value_type a12, value_type a13, value_type a20, 
            value_type a21, value_type a22, value_type a23, 
            value_type a30, value_type a31, value_type a32, 
            value_type a33) -> RefMatrixd
        """
        this = _osg.new_RefMatrixd(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.RefMatrixd_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osg.RefMatrixd_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.RefMatrixd_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.RefMatrixd_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.RefMatrixd_className(self)

RefMatrixd_swigregister = _osg.RefMatrixd_swigregister
RefMatrixd_swigregister(RefMatrixd)

OSG_MATRIXF = _osg.OSG_MATRIXF
class Matrixf(_object):
    """Proxy of C++ osg::Matrixf class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrixf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrixf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Matrixf
        __init__(self, Matrixf mat) -> Matrixf
        __init__(self, Matrixd mat) -> Matrixf
        __init__(self, float ptr) -> Matrixf
        __init__(self, double ptr) -> Matrixf
        __init__(self, Quat quat) -> Matrixf
        __init__(self, value_type a00, value_type a01, value_type a02, value_type a03, 
            value_type a10, value_type a11, 
            value_type a12, value_type a13, value_type a20, 
            value_type a21, value_type a22, value_type a23, 
            value_type a30, value_type a31, value_type a32, 
            value_type a33) -> Matrixf
        """
        this = _osg.new_Matrixf(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Matrixf
    __del__ = lambda self : None;
    def compare(self, *args):
        """compare(self, Matrixf m) -> int"""
        return _osg.Matrixf_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Matrixf m) -> bool"""
        return _osg.Matrixf___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, Matrixf m) -> bool"""
        return _osg.Matrixf___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Matrixf m) -> bool"""
        return _osg.Matrixf___ne__(self, *args)

    def __call__(self, *args):
        """__call__(self, int row, int col) -> value_type"""
        return _osg.Matrixf___call__(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Matrixf_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Matrixf_isNaN(self)

    def set(self, *args):
        """
        set(self, Matrixf rhs)
        set(self, Matrixd rhs)
        set(self, float ptr)
        set(self, double ptr)
        set(self, value_type a00, value_type a01, value_type a02, value_type a03, 
            value_type a10, value_type a11, 
            value_type a12, value_type a13, value_type a20, 
            value_type a21, value_type a22, value_type a23, 
            value_type a30, value_type a31, value_type a32, 
            value_type a33)
        """
        return _osg.Matrixf_set(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Matrixf_ptr(self, *args)

    def isIdentity(self):
        """isIdentity(self) -> bool"""
        return _osg.Matrixf_isIdentity(self)

    def makeIdentity(self):
        """makeIdentity(self)"""
        return _osg.Matrixf_makeIdentity(self)

    def makeScale(self, *args):
        """
        makeScale(self, Vec3f arg0)
        makeScale(self, Vec3d arg0)
        makeScale(self, value_type arg0, value_type arg1, value_type arg2)
        """
        return _osg.Matrixf_makeScale(self, *args)

    def makeTranslate(self, *args):
        """
        makeTranslate(self, Vec3f arg0)
        makeTranslate(self, Vec3d arg0)
        makeTranslate(self, value_type arg0, value_type arg1, value_type arg2)
        """
        return _osg.Matrixf_makeTranslate(self, *args)

    def makeRotate(self, *args):
        """
        makeRotate(self, Vec3f _from, Vec3f to)
        makeRotate(self, Vec3d _from, Vec3d to)
        makeRotate(self, value_type angle, Vec3f axis)
        makeRotate(self, value_type angle, Vec3d axis)
        makeRotate(self, value_type angle, value_type x, value_type y, value_type z)
        makeRotate(self, Quat arg0)
        makeRotate(self, value_type angle1, Vec3f axis1, value_type angle2, 
            Vec3f axis2, value_type angle3, Vec3f axis3)
        makeRotate(self, value_type angle1, Vec3d axis1, value_type angle2, 
            Vec3d axis2, value_type angle3, Vec3d axis3)
        """
        return _osg.Matrixf_makeRotate(self, *args)

    def decompose(self, *args):
        """
        decompose(self, Vec3f translation, Quat rotation, Vec3f scale, Quat so)
        decompose(self, Vec3d translation, Quat rotation, Vec3d scale, Quat so)
        """
        return _osg.Matrixf_decompose(self, *args)

    def makeOrtho(self, *args):
        """
        makeOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.Matrixf_makeOrtho(self, *args)

    def getOrtho(self, *args):
        """
        getOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.Matrixf_getOrtho(self, *args)

    def makeOrtho2D(self, *args):
        """makeOrtho2D(self, double left, double right, double bottom, double top)"""
        return _osg.Matrixf_makeOrtho2D(self, *args)

    def makeFrustum(self, *args):
        """
        makeFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.Matrixf_makeFrustum(self, *args)

    def getFrustum(self, *args):
        """
        getFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.Matrixf_getFrustum(self, *args)

    def makePerspective(self, *args):
        """makePerspective(self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.Matrixf_makePerspective(self, *args)

    def getPerspective(self, *args):
        """getPerspective(self, double fovy, double aspectRatio, double zNear, double zFar) -> bool"""
        return _osg.Matrixf_getPerspective(self, *args)

    def makeLookAt(self, *args):
        """makeLookAt(self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.Matrixf_makeLookAt(self, *args)

    def getLookAt(self, *args):
        """
        getLookAt(self, Vec3f eye, Vec3f center, Vec3f up, value_type lookDistance = 1.0)
        getLookAt(self, Vec3f eye, Vec3f center, Vec3f up)
        getLookAt(self, Vec3d eye, Vec3d center, Vec3d up, value_type lookDistance = 1.0)
        getLookAt(self, Vec3d eye, Vec3d center, Vec3d up)
        """
        return _osg.Matrixf_getLookAt(self, *args)

    def invert(self, *args):
        """invert(self, Matrixf rhs) -> bool"""
        return _osg.Matrixf_invert(self, *args)

    def invert_4x3(self, *args):
        """invert_4x3(self, Matrixf rhs) -> bool"""
        return _osg.Matrixf_invert_4x3(self, *args)

    def invert_4x4(self, *args):
        """invert_4x4(self, Matrixf rhs) -> bool"""
        return _osg.Matrixf_invert_4x4(self, *args)

    def orthoNormalize(self, *args):
        """orthoNormalize(self, Matrixf rhs)"""
        return _osg.Matrixf_orthoNormalize(self, *args)

    def identity():
        """identity() -> Matrixf"""
        return _osg.Matrixf_identity()

    if _newclass:identity = staticmethod(identity)
    __swig_getmethods__["identity"] = lambda x: identity
    def scale(*args):
        """
        scale(Vec3f sv) -> Matrixf
        scale(Vec3d sv) -> Matrixf
        scale(value_type sx, value_type sy, value_type sz) -> Matrixf
        """
        return _osg.Matrixf_scale(*args)

    if _newclass:scale = staticmethod(scale)
    __swig_getmethods__["scale"] = lambda x: scale
    def translate(*args):
        """
        translate(Vec3f dv) -> Matrixf
        translate(Vec3d dv) -> Matrixf
        translate(value_type x, value_type y, value_type z) -> Matrixf
        """
        return _osg.Matrixf_translate(*args)

    if _newclass:translate = staticmethod(translate)
    __swig_getmethods__["translate"] = lambda x: translate
    def rotate(*args):
        """
        rotate(Vec3f _from, Vec3f to) -> Matrixf
        rotate(Vec3d _from, Vec3d to) -> Matrixf
        rotate(value_type angle, value_type x, value_type y, value_type z) -> Matrixf
        rotate(value_type angle, Vec3f axis) -> Matrixf
        rotate(value_type angle, Vec3d axis) -> Matrixf
        rotate(value_type angle1, Vec3f axis1, value_type angle2, 
            Vec3f axis2, value_type angle3, Vec3f axis3) -> Matrixf
        rotate(value_type angle1, Vec3d axis1, value_type angle2, 
            Vec3d axis2, value_type angle3, Vec3d axis3) -> Matrixf
        rotate(Quat quat) -> Matrixf
        """
        return _osg.Matrixf_rotate(*args)

    if _newclass:rotate = staticmethod(rotate)
    __swig_getmethods__["rotate"] = lambda x: rotate
    def inverse(*args):
        """inverse(Matrixf matrix) -> Matrixf"""
        return _osg.Matrixf_inverse(*args)

    if _newclass:inverse = staticmethod(inverse)
    __swig_getmethods__["inverse"] = lambda x: inverse
    def orthoNormal(*args):
        """orthoNormal(Matrixf matrix) -> Matrixf"""
        return _osg.Matrixf_orthoNormal(*args)

    if _newclass:orthoNormal = staticmethod(orthoNormal)
    __swig_getmethods__["orthoNormal"] = lambda x: orthoNormal
    def ortho(*args):
        """
        ortho(double left, double right, double bottom, double top, 
            double zNear, double zFar) -> Matrixf
        """
        return _osg.Matrixf_ortho(*args)

    if _newclass:ortho = staticmethod(ortho)
    __swig_getmethods__["ortho"] = lambda x: ortho
    def ortho2D(*args):
        """ortho2D(double left, double right, double bottom, double top) -> Matrixf"""
        return _osg.Matrixf_ortho2D(*args)

    if _newclass:ortho2D = staticmethod(ortho2D)
    __swig_getmethods__["ortho2D"] = lambda x: ortho2D
    def frustum(*args):
        """
        frustum(double left, double right, double bottom, double top, 
            double zNear, double zFar) -> Matrixf
        """
        return _osg.Matrixf_frustum(*args)

    if _newclass:frustum = staticmethod(frustum)
    __swig_getmethods__["frustum"] = lambda x: frustum
    def perspective(*args):
        """perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixf"""
        return _osg.Matrixf_perspective(*args)

    if _newclass:perspective = staticmethod(perspective)
    __swig_getmethods__["perspective"] = lambda x: perspective
    def lookAt(*args):
        """
        lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixf
        lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixf
        """
        return _osg.Matrixf_lookAt(*args)

    if _newclass:lookAt = staticmethod(lookAt)
    __swig_getmethods__["lookAt"] = lambda x: lookAt
    def setRotate(self, *args):
        """setRotate(self, Quat q)"""
        return _osg.Matrixf_setRotate(self, *args)

    def getRotate(self):
        """getRotate(self) -> Quat"""
        return _osg.Matrixf_getRotate(self)

    def setTrans(self, *args):
        """
        setTrans(self, value_type tx, value_type ty, value_type tz)
        setTrans(self, Vec3f v)
        setTrans(self, Vec3d v)
        """
        return _osg.Matrixf_setTrans(self, *args)

    def getTrans(self):
        """getTrans(self) -> Vec3d"""
        return _osg.Matrixf_getTrans(self)

    def getScale(self):
        """getScale(self) -> Vec3d"""
        return _osg.Matrixf_getScale(self)

    def transform3x3(*args):
        """
        transform3x3(Vec3f v, Matrixf m) -> Vec3f
        transform3x3(Vec3d v, Matrixf m) -> Vec3d
        transform3x3(Matrixf m, Vec3f v) -> Vec3f
        transform3x3(Matrixf m, Vec3d v) -> Vec3d
        """
        return _osg.Matrixf_transform3x3(*args)

    if _newclass:transform3x3 = staticmethod(transform3x3)
    __swig_getmethods__["transform3x3"] = lambda x: transform3x3
    def mult(self, *args):
        """mult(self, Matrixf arg0, Matrixf arg1)"""
        return _osg.Matrixf_mult(self, *args)

    def preMult(self, *args):
        """
        preMult(self, Vec3f v) -> Vec3f
        preMult(self, Vec3d v) -> Vec3d
        preMult(self, Vec4f v) -> Vec4f
        preMult(self, Vec4d v) -> Vec4d
        preMult(self, Matrixf arg0)
        """
        return _osg.Matrixf_preMult(self, *args)

    def postMult(self, *args):
        """
        postMult(self, Vec3f v) -> Vec3f
        postMult(self, Vec3d v) -> Vec3d
        postMult(self, Vec4f v) -> Vec4f
        postMult(self, Vec4d v) -> Vec4d
        postMult(self, Matrixf arg0)
        """
        return _osg.Matrixf_postMult(self, *args)

    def preMultTranslate(self, *args):
        """
        preMultTranslate(self, Vec3d v)
        preMultTranslate(self, Vec3f v)
        """
        return _osg.Matrixf_preMultTranslate(self, *args)

    def postMultTranslate(self, *args):
        """
        postMultTranslate(self, Vec3d v)
        postMultTranslate(self, Vec3f v)
        """
        return _osg.Matrixf_postMultTranslate(self, *args)

    def preMultScale(self, *args):
        """
        preMultScale(self, Vec3d v)
        preMultScale(self, Vec3f v)
        """
        return _osg.Matrixf_preMultScale(self, *args)

    def postMultScale(self, *args):
        """
        postMultScale(self, Vec3d v)
        postMultScale(self, Vec3f v)
        """
        return _osg.Matrixf_postMultScale(self, *args)

    def preMultRotate(self, *args):
        """preMultRotate(self, Quat q)"""
        return _osg.Matrixf_preMultRotate(self, *args)

    def postMultRotate(self, *args):
        """postMultRotate(self, Quat q)"""
        return _osg.Matrixf_postMultRotate(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, Vec3f v) -> Vec3f
        __mul__(self, Vec3d v) -> Vec3d
        __mul__(self, Vec4f v) -> Vec4f
        __mul__(self, Vec4d v) -> Vec4d
        __mul__(self, Matrixf m) -> Matrixf
        __mul__(self, value_type rhs) -> Matrixf
        """
        return _osg.Matrixf___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, value_type rhs) -> Matrixf"""
        return _osg.Matrixf___div__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, value_type rhs) -> Matrixf"""
        return _osg.Matrixf___idiv__(self, *args)

    def __add__(self, *args):
        """__add__(self, Matrixf rhs) -> Matrixf"""
        return _osg.Matrixf___add__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, Matrixf rhs) -> Matrixf"""
        return _osg.Matrixf___iadd__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _osg.Matrixf___str__(self)

Matrixf_swigregister = _osg.Matrixf_swigregister
Matrixf_swigregister(Matrixf)

def Matrixf_identity():
  """Matrixf_identity() -> Matrixf"""
  return _osg.Matrixf_identity()

def Matrixf_scale(*args):
  """
    scale(Vec3f sv) -> Matrixf
    scale(Vec3d sv) -> Matrixf
    Matrixf_scale(value_type sx, value_type sy, value_type sz) -> Matrixf
    """
  return _osg.Matrixf_scale(*args)

def Matrixf_translate(*args):
  """
    translate(Vec3f dv) -> Matrixf
    translate(Vec3d dv) -> Matrixf
    Matrixf_translate(value_type x, value_type y, value_type z) -> Matrixf
    """
  return _osg.Matrixf_translate(*args)

def Matrixf_rotate(*args):
  """
    rotate(Vec3f _from, Vec3f to) -> Matrixf
    rotate(Vec3d _from, Vec3d to) -> Matrixf
    rotate(value_type angle, value_type x, value_type y, value_type z) -> Matrixf
    rotate(value_type angle, Vec3f axis) -> Matrixf
    rotate(value_type angle, Vec3d axis) -> Matrixf
    rotate(value_type angle1, Vec3f axis1, value_type angle2, 
        Vec3f axis2, value_type angle3, Vec3f axis3) -> Matrixf
    rotate(value_type angle1, Vec3d axis1, value_type angle2, 
        Vec3d axis2, value_type angle3, Vec3d axis3) -> Matrixf
    Matrixf_rotate(Quat quat) -> Matrixf
    """
  return _osg.Matrixf_rotate(*args)

def Matrixf_inverse(*args):
  """Matrixf_inverse(Matrixf matrix) -> Matrixf"""
  return _osg.Matrixf_inverse(*args)

def Matrixf_orthoNormal(*args):
  """Matrixf_orthoNormal(Matrixf matrix) -> Matrixf"""
  return _osg.Matrixf_orthoNormal(*args)

def Matrixf_ortho(*args):
  """
    Matrixf_ortho(double left, double right, double bottom, double top, 
        double zNear, double zFar) -> Matrixf
    """
  return _osg.Matrixf_ortho(*args)

def Matrixf_ortho2D(*args):
  """Matrixf_ortho2D(double left, double right, double bottom, double top) -> Matrixf"""
  return _osg.Matrixf_ortho2D(*args)

def Matrixf_frustum(*args):
  """
    Matrixf_frustum(double left, double right, double bottom, double top, 
        double zNear, double zFar) -> Matrixf
    """
  return _osg.Matrixf_frustum(*args)

def Matrixf_perspective(*args):
  """Matrixf_perspective(double fovy, double aspectRatio, double zNear, double zFar) -> Matrixf"""
  return _osg.Matrixf_perspective(*args)

def Matrixf_lookAt(*args):
  """
    lookAt(Vec3f eye, Vec3f center, Vec3f up) -> Matrixf
    Matrixf_lookAt(Vec3d eye, Vec3d center, Vec3d up) -> Matrixf
    """
  return _osg.Matrixf_lookAt(*args)

def Matrixf_transform3x3(*args):
  """
    transform3x3(Vec3f v, Matrixf m) -> Vec3f
    transform3x3(Vec3d v, Matrixf m) -> Vec3d
    transform3x3(Matrixf m, Vec3f v) -> Vec3f
    Matrixf_transform3x3(Matrixf m, Vec3d v) -> Vec3d
    """
  return _osg.Matrixf_transform3x3(*args)

class RefMatrixf(Object,Matrixf):
    """Proxy of C++ osg::RefMatrixf class"""
    __swig_setmethods__ = {}
    for _s in [Object,Matrixf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefMatrixf, name, value)
    __swig_getmethods__ = {}
    for _s in [Object,Matrixf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefMatrixf, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RefMatrixf
        __init__(self, Matrixf other) -> RefMatrixf
        __init__(self, Matrixd other) -> RefMatrixf
        __init__(self, RefMatrixf other) -> RefMatrixf
        __init__(self, value_type _def) -> RefMatrixf
        __init__(self, value_type a00, value_type a01, value_type a02, value_type a03, 
            value_type a10, value_type a11, 
            value_type a12, value_type a13, value_type a20, 
            value_type a21, value_type a22, value_type a23, 
            value_type a30, value_type a31, value_type a32, 
            value_type a33) -> RefMatrixf
        """
        this = _osg.new_RefMatrixf(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.RefMatrixf_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osg.RefMatrixf_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.RefMatrixf_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.RefMatrixf_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.RefMatrixf_className(self)

RefMatrixf_swigregister = _osg.RefMatrixf_swigregister
RefMatrixf_swigregister(RefMatrixf)

OSG_MATRIX = _osg.OSG_MATRIX
OSG_BOUNDINGSPHERE = _osg.OSG_BOUNDINGSPHERE
OSG_PLANE = _osg.OSG_PLANE
class Plane(_object):
    """Proxy of C++ osg::Plane class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr
    num_components = _osg.Plane_num_components
    def __init__(self, *args): 
        """
        __init__(self) -> Plane
        __init__(self, Plane pl) -> Plane
        __init__(self, value_type a, value_type b, value_type c, value_type d) -> Plane
        __init__(self, Vec4f vec) -> Plane
        __init__(self, Vec4d vec) -> Plane
        __init__(self, Vec3_type norm, value_type d) -> Plane
        __init__(self, Vec3_type v1, Vec3_type v2, Vec3_type v3) -> Plane
        __init__(self, Vec3_type norm, Vec3_type point) -> Plane
        """
        this = _osg.new_Plane(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """
        set(self, Plane pl)
        set(self, value_type a, value_type b, value_type c, value_type d)
        set(self, Vec4f vec)
        set(self, Vec4d vec)
        set(self, Vec3_type norm, double d)
        set(self, Vec3_type v1, Vec3_type v2, Vec3_type v3)
        set(self, Vec3_type norm, Vec3_type point)
        """
        return _osg.Plane_set(self, *args)

    def flip(self):
        """flip(self)"""
        return _osg.Plane_flip(self)

    def makeUnitLength(self):
        """makeUnitLength(self)"""
        return _osg.Plane_makeUnitLength(self)

    def calculateUpperLowerBBCorners(self):
        """calculateUpperLowerBBCorners(self)"""
        return _osg.Plane_calculateUpperLowerBBCorners(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Plane_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osg.Plane_isNaN(self)

    def __eq__(self, *args):
        """__eq__(self, Plane plane) -> bool"""
        return _osg.Plane___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Plane plane) -> bool"""
        return _osg.Plane___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Plane plane) -> bool"""
        return _osg.Plane___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> value_type
        ptr(self) -> value_type
        """
        return _osg.Plane_ptr(self, *args)

    def asVec4(self):
        """asVec4(self) -> Vec4_type"""
        return _osg.Plane_asVec4(self)

    def getNormal(self):
        """getNormal(self) -> Vec3_type"""
        return _osg.Plane_getNormal(self)

    def distance(self, *args):
        """
        distance(self, Vec3f v) -> float
        distance(self, Vec3d v) -> double
        """
        return _osg.Plane_distance(self, *args)

    def dotProductNormal(self, *args):
        """
        dotProductNormal(self, Vec3f v) -> float
        dotProductNormal(self, Vec3d v) -> double
        """
        return _osg.Plane_dotProductNormal(self, *args)

    def intersect(self, *args):
        """
        intersect(self, vectorVec3 vertices) -> int
        intersect(self, vectorVec3d vertices) -> int
        intersect(self, BoundingSphere bs) -> int
        intersect(self, BoundingBox bb) -> int
        """
        return _osg.Plane_intersect(self, *args)

    def transform(self, *args):
        """transform(self, Matrix matrix)"""
        return _osg.Plane_transform(self, *args)

    def transformProvidingInverse(self, *args):
        """transformProvidingInverse(self, Matrix matrix)"""
        return _osg.Plane_transformProvidingInverse(self, *args)

    __swig_destroy__ = _osg.delete_Plane
    __del__ = lambda self : None;
Plane_swigregister = _osg.Plane_swigregister
Plane_swigregister(Plane)

def __mul__(*args):
  """
    __mul__(Vec3f lhs, Vec4f rhs) -> value_type
    __mul__(Vec4f lhs, Vec3f rhs) -> value_type
    __mul__(Vec3d lhs, Vec4d rhs) -> value_type
    __mul__(Vec3f lhs, Vec4d rhs) -> value_type
    __mul__(Vec3d lhs, Vec4f rhs) -> value_type
    __mul__(Vec4d lhs, Vec3d rhs) -> value_type
    __mul__(Vec4d lhs, Vec3f rhs) -> value_type
    __mul__(Vec4f lhs, Vec3d rhs) -> value_type
    __mul__(Vec3f v, Matrixd m) -> Vec3f
    __mul__(Vec3d v, Matrixd m) -> Vec3d
    __mul__(Vec4f v, Matrixd m) -> Vec4f
    __mul__(Vec4d v, Matrixd m) -> Vec4d
    __mul__(Vec3f v, Matrixf m) -> Vec3f
    __mul__(Vec3d v, Matrixf m) -> Vec3d
    __mul__(Vec4f v, Matrixf m) -> Vec4f
    __mul__(Vec4d v, Matrixf m) -> Vec4d
    """
  return _osg.__mul__(*args)

OSG_POLYTOPE = _osg.OSG_POLYTOPE
class Polytope(_object):
    """Proxy of C++ osg::Polytope class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polytope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polytope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Polytope
        __init__(self, Polytope cv) -> Polytope
        __init__(self, PlaneList pl) -> Polytope
        """
        this = _osg.new_Polytope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Polytope
    __del__ = lambda self : None;
    def clear(self):
        """clear(self)"""
        return _osg.Polytope_clear(self)

    def setToUnitFrustum(self, withNear = True, withFar = True):
        """
        setToUnitFrustum(self, bool withNear = True, bool withFar = True)
        setToUnitFrustum(self, bool withNear = True)
        setToUnitFrustum(self)
        """
        return _osg.Polytope_setToUnitFrustum(self, withNear, withFar)

    def setToBoundingBox(self, *args):
        """setToBoundingBox(self, BoundingBox bb)"""
        return _osg.Polytope_setToBoundingBox(self, *args)

    def setAndTransformProvidingInverse(self, *args):
        """setAndTransformProvidingInverse(self, Polytope pt, Matrix matrix)"""
        return _osg.Polytope_setAndTransformProvidingInverse(self, *args)

    def set(self, *args):
        """set(self, PlaneList pl)"""
        return _osg.Polytope_set(self, *args)

    def add(self, *args):
        """add(self, Plane pl)"""
        return _osg.Polytope_add(self, *args)

    def flip(self):
        """flip(self)"""
        return _osg.Polytope_flip(self)

    def getPlaneList(self, *args):
        """
        getPlaneList(self) -> PlaneList
        getPlaneList(self) -> PlaneList
        """
        return _osg.Polytope_getPlaneList(self, *args)

    def setReferenceVertexList(self, *args):
        """setReferenceVertexList(self, VertexList vertices)"""
        return _osg.Polytope_setReferenceVertexList(self, *args)

    def getReferenceVertexList(self, *args):
        """
        getReferenceVertexList(self) -> VertexList
        getReferenceVertexList(self) -> VertexList
        """
        return _osg.Polytope_getReferenceVertexList(self, *args)

    def setupMask(self):
        """setupMask(self)"""
        return _osg.Polytope_setupMask(self)

    def getCurrentMask(self, *args):
        """
        getCurrentMask(self) -> ClippingMask
        getCurrentMask(self) -> ClippingMask
        """
        return _osg.Polytope_getCurrentMask(self, *args)

    def setResultMask(self, *args):
        """setResultMask(self, ClippingMask mask)"""
        return _osg.Polytope_setResultMask(self, *args)

    def getResultMask(self):
        """getResultMask(self) -> ClippingMask"""
        return _osg.Polytope_getResultMask(self)

    def getMaskStack(self, *args):
        """
        getMaskStack(self) -> MaskStack
        getMaskStack(self) -> MaskStack
        """
        return _osg.Polytope_getMaskStack(self, *args)

    def pushCurrentMask(self):
        """pushCurrentMask(self)"""
        return _osg.Polytope_pushCurrentMask(self)

    def popCurrentMask(self):
        """popCurrentMask(self)"""
        return _osg.Polytope_popCurrentMask(self)

    def contains(self, *args):
        """
        contains(self, Vec3 v) -> bool
        contains(self, std::vector<(osg::Vec3,std::allocator<(osg::Vec3)>)> vertices) -> bool
        contains(self, BoundingSphere bs) -> bool
        contains(self, BoundingBox bb) -> bool
        """
        return _osg.Polytope_contains(self, *args)

    def containsAllOf(self, *args):
        """
        containsAllOf(self, std::vector<(osg::Vec3,std::allocator<(osg::Vec3)>)> vertices) -> bool
        containsAllOf(self, BoundingSphere bs) -> bool
        containsAllOf(self, BoundingBox bb) -> bool
        """
        return _osg.Polytope_containsAllOf(self, *args)

    def transform(self, *args):
        """transform(self, Matrix matrix)"""
        return _osg.Polytope_transform(self, *args)

    def transformProvidingInverse(self, *args):
        """transformProvidingInverse(self, Matrix matrix)"""
        return _osg.Polytope_transformProvidingInverse(self, *args)

Polytope_swigregister = _osg.Polytope_swigregister
Polytope_swigregister(Polytope)

class vectorStateSet(_object):
    """Proxy of C++ std::vector<(p.osg::StateSet)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorStateSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorStateSet, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorStateSet_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorStateSet___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorStateSet___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorStateSet___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorStateSet_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorStateSet"""
        return _osg.vectorStateSet___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorStateSet v)"""
        return _osg.vectorStateSet___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorStateSet___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorStateSet___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorStateSet
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorStateSet___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorStateSet v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorStateSet___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorStateSet_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorStateSet_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorStateSet_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorStateSet_clear(self)

    def swap(self, *args):
        """swap(self, vectorStateSet v)"""
        return _osg.vectorStateSet_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorStateSet_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorStateSet_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorStateSet_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorStateSet_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorStateSet_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorStateSet_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorStateSet_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorStateSet
        __init__(self, vectorStateSet arg0) -> vectorStateSet
        __init__(self, size_type size) -> vectorStateSet
        __init__(self, size_type size, value_type value) -> vectorStateSet
        """
        this = _osg.new_vectorStateSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorStateSet_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorStateSet_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorStateSet_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorStateSet_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorStateSet_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorStateSet_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorStateSet_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorStateSet_capacity(self)

    __swig_destroy__ = _osg.delete_vectorStateSet
    __del__ = lambda self : None;
vectorStateSet_swigregister = _osg.vectorStateSet_swigregister
vectorStateSet_swigregister(vectorStateSet)

class refStateAttribute(_object):
    """Proxy of C++ osg::ref_ptr<(osg::StateAttribute)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, refStateAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, refStateAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> refStateAttribute
        __init__(self, StateAttribute ptr) -> refStateAttribute
        __init__(self, refStateAttribute rp) -> refStateAttribute
        __init__(self, osg::observer_ptr<(osg::StateAttribute)> optr) -> refStateAttribute
        """
        this = _osg.new_refStateAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_refStateAttribute
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> StateAttribute"""
        return _osg.refStateAttribute___ref__(self)

    def __deref__(self):
        """__deref__(self) -> StateAttribute"""
        return _osg.refStateAttribute___deref__(self)

    def get(self):
        """get(self) -> StateAttribute"""
        return _osg.refStateAttribute_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.refStateAttribute_valid(self)

    def release(self):
        """release(self) -> StateAttribute"""
        return _osg.refStateAttribute_release(self)

    def swap(self, *args):
        """swap(self, refStateAttribute rp)"""
        return _osg.refStateAttribute_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.refStateAttribute_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osg.refStateAttribute_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.refStateAttribute_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.refStateAttribute_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.refStateAttribute_className(self)

    def asTexture(self, *args):
        """
        asTexture(self) -> Texture
        asTexture(self) -> Texture
        """
        return _osg.refStateAttribute_asTexture(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.refStateAttribute_getType(self)

    def getMember(self):
        """getMember(self) -> unsigned int"""
        return _osg.refStateAttribute_getMember(self)

    def getTypeMemberPair(self):
        """getTypeMemberPair(self) -> TypeMemberPair"""
        return _osg.refStateAttribute_getTypeMemberPair(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.refStateAttribute_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.refStateAttribute_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(self, StateAttribute rhs) -> bool"""
        return _osg.refStateAttribute___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, StateAttribute rhs) -> bool"""
        return _osg.refStateAttribute___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, StateAttribute rhs) -> bool"""
        return _osg.refStateAttribute___ne__(self, *args)

    def getParents(self):
        """getParents(self) -> ParentList"""
        return _osg.refStateAttribute_getParents(self)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> StateSet
        getParent(self, unsigned int i) -> StateSet
        """
        return _osg.refStateAttribute_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.refStateAttribute_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(self, ShaderComponent sc)"""
        return _osg.refStateAttribute_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(self) -> ShaderComponent
        getShaderComponent(self) -> ShaderComponent
        """
        return _osg.refStateAttribute_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(self, State arg0) -> bool"""
        return _osg.refStateAttribute_checkValidityOfAssociatedModes(self, *args)

    def apply(self, *args):
        """apply(self, State arg0)"""
        return _osg.refStateAttribute_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State arg0)"""
        return _osg.refStateAttribute_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osg.refStateAttribute_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.refStateAttribute_releaseGLObjects(self, arg0)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.refStateAttribute_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.refStateAttribute_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.refStateAttribute_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.refStateAttribute_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.refStateAttribute_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.refStateAttribute_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.refStateAttribute_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.refStateAttribute_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.refStateAttribute_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.refStateAttribute_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.refStateAttribute_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.refStateAttribute_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.refStateAttribute_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.refStateAttribute_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.refStateAttribute_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.refStateAttribute_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.refStateAttribute_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.refStateAttribute_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.refStateAttribute_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.refStateAttribute_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.refStateAttribute_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.refStateAttribute_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.refStateAttribute_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.refStateAttribute_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.refStateAttribute_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.refStateAttribute_getDeleteHandler(self)

refStateAttribute_swigregister = _osg.refStateAttribute_swigregister
refStateAttribute_swigregister(refStateAttribute)

OSG_FRAMESTAMP = _osg.OSG_FRAMESTAMP
class FrameStamp(Referenced):
    """Proxy of C++ osg::FrameStamp class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrameStamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FrameStamp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FrameStamp
        __init__(self, FrameStamp fs) -> FrameStamp
        """
        this = _osg.new_FrameStamp(*args)
        try: self.this.append(this)
        except: self.this = this
    def setFrameNumber(self, *args):
        """setFrameNumber(self, unsigned int fnum)"""
        return _osg.FrameStamp_setFrameNumber(self, *args)

    def getFrameNumber(self):
        """getFrameNumber(self) -> unsigned int"""
        return _osg.FrameStamp_getFrameNumber(self)

    def setReferenceTime(self, *args):
        """setReferenceTime(self, double refTime)"""
        return _osg.FrameStamp_setReferenceTime(self, *args)

    def getReferenceTime(self):
        """getReferenceTime(self) -> double"""
        return _osg.FrameStamp_getReferenceTime(self)

    def setSimulationTime(self, *args):
        """setSimulationTime(self, double refTime)"""
        return _osg.FrameStamp_setSimulationTime(self, *args)

    def getSimulationTime(self):
        """getSimulationTime(self) -> double"""
        return _osg.FrameStamp_getSimulationTime(self)

    def setCalendarTime(self, *args):
        """setCalendarTime(self, tm calendarTime)"""
        return _osg.FrameStamp_setCalendarTime(self, *args)

    def getCalendarTime(self, *args):
        """getCalendarTime(self, tm calendarTime)"""
        return _osg.FrameStamp_getCalendarTime(self, *args)

    __swig_destroy__ = _osg.delete_FrameStamp
    __del__ = lambda self : None;
FrameStamp_swigregister = _osg.FrameStamp_swigregister
FrameStamp_swigregister(FrameStamp)

OSG_STATESET = _osg.OSG_STATESET
GL_RESCALE_NORMAL = _osg.GL_RESCALE_NORMAL
class StateSet(Object):
    """Proxy of C++ osg::StateSet class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StateSet
        __init__(self, StateSet arg0, CopyOp copyop = SHALLOW_COPY) -> StateSet
        __init__(self, StateSet arg0) -> StateSet
        """
        this = _osg.new_StateSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.StateSet_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.StateSet_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.StateSet_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.StateSet_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.StateSet_className(self)

    def compare(self, *args):
        """
        compare(self, StateSet rhs, bool compareAttributeContents = False) -> int
        compare(self, StateSet rhs) -> int
        """
        return _osg.StateSet_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(self, StateSet rhs) -> bool"""
        return _osg.StateSet___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, StateSet rhs) -> bool"""
        return _osg.StateSet___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, StateSet rhs) -> bool"""
        return _osg.StateSet___ne__(self, *args)

    def getParents(self, *args):
        """
        getParents(self) -> ParentList
        getParents(self) -> ParentList
        """
        return _osg.StateSet_getParents(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Object
        getParent(self, unsigned int i) -> Object
        """
        return _osg.StateSet_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.StateSet_getNumParents(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.StateSet_computeDataVariance(self)

    def setGlobalDefaults(self):
        """setGlobalDefaults(self)"""
        return _osg.StateSet_setGlobalDefaults(self)

    def clear(self):
        """clear(self)"""
        return _osg.StateSet_clear(self)

    def merge(self, *args):
        """merge(self, StateSet rhs)"""
        return _osg.StateSet_merge(self, *args)

    def setMode(self, *args):
        """setMode(self, GLMode mode, GLModeValue value)"""
        return _osg.StateSet_setMode(self, *args)

    def removeMode(self, *args):
        """removeMode(self, GLMode mode)"""
        return _osg.StateSet_removeMode(self, *args)

    def getMode(self, *args):
        """getMode(self, GLMode mode) -> GLModeValue"""
        return _osg.StateSet_getMode(self, *args)

    def setModeList(self, *args):
        """setModeList(self, ModeList ml)"""
        return _osg.StateSet_setModeList(self, *args)

    def getModeList(self, *args):
        """
        getModeList(self) -> ModeList
        getModeList(self) -> ModeList
        """
        return _osg.StateSet_getModeList(self, *args)

    def setAttribute(self, *args):
        """
        setAttribute(self, StateAttribute attribute, OverrideValue value = OFF)
        setAttribute(self, StateAttribute attribute)
        """
        return _osg.StateSet_setAttribute(self, *args)

    def setAttributeAndModes(self, *args):
        """
        setAttributeAndModes(self, StateAttribute attribute, GLModeValue value = ON)
        setAttributeAndModes(self, StateAttribute attribute)
        """
        return _osg.StateSet_setAttributeAndModes(self, *args)

    def removeAttribute(self, *args):
        """
        removeAttribute(self, Type type, unsigned int member = 0)
        removeAttribute(self, Type type)
        removeAttribute(self, StateAttribute attribute)
        """
        return _osg.StateSet_removeAttribute(self, *args)

    def getAttribute(self, *args):
        """
        getAttribute(self, Type type, unsigned int member = 0) -> StateAttribute
        getAttribute(self, Type type) -> StateAttribute
        getAttribute(self, Type type, unsigned int member = 0) -> StateAttribute
        getAttribute(self, Type type) -> StateAttribute
        """
        return _osg.StateSet_getAttribute(self, *args)

    def getAttributePair(self, *args):
        """
        getAttributePair(self, Type type, unsigned int member = 0) -> RefAttributePair
        getAttributePair(self, Type type) -> RefAttributePair
        """
        return _osg.StateSet_getAttributePair(self, *args)

    def setAttributeList(self, *args):
        """setAttributeList(self, AttributeList al)"""
        return _osg.StateSet_setAttributeList(self, *args)

    def getAttributeList(self, *args):
        """
        getAttributeList(self) -> AttributeList
        getAttributeList(self) -> AttributeList
        """
        return _osg.StateSet_getAttributeList(self, *args)

    def setTextureMode(self, *args):
        """setTextureMode(self, unsigned int unit, GLMode mode, GLModeValue value)"""
        return _osg.StateSet_setTextureMode(self, *args)

    def removeTextureMode(self, *args):
        """removeTextureMode(self, unsigned int unit, GLMode mode)"""
        return _osg.StateSet_removeTextureMode(self, *args)

    def getTextureMode(self, *args):
        """getTextureMode(self, unsigned int unit, GLMode mode) -> GLModeValue"""
        return _osg.StateSet_getTextureMode(self, *args)

    def setTextureModeList(self, *args):
        """setTextureModeList(self, TextureModeList tml)"""
        return _osg.StateSet_setTextureModeList(self, *args)

    def getTextureModeList(self, *args):
        """
        getTextureModeList(self) -> TextureModeList
        getTextureModeList(self) -> TextureModeList
        """
        return _osg.StateSet_getTextureModeList(self, *args)

    def getNumTextureModeLists(self):
        """getNumTextureModeLists(self) -> unsigned int"""
        return _osg.StateSet_getNumTextureModeLists(self)

    def setTextureAttribute(self, *args):
        """
        setTextureAttribute(self, unsigned int unit, StateAttribute attribute, OverrideValue value = OFF)
        setTextureAttribute(self, unsigned int unit, StateAttribute attribute)
        """
        return _osg.StateSet_setTextureAttribute(self, *args)

    def setTextureAttributeAndModes(self, *args):
        """
        setTextureAttributeAndModes(self, unsigned int unit, StateAttribute attribute, GLModeValue value = ON)
        setTextureAttributeAndModes(self, unsigned int unit, StateAttribute attribute)
        """
        return _osg.StateSet_setTextureAttributeAndModes(self, *args)

    def removeTextureAttribute(self, *args):
        """
        removeTextureAttribute(self, unsigned int unit, Type type)
        removeTextureAttribute(self, unsigned int unit, StateAttribute attribute)
        """
        return _osg.StateSet_removeTextureAttribute(self, *args)

    def getTextureAttribute(self, *args):
        """
        getTextureAttribute(self, unsigned int unit, Type type) -> StateAttribute
        getTextureAttribute(self, unsigned int unit, Type type) -> StateAttribute
        """
        return _osg.StateSet_getTextureAttribute(self, *args)

    def getTextureAttributePair(self, *args):
        """getTextureAttributePair(self, unsigned int unit, Type type) -> RefAttributePair"""
        return _osg.StateSet_getTextureAttributePair(self, *args)

    def setTextureAttributeList(self, *args):
        """setTextureAttributeList(self, TextureAttributeList tal)"""
        return _osg.StateSet_setTextureAttributeList(self, *args)

    def getTextureAttributeList(self, *args):
        """
        getTextureAttributeList(self) -> TextureAttributeList
        getTextureAttributeList(self) -> TextureAttributeList
        """
        return _osg.StateSet_getTextureAttributeList(self, *args)

    def getNumTextureAttributeLists(self):
        """getNumTextureAttributeLists(self) -> unsigned int"""
        return _osg.StateSet_getNumTextureAttributeLists(self)

    def setAssociatedModes(self, *args):
        """setAssociatedModes(self, StateAttribute attribute, GLModeValue value)"""
        return _osg.StateSet_setAssociatedModes(self, *args)

    def removeAssociatedModes(self, *args):
        """removeAssociatedModes(self, StateAttribute attribute)"""
        return _osg.StateSet_removeAssociatedModes(self, *args)

    def setAssociatedTextureModes(self, *args):
        """setAssociatedTextureModes(self, unsigned int unit, StateAttribute attribute, GLModeValue value)"""
        return _osg.StateSet_setAssociatedTextureModes(self, *args)

    def removeAssociatedTextureModes(self, *args):
        """removeAssociatedTextureModes(self, unsigned int unit, StateAttribute attribute)"""
        return _osg.StateSet_removeAssociatedTextureModes(self, *args)

    def addUniform(self, *args):
        """
        addUniform(self, Uniform uniform, OverrideValue value = ON)
        addUniform(self, Uniform uniform)
        """
        return _osg.StateSet_addUniform(self, *args)

    def removeUniform(self, *args):
        """
        removeUniform(self, string name)
        removeUniform(self, Uniform uniform)
        """
        return _osg.StateSet_removeUniform(self, *args)

    def getOrCreateUniform(self, *args):
        """
        getOrCreateUniform(self, string name, Type type, unsigned int numElements = 1) -> Uniform
        getOrCreateUniform(self, string name, Type type) -> Uniform
        """
        return _osg.StateSet_getOrCreateUniform(self, *args)

    def getUniform(self, *args):
        """
        getUniform(self, string name) -> Uniform
        getUniform(self, string name) -> Uniform
        """
        return _osg.StateSet_getUniform(self, *args)

    def getUniformPair(self, *args):
        """getUniformPair(self, string name) -> RefUniformPair"""
        return _osg.StateSet_getUniformPair(self, *args)

    def setUniformList(self, *args):
        """setUniformList(self, UniformList al)"""
        return _osg.StateSet_setUniformList(self, *args)

    def getUniformList(self, *args):
        """
        getUniformList(self) -> UniformList
        getUniformList(self) -> UniformList
        """
        return _osg.StateSet_getUniformList(self, *args)

    DEFAULT_BIN = _osg.StateSet_DEFAULT_BIN
    OPAQUE_BIN = _osg.StateSet_OPAQUE_BIN
    TRANSPARENT_BIN = _osg.StateSet_TRANSPARENT_BIN
    def setRenderingHint(self, *args):
        """setRenderingHint(self, int hint)"""
        return _osg.StateSet_setRenderingHint(self, *args)

    def getRenderingHint(self):
        """getRenderingHint(self) -> int"""
        return _osg.StateSet_getRenderingHint(self)

    INHERIT_RENDERBIN_DETAILS = _osg.StateSet_INHERIT_RENDERBIN_DETAILS
    USE_RENDERBIN_DETAILS = _osg.StateSet_USE_RENDERBIN_DETAILS
    OVERRIDE_RENDERBIN_DETAILS = _osg.StateSet_OVERRIDE_RENDERBIN_DETAILS
    def setRenderBinDetails(self, *args):
        """
        setRenderBinDetails(self, int binNum, string binName, RenderBinMode mode = USE_RENDERBIN_DETAILS)
        setRenderBinDetails(self, int binNum, string binName)
        """
        return _osg.StateSet_setRenderBinDetails(self, *args)

    def setRenderBinToInherit(self):
        """setRenderBinToInherit(self)"""
        return _osg.StateSet_setRenderBinToInherit(self)

    def useRenderBinDetails(self):
        """useRenderBinDetails(self) -> bool"""
        return _osg.StateSet_useRenderBinDetails(self)

    def setRenderBinMode(self, *args):
        """setRenderBinMode(self, RenderBinMode mode)"""
        return _osg.StateSet_setRenderBinMode(self, *args)

    def getRenderBinMode(self):
        """getRenderBinMode(self) -> RenderBinMode"""
        return _osg.StateSet_getRenderBinMode(self)

    def setBinNumber(self, *args):
        """setBinNumber(self, int num)"""
        return _osg.StateSet_setBinNumber(self, *args)

    def getBinNumber(self):
        """getBinNumber(self) -> int"""
        return _osg.StateSet_getBinNumber(self)

    def setBinName(self, *args):
        """setBinName(self, string name)"""
        return _osg.StateSet_setBinName(self, *args)

    def getBinName(self):
        """getBinName(self) -> string"""
        return _osg.StateSet_getBinName(self)

    def setNestRenderBins(self, *args):
        """setNestRenderBins(self, bool val)"""
        return _osg.StateSet_setNestRenderBins(self, *args)

    def getNestRenderBins(self):
        """getNestRenderBins(self) -> bool"""
        return _osg.StateSet_getNestRenderBins(self)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(self) -> bool"""
        return _osg.StateSet_requiresUpdateTraversal(self)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.StateSet_getNumChildrenRequiringUpdateTraversal(self)

    def runUpdateCallbacks(self, *args):
        """runUpdateCallbacks(self, NodeVisitor nv)"""
        return _osg.StateSet_runUpdateCallbacks(self, *args)

    def requiresEventTraversal(self):
        """requiresEventTraversal(self) -> bool"""
        return _osg.StateSet_requiresEventTraversal(self)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.StateSet_getNumChildrenRequiringEventTraversal(self)

    def runEventCallbacks(self, *args):
        """runEventCallbacks(self, NodeVisitor nv)"""
        return _osg.StateSet_runEventCallbacks(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(self, State state) -> bool"""
        return _osg.StateSet_checkValidityOfAssociatedModes(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.StateSet_setThreadSafeRefUnref(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State state)"""
        return _osg.StateSet_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.StateSet_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.StateSet_releaseGLObjects(self, state)

StateSet_swigregister = _osg.StateSet_swigregister
StateSet_swigregister(StateSet)


def isTextureMode(*args):
  """isTextureMode(GLMode mode) -> bool"""
  return _osg.isTextureMode(*args)
OSG_STATEATTRIBUTE = _osg.OSG_STATEATTRIBUTE
GL_COLOR_SUM = _osg.GL_COLOR_SUM
class StateAttribute(Object):
    """Proxy of C++ osg::StateAttribute class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateAttribute, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    OFF = _osg.StateAttribute_OFF
    ON = _osg.StateAttribute_ON
    OVERRIDE = _osg.StateAttribute_OVERRIDE
    PROTECTED = _osg.StateAttribute_PROTECTED
    INHERIT = _osg.StateAttribute_INHERIT
    TEXTURE = _osg.StateAttribute_TEXTURE
    POLYGONMODE = _osg.StateAttribute_POLYGONMODE
    POLYGONOFFSET = _osg.StateAttribute_POLYGONOFFSET
    MATERIAL = _osg.StateAttribute_MATERIAL
    ALPHAFUNC = _osg.StateAttribute_ALPHAFUNC
    ANTIALIAS = _osg.StateAttribute_ANTIALIAS
    COLORTABLE = _osg.StateAttribute_COLORTABLE
    CULLFACE = _osg.StateAttribute_CULLFACE
    FOG = _osg.StateAttribute_FOG
    FRONTFACE = _osg.StateAttribute_FRONTFACE
    LIGHT = _osg.StateAttribute_LIGHT
    POINT = _osg.StateAttribute_POINT
    LINEWIDTH = _osg.StateAttribute_LINEWIDTH
    LINESTIPPLE = _osg.StateAttribute_LINESTIPPLE
    POLYGONSTIPPLE = _osg.StateAttribute_POLYGONSTIPPLE
    SHADEMODEL = _osg.StateAttribute_SHADEMODEL
    TEXENV = _osg.StateAttribute_TEXENV
    TEXENVFILTER = _osg.StateAttribute_TEXENVFILTER
    TEXGEN = _osg.StateAttribute_TEXGEN
    TEXMAT = _osg.StateAttribute_TEXMAT
    LIGHTMODEL = _osg.StateAttribute_LIGHTMODEL
    BLENDFUNC = _osg.StateAttribute_BLENDFUNC
    BLENDEQUATION = _osg.StateAttribute_BLENDEQUATION
    LOGICOP = _osg.StateAttribute_LOGICOP
    STENCIL = _osg.StateAttribute_STENCIL
    COLORMASK = _osg.StateAttribute_COLORMASK
    DEPTH = _osg.StateAttribute_DEPTH
    VIEWPORT = _osg.StateAttribute_VIEWPORT
    SCISSOR = _osg.StateAttribute_SCISSOR
    BLENDCOLOR = _osg.StateAttribute_BLENDCOLOR
    MULTISAMPLE = _osg.StateAttribute_MULTISAMPLE
    CLIPPLANE = _osg.StateAttribute_CLIPPLANE
    COLORMATRIX = _osg.StateAttribute_COLORMATRIX
    VERTEXPROGRAM = _osg.StateAttribute_VERTEXPROGRAM
    FRAGMENTPROGRAM = _osg.StateAttribute_FRAGMENTPROGRAM
    POINTSPRITE = _osg.StateAttribute_POINTSPRITE
    PROGRAM = _osg.StateAttribute_PROGRAM
    CLAMPCOLOR = _osg.StateAttribute_CLAMPCOLOR
    HINT = _osg.StateAttribute_HINT
    VALIDATOR = _osg.StateAttribute_VALIDATOR
    VIEWMATRIXEXTRACTOR = _osg.StateAttribute_VIEWMATRIXEXTRACTOR
    OSGNV_PARAMETER_BLOCK = _osg.StateAttribute_OSGNV_PARAMETER_BLOCK
    OSGNVEXT_TEXTURE_SHADER = _osg.StateAttribute_OSGNVEXT_TEXTURE_SHADER
    OSGNVEXT_VERTEX_PROGRAM = _osg.StateAttribute_OSGNVEXT_VERTEX_PROGRAM
    OSGNVEXT_REGISTER_COMBINERS = _osg.StateAttribute_OSGNVEXT_REGISTER_COMBINERS
    OSGNVCG_PROGRAM = _osg.StateAttribute_OSGNVCG_PROGRAM
    OSGNVSLANG_PROGRAM = _osg.StateAttribute_OSGNVSLANG_PROGRAM
    OSGNVPARSE_PROGRAM_PARSER = _osg.StateAttribute_OSGNVPARSE_PROGRAM_PARSER
    UNIFORMBUFFERBINDING = _osg.StateAttribute_UNIFORMBUFFERBINDING
    TRANSFORMFEEDBACKBUFFERBINDING = _osg.StateAttribute_TRANSFORMFEEDBACKBUFFERBINDING
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.StateAttribute_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osg.StateAttribute_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.StateAttribute_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.StateAttribute_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.StateAttribute_className(self)

    def asTexture(self, *args):
        """
        asTexture(self) -> Texture
        asTexture(self) -> Texture
        """
        return _osg.StateAttribute_asTexture(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.StateAttribute_getType(self)

    def getMember(self):
        """getMember(self) -> unsigned int"""
        return _osg.StateAttribute_getMember(self)

    def getTypeMemberPair(self):
        """getTypeMemberPair(self) -> TypeMemberPair"""
        return _osg.StateAttribute_getTypeMemberPair(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.StateAttribute_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.StateAttribute_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(self, StateAttribute rhs) -> bool"""
        return _osg.StateAttribute___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, StateAttribute rhs) -> bool"""
        return _osg.StateAttribute___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, StateAttribute rhs) -> bool"""
        return _osg.StateAttribute___ne__(self, *args)

    def getParents(self):
        """getParents(self) -> ParentList"""
        return _osg.StateAttribute_getParents(self)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> StateSet
        getParent(self, unsigned int i) -> StateSet
        """
        return _osg.StateAttribute_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.StateAttribute_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(self, ShaderComponent sc)"""
        return _osg.StateAttribute_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(self) -> ShaderComponent
        getShaderComponent(self) -> ShaderComponent
        """
        return _osg.StateAttribute_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(self, State arg0) -> bool"""
        return _osg.StateAttribute_checkValidityOfAssociatedModes(self, *args)

    def apply(self, *args):
        """apply(self, State arg0)"""
        return _osg.StateAttribute_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State arg0)"""
        return _osg.StateAttribute_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osg.StateAttribute_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.StateAttribute_releaseGLObjects(self, arg0)

StateAttribute_swigregister = _osg.StateAttribute_swigregister
StateAttribute_swigregister(StateAttribute)

OSG_POLYGONMODE = _osg.OSG_POLYGONMODE
class PolygonMode(StateAttribute):
    """Proxy of C++ osg::PolygonMode class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonMode, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonMode, name)
    __repr__ = _swig_repr
    POINT = _osg.PolygonMode_POINT
    LINE = _osg.PolygonMode_LINE
    FILL = _osg.PolygonMode_FILL
    FRONT_AND_BACK = _osg.PolygonMode_FRONT_AND_BACK
    FRONT = _osg.PolygonMode_FRONT
    BACK = _osg.PolygonMode_BACK
    def __init__(self, *args): 
        """
        __init__(self) -> PolygonMode
        __init__(self, Face face, Mode mode) -> PolygonMode
        __init__(self, PolygonMode pm, CopyOp copyop = SHALLOW_COPY) -> PolygonMode
        __init__(self, PolygonMode pm) -> PolygonMode
        """
        this = _osg.new_PolygonMode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PolygonMode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PolygonMode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PolygonMode_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PolygonMode_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.PolygonMode_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.PolygonMode_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.PolygonMode_compare(self, *args)

    def setMode(self, *args):
        """setMode(self, Face face, Mode mode)"""
        return _osg.PolygonMode_setMode(self, *args)

    def getMode(self, *args):
        """getMode(self, Face face) -> Mode"""
        return _osg.PolygonMode_getMode(self, *args)

    def getFrontAndBack(self):
        """getFrontAndBack(self) -> bool"""
        return _osg.PolygonMode_getFrontAndBack(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.PolygonMode_apply(self, *args)

PolygonMode_swigregister = _osg.PolygonMode_swigregister
PolygonMode_swigregister(PolygonMode)

OSG_POINT = _osg.OSG_POINT
class Point(StateAttribute):
    """Proxy of C++ osg::Point class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Point
        __init__(self, float size) -> Point
        __init__(self, Point point, CopyOp copyop = SHALLOW_COPY) -> Point
        __init__(self, Point point) -> Point
        """
        this = _osg.new_Point(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Point_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Point_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Point_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Point_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Point_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Point_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Point_compare(self, *args)

    def setSize(self, *args):
        """setSize(self, float size)"""
        return _osg.Point_setSize(self, *args)

    def getSize(self):
        """getSize(self) -> float"""
        return _osg.Point_getSize(self)

    def setFadeThresholdSize(self, *args):
        """setFadeThresholdSize(self, float fadeThresholdSize)"""
        return _osg.Point_setFadeThresholdSize(self, *args)

    def getFadeThresholdSize(self):
        """getFadeThresholdSize(self) -> float"""
        return _osg.Point_getFadeThresholdSize(self)

    def setDistanceAttenuation(self, *args):
        """setDistanceAttenuation(self, Vec3 distanceAttenuation)"""
        return _osg.Point_setDistanceAttenuation(self, *args)

    def getDistanceAttenuation(self):
        """getDistanceAttenuation(self) -> Vec3"""
        return _osg.Point_getDistanceAttenuation(self)

    def setMinSize(self, *args):
        """setMinSize(self, float minSize)"""
        return _osg.Point_setMinSize(self, *args)

    def getMinSize(self):
        """getMinSize(self) -> float"""
        return _osg.Point_getMinSize(self)

    def setMaxSize(self, *args):
        """setMaxSize(self, float maxSize)"""
        return _osg.Point_setMaxSize(self, *args)

    def getMaxSize(self):
        """getMaxSize(self) -> float"""
        return _osg.Point_getMaxSize(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Point_apply(self, *args)

Point_swigregister = _osg.Point_swigregister
Point_swigregister(Point)

OSG_POLYGONOFFSET = _osg.OSG_POLYGONOFFSET
class PolygonOffset(StateAttribute):
    """Proxy of C++ osg::PolygonOffset class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonOffset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PolygonOffset
        __init__(self, float factor, float units) -> PolygonOffset
        __init__(self, PolygonOffset po, CopyOp copyop = SHALLOW_COPY) -> PolygonOffset
        __init__(self, PolygonOffset po) -> PolygonOffset
        """
        this = _osg.new_PolygonOffset(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PolygonOffset_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PolygonOffset_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PolygonOffset_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PolygonOffset_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.PolygonOffset_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.PolygonOffset_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.PolygonOffset_compare(self, *args)

    def setFactor(self, *args):
        """setFactor(self, float factor)"""
        return _osg.PolygonOffset_setFactor(self, *args)

    def getFactor(self):
        """getFactor(self) -> float"""
        return _osg.PolygonOffset_getFactor(self)

    def setUnits(self, *args):
        """setUnits(self, float units)"""
        return _osg.PolygonOffset_setUnits(self, *args)

    def getUnits(self):
        """getUnits(self) -> float"""
        return _osg.PolygonOffset_getUnits(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.PolygonOffset_apply(self, *args)

    def setFactorMultiplier(*args):
        """setFactorMultiplier(float multiplier)"""
        return _osg.PolygonOffset_setFactorMultiplier(*args)

    if _newclass:setFactorMultiplier = staticmethod(setFactorMultiplier)
    __swig_getmethods__["setFactorMultiplier"] = lambda x: setFactorMultiplier
    def getFactorMultiplier():
        """getFactorMultiplier() -> float"""
        return _osg.PolygonOffset_getFactorMultiplier()

    if _newclass:getFactorMultiplier = staticmethod(getFactorMultiplier)
    __swig_getmethods__["getFactorMultiplier"] = lambda x: getFactorMultiplier
    def setUnitsMultiplier(*args):
        """setUnitsMultiplier(float multiplier)"""
        return _osg.PolygonOffset_setUnitsMultiplier(*args)

    if _newclass:setUnitsMultiplier = staticmethod(setUnitsMultiplier)
    __swig_getmethods__["setUnitsMultiplier"] = lambda x: setUnitsMultiplier
    def getUnitsMultiplier():
        """getUnitsMultiplier() -> float"""
        return _osg.PolygonOffset_getUnitsMultiplier()

    if _newclass:getUnitsMultiplier = staticmethod(getUnitsMultiplier)
    __swig_getmethods__["getUnitsMultiplier"] = lambda x: getUnitsMultiplier
    def areFactorAndUnitsMultipliersSet():
        """areFactorAndUnitsMultipliersSet() -> bool"""
        return _osg.PolygonOffset_areFactorAndUnitsMultipliersSet()

    if _newclass:areFactorAndUnitsMultipliersSet = staticmethod(areFactorAndUnitsMultipliersSet)
    __swig_getmethods__["areFactorAndUnitsMultipliersSet"] = lambda x: areFactorAndUnitsMultipliersSet
    def setFactorAndUnitsMultipliersUsingBestGuessForDriver():
        """setFactorAndUnitsMultipliersUsingBestGuessForDriver()"""
        return _osg.PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver()

    if _newclass:setFactorAndUnitsMultipliersUsingBestGuessForDriver = staticmethod(setFactorAndUnitsMultipliersUsingBestGuessForDriver)
    __swig_getmethods__["setFactorAndUnitsMultipliersUsingBestGuessForDriver"] = lambda x: setFactorAndUnitsMultipliersUsingBestGuessForDriver
PolygonOffset_swigregister = _osg.PolygonOffset_swigregister
PolygonOffset_swigregister(PolygonOffset)

def PolygonOffset_setFactorMultiplier(*args):
  """PolygonOffset_setFactorMultiplier(float multiplier)"""
  return _osg.PolygonOffset_setFactorMultiplier(*args)

def PolygonOffset_getFactorMultiplier():
  """PolygonOffset_getFactorMultiplier() -> float"""
  return _osg.PolygonOffset_getFactorMultiplier()

def PolygonOffset_setUnitsMultiplier(*args):
  """PolygonOffset_setUnitsMultiplier(float multiplier)"""
  return _osg.PolygonOffset_setUnitsMultiplier(*args)

def PolygonOffset_getUnitsMultiplier():
  """PolygonOffset_getUnitsMultiplier() -> float"""
  return _osg.PolygonOffset_getUnitsMultiplier()

def PolygonOffset_areFactorAndUnitsMultipliersSet():
  """PolygonOffset_areFactorAndUnitsMultipliersSet() -> bool"""
  return _osg.PolygonOffset_areFactorAndUnitsMultipliersSet()

def PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver():
  """PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver()"""
  return _osg.PolygonOffset_setFactorAndUnitsMultipliersUsingBestGuessForDriver()

OSG_LINEWIDTH = _osg.OSG_LINEWIDTH
class LineWidth(StateAttribute):
    """Proxy of C++ osg::LineWidth class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineWidth, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineWidth, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float width = 1.0) -> LineWidth
        __init__(self) -> LineWidth
        __init__(self, LineWidth lw, CopyOp copyop = SHALLOW_COPY) -> LineWidth
        __init__(self, LineWidth lw) -> LineWidth
        """
        this = _osg.new_LineWidth(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LineWidth_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LineWidth_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LineWidth_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LineWidth_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.LineWidth_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.LineWidth_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.LineWidth_compare(self, *args)

    def setWidth(self, *args):
        """setWidth(self, float width)"""
        return _osg.LineWidth_setWidth(self, *args)

    def getWidth(self):
        """getWidth(self) -> float"""
        return _osg.LineWidth_getWidth(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.LineWidth_apply(self, *args)

LineWidth_swigregister = _osg.LineWidth_swigregister
LineWidth_swigregister(LineWidth)

OSG_LINESTIPPLE = _osg.OSG_LINESTIPPLE
class LineStipple(StateAttribute):
    """Proxy of C++ osg::LineStipple class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineStipple, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineStipple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LineStipple
        __init__(self, GLint factor, GLushort pattern) -> LineStipple
        __init__(self, LineStipple lw, CopyOp copyop = SHALLOW_COPY) -> LineStipple
        __init__(self, LineStipple lw) -> LineStipple
        """
        this = _osg.new_LineStipple(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LineStipple_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LineStipple_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LineStipple_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LineStipple_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.LineStipple_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.LineStipple_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.LineStipple_compare(self, *args)

    def setFactor(self, *args):
        """setFactor(self, GLint factor)"""
        return _osg.LineStipple_setFactor(self, *args)

    def getFactor(self):
        """getFactor(self) -> GLint"""
        return _osg.LineStipple_getFactor(self)

    def setPattern(self, *args):
        """setPattern(self, GLushort pattern)"""
        return _osg.LineStipple_setPattern(self, *args)

    def getPattern(self):
        """getPattern(self) -> GLushort"""
        return _osg.LineStipple_getPattern(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.LineStipple_apply(self, *args)

LineStipple_swigregister = _osg.LineStipple_swigregister
LineStipple_swigregister(LineStipple)

OSG_LOGICOP = _osg.OSG_LOGICOP
class LogicOp(StateAttribute):
    """Proxy of C++ osg::LogicOp class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicOp, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogicOp, name)
    __repr__ = _swig_repr
    CLEAR = _osg.LogicOp_CLEAR
    SET = _osg.LogicOp_SET
    COPY = _osg.LogicOp_COPY
    COPY_INVERTED = _osg.LogicOp_COPY_INVERTED
    NOOP = _osg.LogicOp_NOOP
    INVERT = _osg.LogicOp_INVERT
    AND = _osg.LogicOp_AND
    NAND = _osg.LogicOp_NAND
    OR = _osg.LogicOp_OR
    NOR = _osg.LogicOp_NOR
    XOR = _osg.LogicOp_XOR
    EQUIV = _osg.LogicOp_EQUIV
    AND_REVERSE = _osg.LogicOp_AND_REVERSE
    AND_INVERTED = _osg.LogicOp_AND_INVERTED
    OR_REVERSE = _osg.LogicOp_OR_REVERSE
    OR_INVERTED = _osg.LogicOp_OR_INVERTED
    def __init__(self, *args): 
        """
        __init__(self) -> LogicOp
        __init__(self, Opcode opcode) -> LogicOp
        __init__(self, LogicOp trans, CopyOp copyop = SHALLOW_COPY) -> LogicOp
        __init__(self, LogicOp trans) -> LogicOp
        """
        this = _osg.new_LogicOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LogicOp_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LogicOp_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LogicOp_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LogicOp_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.LogicOp_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.LogicOp_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.LogicOp_compare(self, *args)

    def setOpcode(self, *args):
        """setOpcode(self, Opcode opcode)"""
        return _osg.LogicOp_setOpcode(self, *args)

    def getOpcode(self):
        """getOpcode(self) -> Opcode"""
        return _osg.LogicOp_getOpcode(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.LogicOp_apply(self, *args)

LogicOp_swigregister = _osg.LogicOp_swigregister
LogicOp_swigregister(LogicOp)

OSG_MATERIAL = _osg.OSG_MATERIAL
class Material(StateAttribute):
    """Proxy of C++ osg::Material class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Material
        __init__(self, Material mat, CopyOp copyop = SHALLOW_COPY) -> Material
        __init__(self, Material mat) -> Material
        """
        this = _osg.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Material_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Material_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Material_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Material_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Material_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Material_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Material_compare(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Material_apply(self, *args)

    FRONT = _osg.Material_FRONT
    BACK = _osg.Material_BACK
    FRONT_AND_BACK = _osg.Material_FRONT_AND_BACK
    AMBIENT = _osg.Material_AMBIENT
    DIFFUSE = _osg.Material_DIFFUSE
    SPECULAR = _osg.Material_SPECULAR
    EMISSION = _osg.Material_EMISSION
    AMBIENT_AND_DIFFUSE = _osg.Material_AMBIENT_AND_DIFFUSE
    OFF = _osg.Material_OFF
    def setColorMode(self, *args):
        """setColorMode(self, ColorMode mode)"""
        return _osg.Material_setColorMode(self, *args)

    def getColorMode(self):
        """getColorMode(self) -> ColorMode"""
        return _osg.Material_getColorMode(self)

    def setAmbient(self, *args):
        """setAmbient(self, Face face, Vec4 ambient)"""
        return _osg.Material_setAmbient(self, *args)

    def getAmbient(self, *args):
        """getAmbient(self, Face face) -> Vec4"""
        return _osg.Material_getAmbient(self, *args)

    def getAmbientFrontAndBack(self):
        """getAmbientFrontAndBack(self) -> bool"""
        return _osg.Material_getAmbientFrontAndBack(self)

    def setDiffuse(self, *args):
        """setDiffuse(self, Face face, Vec4 diffuse)"""
        return _osg.Material_setDiffuse(self, *args)

    def getDiffuse(self, *args):
        """getDiffuse(self, Face face) -> Vec4"""
        return _osg.Material_getDiffuse(self, *args)

    def getDiffuseFrontAndBack(self):
        """getDiffuseFrontAndBack(self) -> bool"""
        return _osg.Material_getDiffuseFrontAndBack(self)

    def setSpecular(self, *args):
        """setSpecular(self, Face face, Vec4 specular)"""
        return _osg.Material_setSpecular(self, *args)

    def getSpecular(self, *args):
        """getSpecular(self, Face face) -> Vec4"""
        return _osg.Material_getSpecular(self, *args)

    def getSpecularFrontAndBack(self):
        """getSpecularFrontAndBack(self) -> bool"""
        return _osg.Material_getSpecularFrontAndBack(self)

    def setEmission(self, *args):
        """setEmission(self, Face face, Vec4 emission)"""
        return _osg.Material_setEmission(self, *args)

    def getEmission(self, *args):
        """getEmission(self, Face face) -> Vec4"""
        return _osg.Material_getEmission(self, *args)

    def getEmissionFrontAndBack(self):
        """getEmissionFrontAndBack(self) -> bool"""
        return _osg.Material_getEmissionFrontAndBack(self)

    def setShininess(self, *args):
        """setShininess(self, Face face, float shininess)"""
        return _osg.Material_setShininess(self, *args)

    def getShininess(self, *args):
        """getShininess(self, Face face) -> float"""
        return _osg.Material_getShininess(self, *args)

    def getShininessFrontAndBack(self):
        """getShininessFrontAndBack(self) -> bool"""
        return _osg.Material_getShininessFrontAndBack(self)

    def setTransparency(self, *args):
        """setTransparency(self, Face face, float trans)"""
        return _osg.Material_setTransparency(self, *args)

    def setAlpha(self, *args):
        """setAlpha(self, Face face, float alpha)"""
        return _osg.Material_setAlpha(self, *args)

Material_swigregister = _osg.Material_swigregister
Material_swigregister(Material)

OSG_STENCIL = _osg.OSG_STENCIL
GL_INCR_WRAP = _osg.GL_INCR_WRAP
GL_DECR_WRAP = _osg.GL_DECR_WRAP
class Stencil(StateAttribute):
    """Proxy of C++ osg::Stencil class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stencil, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stencil, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Stencil
        __init__(self, Stencil stencil, CopyOp copyop = SHALLOW_COPY) -> Stencil
        __init__(self, Stencil stencil) -> Stencil
        """
        this = _osg.new_Stencil(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Stencil_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Stencil_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Stencil_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Stencil_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Stencil_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Stencil_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Stencil_compare(self, *args)

    NEVER = _osg.Stencil_NEVER
    LESS = _osg.Stencil_LESS
    EQUAL = _osg.Stencil_EQUAL
    LEQUAL = _osg.Stencil_LEQUAL
    GREATER = _osg.Stencil_GREATER
    NOTEQUAL = _osg.Stencil_NOTEQUAL
    GEQUAL = _osg.Stencil_GEQUAL
    ALWAYS = _osg.Stencil_ALWAYS
    def setFunction(self, *args):
        """
        setFunction(self, Function func, int ref, unsigned int mask)
        setFunction(self, Function func)
        """
        return _osg.Stencil_setFunction(self, *args)

    def getFunction(self):
        """getFunction(self) -> Function"""
        return _osg.Stencil_getFunction(self)

    def setFunctionRef(self, *args):
        """setFunctionRef(self, int ref)"""
        return _osg.Stencil_setFunctionRef(self, *args)

    def getFunctionRef(self):
        """getFunctionRef(self) -> int"""
        return _osg.Stencil_getFunctionRef(self)

    def setFunctionMask(self, *args):
        """setFunctionMask(self, unsigned int mask)"""
        return _osg.Stencil_setFunctionMask(self, *args)

    def getFunctionMask(self):
        """getFunctionMask(self) -> unsigned int"""
        return _osg.Stencil_getFunctionMask(self)

    KEEP = _osg.Stencil_KEEP
    ZERO = _osg.Stencil_ZERO
    REPLACE = _osg.Stencil_REPLACE
    INCR = _osg.Stencil_INCR
    DECR = _osg.Stencil_DECR
    INVERT = _osg.Stencil_INVERT
    INCR_WRAP = _osg.Stencil_INCR_WRAP
    DECR_WRAP = _osg.Stencil_DECR_WRAP
    def setOperation(self, *args):
        """setOperation(self, Operation sfail, Operation zfail, Operation zpass)"""
        return _osg.Stencil_setOperation(self, *args)

    def setStencilFailOperation(self, *args):
        """setStencilFailOperation(self, Operation sfail)"""
        return _osg.Stencil_setStencilFailOperation(self, *args)

    def getStencilFailOperation(self):
        """getStencilFailOperation(self) -> Operation"""
        return _osg.Stencil_getStencilFailOperation(self)

    def setStencilPassAndDepthFailOperation(self, *args):
        """setStencilPassAndDepthFailOperation(self, Operation zfail)"""
        return _osg.Stencil_setStencilPassAndDepthFailOperation(self, *args)

    def getStencilPassAndDepthFailOperation(self):
        """getStencilPassAndDepthFailOperation(self) -> Operation"""
        return _osg.Stencil_getStencilPassAndDepthFailOperation(self)

    def setStencilPassAndDepthPassOperation(self, *args):
        """setStencilPassAndDepthPassOperation(self, Operation zpass)"""
        return _osg.Stencil_setStencilPassAndDepthPassOperation(self, *args)

    def getStencilPassAndDepthPassOperation(self):
        """getStencilPassAndDepthPassOperation(self) -> Operation"""
        return _osg.Stencil_getStencilPassAndDepthPassOperation(self)

    def setWriteMask(self, *args):
        """setWriteMask(self, unsigned int mask)"""
        return _osg.Stencil_setWriteMask(self, *args)

    def getWriteMask(self):
        """getWriteMask(self) -> unsigned int"""
        return _osg.Stencil_getWriteMask(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Stencil_apply(self, *args)

Stencil_swigregister = _osg.Stencil_swigregister
Stencil_swigregister(Stencil)

OSG_DEPTH = _osg.OSG_DEPTH
class Depth(StateAttribute):
    """Proxy of C++ osg::Depth class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Depth, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Depth, name)
    __repr__ = _swig_repr
    NEVER = _osg.Depth_NEVER
    LESS = _osg.Depth_LESS
    EQUAL = _osg.Depth_EQUAL
    LEQUAL = _osg.Depth_LEQUAL
    GREATER = _osg.Depth_GREATER
    NOTEQUAL = _osg.Depth_NOTEQUAL
    GEQUAL = _osg.Depth_GEQUAL
    ALWAYS = _osg.Depth_ALWAYS
    def __init__(self, *args): 
        """
        __init__(self, Function func = LESS, double zNear = 0.0, double zFar = 1.0, 
            bool writeMask = True) -> Depth
        __init__(self, Function func = LESS, double zNear = 0.0, double zFar = 1.0) -> Depth
        __init__(self, Function func = LESS, double zNear = 0.0) -> Depth
        __init__(self, Function func = LESS) -> Depth
        __init__(self) -> Depth
        __init__(self, Depth dp, CopyOp copyop = SHALLOW_COPY) -> Depth
        __init__(self, Depth dp) -> Depth
        """
        this = _osg.new_Depth(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Depth_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Depth_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Depth_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Depth_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Depth_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Depth_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Depth_compare(self, *args)

    def setFunction(self, *args):
        """setFunction(self, Function func)"""
        return _osg.Depth_setFunction(self, *args)

    def getFunction(self):
        """getFunction(self) -> Function"""
        return _osg.Depth_getFunction(self)

    def setRange(self, *args):
        """setRange(self, double zNear, double zFar)"""
        return _osg.Depth_setRange(self, *args)

    def setZNear(self, *args):
        """setZNear(self, double zNear)"""
        return _osg.Depth_setZNear(self, *args)

    def getZNear(self):
        """getZNear(self) -> double"""
        return _osg.Depth_getZNear(self)

    def setZFar(self, *args):
        """setZFar(self, double zFar)"""
        return _osg.Depth_setZFar(self, *args)

    def getZFar(self):
        """getZFar(self) -> double"""
        return _osg.Depth_getZFar(self)

    def setWriteMask(self, *args):
        """setWriteMask(self, bool mask)"""
        return _osg.Depth_setWriteMask(self, *args)

    def getWriteMask(self):
        """getWriteMask(self) -> bool"""
        return _osg.Depth_getWriteMask(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Depth_apply(self, *args)

Depth_swigregister = _osg.Depth_swigregister
Depth_swigregister(Depth)

OSG_TEXENV = _osg.OSG_TEXENV
class TexEnv(StateAttribute):
    """Proxy of C++ osg::TexEnv class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexEnv, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexEnv, name)
    __repr__ = _swig_repr
    DECAL = _osg.TexEnv_DECAL
    MODULATE = _osg.TexEnv_MODULATE
    BLEND = _osg.TexEnv_BLEND
    REPLACE = _osg.TexEnv_REPLACE
    ADD = _osg.TexEnv_ADD
    def __init__(self, *args): 
        """
        __init__(self, Mode mode = MODULATE) -> TexEnv
        __init__(self) -> TexEnv
        __init__(self, TexEnv texenv, CopyOp copyop = SHALLOW_COPY) -> TexEnv
        __init__(self, TexEnv texenv) -> TexEnv
        """
        this = _osg.new_TexEnv(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TexEnv_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TexEnv_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TexEnv_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TexEnv_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TexEnv_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TexEnv_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.TexEnv_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.TexEnv_compare(self, *args)

    def setMode(self, *args):
        """setMode(self, Mode mode)"""
        return _osg.TexEnv_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> Mode"""
        return _osg.TexEnv_getMode(self)

    def setColor(self, *args):
        """setColor(self, Vec4 color)"""
        return _osg.TexEnv_setColor(self, *args)

    def getColor(self, *args):
        """
        getColor(self) -> Vec4
        getColor(self) -> Vec4
        """
        return _osg.TexEnv_getColor(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TexEnv_apply(self, *args)

TexEnv_swigregister = _osg.TexEnv_swigregister
TexEnv_swigregister(TexEnv)

OSG_TEXENVCOMBINE = _osg.OSG_TEXENVCOMBINE
GL_COMBINE_ARB = _osg.GL_COMBINE_ARB
GL_COMBINE_RGB_ARB = _osg.GL_COMBINE_RGB_ARB
GL_COMBINE_ALPHA_ARB = _osg.GL_COMBINE_ALPHA_ARB
GL_SOURCE0_RGB_ARB = _osg.GL_SOURCE0_RGB_ARB
GL_SOURCE1_RGB_ARB = _osg.GL_SOURCE1_RGB_ARB
GL_SOURCE2_RGB_ARB = _osg.GL_SOURCE2_RGB_ARB
GL_SOURCE0_ALPHA_ARB = _osg.GL_SOURCE0_ALPHA_ARB
GL_SOURCE1_ALPHA_ARB = _osg.GL_SOURCE1_ALPHA_ARB
GL_SOURCE2_ALPHA_ARB = _osg.GL_SOURCE2_ALPHA_ARB
GL_OPERAND0_RGB_ARB = _osg.GL_OPERAND0_RGB_ARB
GL_OPERAND1_RGB_ARB = _osg.GL_OPERAND1_RGB_ARB
GL_OPERAND2_RGB_ARB = _osg.GL_OPERAND2_RGB_ARB
GL_OPERAND0_ALPHA_ARB = _osg.GL_OPERAND0_ALPHA_ARB
GL_OPERAND1_ALPHA_ARB = _osg.GL_OPERAND1_ALPHA_ARB
GL_OPERAND2_ALPHA_ARB = _osg.GL_OPERAND2_ALPHA_ARB
GL_RGB_SCALE_ARB = _osg.GL_RGB_SCALE_ARB
GL_ADD_SIGNED_ARB = _osg.GL_ADD_SIGNED_ARB
GL_INTERPOLATE_ARB = _osg.GL_INTERPOLATE_ARB
GL_SUBTRACT_ARB = _osg.GL_SUBTRACT_ARB
GL_CONSTANT_ARB = _osg.GL_CONSTANT_ARB
GL_PRIMARY_COLOR_ARB = _osg.GL_PRIMARY_COLOR_ARB
GL_PREVIOUS_ARB = _osg.GL_PREVIOUS_ARB
GL_DOT3_RGB_ARB = _osg.GL_DOT3_RGB_ARB
GL_DOT3_RGBA_ARB = _osg.GL_DOT3_RGBA_ARB
GL_TEXTURE0 = _osg.GL_TEXTURE0
class TexEnvCombine(StateAttribute):
    """Proxy of C++ osg::TexEnvCombine class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexEnvCombine, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexEnvCombine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TexEnvCombine
        __init__(self, TexEnvCombine texenv, CopyOp copyop = SHALLOW_COPY) -> TexEnvCombine
        __init__(self, TexEnvCombine texenv) -> TexEnvCombine
        """
        this = _osg.new_TexEnvCombine(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TexEnvCombine_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TexEnvCombine_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TexEnvCombine_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TexEnvCombine_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TexEnvCombine_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TexEnvCombine_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.TexEnvCombine_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.TexEnvCombine_compare(self, *args)

    REPLACE = _osg.TexEnvCombine_REPLACE
    MODULATE = _osg.TexEnvCombine_MODULATE
    ADD = _osg.TexEnvCombine_ADD
    ADD_SIGNED = _osg.TexEnvCombine_ADD_SIGNED
    INTERPOLATE = _osg.TexEnvCombine_INTERPOLATE
    SUBTRACT = _osg.TexEnvCombine_SUBTRACT
    DOT3_RGB = _osg.TexEnvCombine_DOT3_RGB
    DOT3_RGBA = _osg.TexEnvCombine_DOT3_RGBA
    def setCombine_RGB(self, *args):
        """setCombine_RGB(self, GLint cm)"""
        return _osg.TexEnvCombine_setCombine_RGB(self, *args)

    def setCombine_Alpha(self, *args):
        """setCombine_Alpha(self, GLint cm)"""
        return _osg.TexEnvCombine_setCombine_Alpha(self, *args)

    def getCombine_RGB(self):
        """getCombine_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getCombine_RGB(self)

    def getCombine_Alpha(self):
        """getCombine_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getCombine_Alpha(self)

    CONSTANT = _osg.TexEnvCombine_CONSTANT
    PRIMARY_COLOR = _osg.TexEnvCombine_PRIMARY_COLOR
    PREVIOUS = _osg.TexEnvCombine_PREVIOUS
    TEXTURE = _osg.TexEnvCombine_TEXTURE
    TEXTURE0 = _osg.TexEnvCombine_TEXTURE0
    TEXTURE1 = _osg.TexEnvCombine_TEXTURE1
    TEXTURE2 = _osg.TexEnvCombine_TEXTURE2
    TEXTURE3 = _osg.TexEnvCombine_TEXTURE3
    TEXTURE4 = _osg.TexEnvCombine_TEXTURE4
    TEXTURE5 = _osg.TexEnvCombine_TEXTURE5
    TEXTURE6 = _osg.TexEnvCombine_TEXTURE6
    TEXTURE7 = _osg.TexEnvCombine_TEXTURE7
    def setSource0_RGB(self, *args):
        """setSource0_RGB(self, GLint sp)"""
        return _osg.TexEnvCombine_setSource0_RGB(self, *args)

    def setSource1_RGB(self, *args):
        """setSource1_RGB(self, GLint sp)"""
        return _osg.TexEnvCombine_setSource1_RGB(self, *args)

    def setSource2_RGB(self, *args):
        """setSource2_RGB(self, GLint sp)"""
        return _osg.TexEnvCombine_setSource2_RGB(self, *args)

    def setSource0_Alpha(self, *args):
        """setSource0_Alpha(self, GLint sp)"""
        return _osg.TexEnvCombine_setSource0_Alpha(self, *args)

    def setSource1_Alpha(self, *args):
        """setSource1_Alpha(self, GLint sp)"""
        return _osg.TexEnvCombine_setSource1_Alpha(self, *args)

    def setSource2_Alpha(self, *args):
        """setSource2_Alpha(self, GLint sp)"""
        return _osg.TexEnvCombine_setSource2_Alpha(self, *args)

    def getSource0_RGB(self):
        """getSource0_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getSource0_RGB(self)

    def getSource1_RGB(self):
        """getSource1_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getSource1_RGB(self)

    def getSource2_RGB(self):
        """getSource2_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getSource2_RGB(self)

    def getSource0_Alpha(self):
        """getSource0_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getSource0_Alpha(self)

    def getSource1_Alpha(self):
        """getSource1_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getSource1_Alpha(self)

    def getSource2_Alpha(self):
        """getSource2_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getSource2_Alpha(self)

    SRC_COLOR = _osg.TexEnvCombine_SRC_COLOR
    ONE_MINUS_SRC_COLOR = _osg.TexEnvCombine_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = _osg.TexEnvCombine_SRC_ALPHA
    ONE_MINUS_SRC_ALPHA = _osg.TexEnvCombine_ONE_MINUS_SRC_ALPHA
    def setOperand0_RGB(self, *args):
        """setOperand0_RGB(self, GLint op)"""
        return _osg.TexEnvCombine_setOperand0_RGB(self, *args)

    def setOperand1_RGB(self, *args):
        """setOperand1_RGB(self, GLint op)"""
        return _osg.TexEnvCombine_setOperand1_RGB(self, *args)

    def setOperand2_RGB(self, *args):
        """setOperand2_RGB(self, GLint op)"""
        return _osg.TexEnvCombine_setOperand2_RGB(self, *args)

    def setOperand0_Alpha(self, *args):
        """setOperand0_Alpha(self, GLint op)"""
        return _osg.TexEnvCombine_setOperand0_Alpha(self, *args)

    def setOperand1_Alpha(self, *args):
        """setOperand1_Alpha(self, GLint op)"""
        return _osg.TexEnvCombine_setOperand1_Alpha(self, *args)

    def setOperand2_Alpha(self, *args):
        """setOperand2_Alpha(self, GLint op)"""
        return _osg.TexEnvCombine_setOperand2_Alpha(self, *args)

    def getOperand0_RGB(self):
        """getOperand0_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getOperand0_RGB(self)

    def getOperand1_RGB(self):
        """getOperand1_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getOperand1_RGB(self)

    def getOperand2_RGB(self):
        """getOperand2_RGB(self) -> GLint"""
        return _osg.TexEnvCombine_getOperand2_RGB(self)

    def getOperand0_Alpha(self):
        """getOperand0_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getOperand0_Alpha(self)

    def getOperand1_Alpha(self):
        """getOperand1_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getOperand1_Alpha(self)

    def getOperand2_Alpha(self):
        """getOperand2_Alpha(self) -> GLint"""
        return _osg.TexEnvCombine_getOperand2_Alpha(self)

    def setScale_RGB(self, *args):
        """setScale_RGB(self, float scale)"""
        return _osg.TexEnvCombine_setScale_RGB(self, *args)

    def setScale_Alpha(self, *args):
        """setScale_Alpha(self, float scale)"""
        return _osg.TexEnvCombine_setScale_Alpha(self, *args)

    def getScale_RGB(self):
        """getScale_RGB(self) -> float"""
        return _osg.TexEnvCombine_getScale_RGB(self)

    def getScale_Alpha(self):
        """getScale_Alpha(self) -> float"""
        return _osg.TexEnvCombine_getScale_Alpha(self)

    def setConstantColor(self, *args):
        """setConstantColor(self, Vec4 color)"""
        return _osg.TexEnvCombine_setConstantColor(self, *args)

    def getConstantColor(self):
        """getConstantColor(self) -> Vec4"""
        return _osg.TexEnvCombine_getConstantColor(self)

    def setConstantColorAsLightDirection(self, *args):
        """setConstantColorAsLightDirection(self, Vec3 direction)"""
        return _osg.TexEnvCombine_setConstantColorAsLightDirection(self, *args)

    def getConstantColorAsLightDirection(self):
        """getConstantColorAsLightDirection(self) -> Vec3"""
        return _osg.TexEnvCombine_getConstantColorAsLightDirection(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TexEnvCombine_apply(self, *args)

TexEnvCombine_swigregister = _osg.TexEnvCombine_swigregister
TexEnvCombine_swigregister(TexEnvCombine)

OSG_TEXENVFILTER = _osg.OSG_TEXENVFILTER
GL_MAX_TEXTURE_LOD_BIAS_EXT = _osg.GL_MAX_TEXTURE_LOD_BIAS_EXT
GL_TEXTURE_FILTER_CONTROL_EXT = _osg.GL_TEXTURE_FILTER_CONTROL_EXT
GL_TEXTURE_LOD_BIAS_EXT = _osg.GL_TEXTURE_LOD_BIAS_EXT
class TexEnvFilter(StateAttribute):
    """Proxy of C++ osg::TexEnvFilter class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexEnvFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexEnvFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float lodBias = 0.0) -> TexEnvFilter
        __init__(self) -> TexEnvFilter
        __init__(self, TexEnvFilter texenv, CopyOp copyop = SHALLOW_COPY) -> TexEnvFilter
        __init__(self, TexEnvFilter texenv) -> TexEnvFilter
        """
        this = _osg.new_TexEnvFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TexEnvFilter_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TexEnvFilter_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TexEnvFilter_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TexEnvFilter_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TexEnvFilter_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TexEnvFilter_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.TexEnvFilter_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.TexEnvFilter_compare(self, *args)

    def setLodBias(self, *args):
        """setLodBias(self, float lodBias)"""
        return _osg.TexEnvFilter_setLodBias(self, *args)

    def getLodBias(self):
        """getLodBias(self) -> float"""
        return _osg.TexEnvFilter_getLodBias(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TexEnvFilter_apply(self, *args)

TexEnvFilter_swigregister = _osg.TexEnvFilter_swigregister
TexEnvFilter_swigregister(TexEnvFilter)

OSG_TEXGEN = _osg.OSG_TEXGEN
GL_NORMAL_MAP_ARB = _osg.GL_NORMAL_MAP_ARB
GL_REFLECTION_MAP_ARB = _osg.GL_REFLECTION_MAP_ARB
class TexGen(StateAttribute):
    """Proxy of C++ osg::TexGen class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexGen, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexGen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TexGen
        __init__(self, TexGen texgen, CopyOp copyop = SHALLOW_COPY) -> TexGen
        __init__(self, TexGen texgen) -> TexGen
        """
        this = _osg.new_TexGen(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TexGen_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TexGen_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TexGen_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TexGen_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TexGen_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TexGen_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.TexGen_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.TexGen_compare(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TexGen_apply(self, *args)

    OBJECT_LINEAR = _osg.TexGen_OBJECT_LINEAR
    EYE_LINEAR = _osg.TexGen_EYE_LINEAR
    SPHERE_MAP = _osg.TexGen_SPHERE_MAP
    NORMAL_MAP = _osg.TexGen_NORMAL_MAP
    REFLECTION_MAP = _osg.TexGen_REFLECTION_MAP
    def setMode(self, *args):
        """setMode(self, Mode mode)"""
        return _osg.TexGen_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> Mode"""
        return _osg.TexGen_getMode(self)

    S = _osg.TexGen_S
    T = _osg.TexGen_T
    R = _osg.TexGen_R
    Q = _osg.TexGen_Q
    def setPlane(self, *args):
        """setPlane(self, Coord which, Plane plane)"""
        return _osg.TexGen_setPlane(self, *args)

    def getPlane(self, *args):
        """
        getPlane(self, Coord which) -> Plane
        getPlane(self, Coord which) -> Plane
        """
        return _osg.TexGen_getPlane(self, *args)

    def setPlanesFromMatrix(self, *args):
        """setPlanesFromMatrix(self, Matrixd matrix)"""
        return _osg.TexGen_setPlanesFromMatrix(self, *args)

TexGen_swigregister = _osg.TexGen_swigregister
TexGen_swigregister(TexGen)

OSG_ALPHAFUNC = _osg.OSG_ALPHAFUNC
class AlphaFunc(StateAttribute):
    """Proxy of C++ osg::AlphaFunc class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlphaFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlphaFunc, name)
    __repr__ = _swig_repr
    NEVER = _osg.AlphaFunc_NEVER
    LESS = _osg.AlphaFunc_LESS
    EQUAL = _osg.AlphaFunc_EQUAL
    LEQUAL = _osg.AlphaFunc_LEQUAL
    GREATER = _osg.AlphaFunc_GREATER
    NOTEQUAL = _osg.AlphaFunc_NOTEQUAL
    GEQUAL = _osg.AlphaFunc_GEQUAL
    ALWAYS = _osg.AlphaFunc_ALWAYS
    def __init__(self, *args): 
        """
        __init__(self) -> AlphaFunc
        __init__(self, ComparisonFunction func, float ref) -> AlphaFunc
        __init__(self, AlphaFunc af, CopyOp copyop = SHALLOW_COPY) -> AlphaFunc
        __init__(self, AlphaFunc af) -> AlphaFunc
        """
        this = _osg.new_AlphaFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.AlphaFunc_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.AlphaFunc_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.AlphaFunc_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.AlphaFunc_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.AlphaFunc_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.AlphaFunc_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.AlphaFunc_compare(self, *args)

    def setFunction(self, *args):
        """
        setFunction(self, ComparisonFunction func, float ref)
        setFunction(self, ComparisonFunction func)
        """
        return _osg.AlphaFunc_setFunction(self, *args)

    def getFunction(self):
        """getFunction(self) -> ComparisonFunction"""
        return _osg.AlphaFunc_getFunction(self)

    def setReferenceValue(self, *args):
        """setReferenceValue(self, float value)"""
        return _osg.AlphaFunc_setReferenceValue(self, *args)

    def getReferenceValue(self):
        """getReferenceValue(self) -> float"""
        return _osg.AlphaFunc_getReferenceValue(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.AlphaFunc_apply(self, *args)

AlphaFunc_swigregister = _osg.AlphaFunc_swigregister
AlphaFunc_swigregister(AlphaFunc)

OSG_BLENDFUNC = _osg.OSG_BLENDFUNC
GL_CONSTANT_COLOR = _osg.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _osg.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _osg.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _osg.GL_ONE_MINUS_CONSTANT_ALPHA
GL_BLEND_COLOR = _osg.GL_BLEND_COLOR
GL_BLEND_DST_RGB = _osg.GL_BLEND_DST_RGB
GL_BLEND_SRC_RGB = _osg.GL_BLEND_SRC_RGB
GL_BLEND_DST_ALPHA = _osg.GL_BLEND_DST_ALPHA
GL_BLEND_SRC_ALPHA = _osg.GL_BLEND_SRC_ALPHA
class BlendFunc(StateAttribute):
    """Proxy of C++ osg::BlendFunc class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendFunc, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendFunc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BlendFunc
        __init__(self, GLenum source, GLenum destination) -> BlendFunc
        __init__(self, GLenum source, GLenum destination, GLenum source_alpha, 
            GLenum destination_alpha) -> BlendFunc
        __init__(self, BlendFunc trans, CopyOp copyop = SHALLOW_COPY) -> BlendFunc
        __init__(self, BlendFunc trans) -> BlendFunc
        """
        this = _osg.new_BlendFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.BlendFunc_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.BlendFunc_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.BlendFunc_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.BlendFunc_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.BlendFunc_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.BlendFunc_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.BlendFunc_compare(self, *args)

    DST_ALPHA = _osg.BlendFunc_DST_ALPHA
    DST_COLOR = _osg.BlendFunc_DST_COLOR
    ONE = _osg.BlendFunc_ONE
    ONE_MINUS_DST_ALPHA = _osg.BlendFunc_ONE_MINUS_DST_ALPHA
    ONE_MINUS_DST_COLOR = _osg.BlendFunc_ONE_MINUS_DST_COLOR
    ONE_MINUS_SRC_ALPHA = _osg.BlendFunc_ONE_MINUS_SRC_ALPHA
    ONE_MINUS_SRC_COLOR = _osg.BlendFunc_ONE_MINUS_SRC_COLOR
    SRC_ALPHA = _osg.BlendFunc_SRC_ALPHA
    SRC_ALPHA_SATURATE = _osg.BlendFunc_SRC_ALPHA_SATURATE
    SRC_COLOR = _osg.BlendFunc_SRC_COLOR
    CONSTANT_COLOR = _osg.BlendFunc_CONSTANT_COLOR
    ONE_MINUS_CONSTANT_COLOR = _osg.BlendFunc_ONE_MINUS_CONSTANT_COLOR
    CONSTANT_ALPHA = _osg.BlendFunc_CONSTANT_ALPHA
    ONE_MINUS_CONSTANT_ALPHA = _osg.BlendFunc_ONE_MINUS_CONSTANT_ALPHA
    ZERO = _osg.BlendFunc_ZERO
    def setFunction(self, *args):
        """
        setFunction(self, GLenum source, GLenum destination)
        setFunction(self, GLenum source_rgb, GLenum destination_rgb, GLenum source_alpha, 
            GLenum destination_alpha)
        """
        return _osg.BlendFunc_setFunction(self, *args)

    def setSource(self, *args):
        """setSource(self, GLenum source)"""
        return _osg.BlendFunc_setSource(self, *args)

    def getSource(self):
        """getSource(self) -> GLenum"""
        return _osg.BlendFunc_getSource(self)

    def setSourceRGB(self, *args):
        """setSourceRGB(self, GLenum source)"""
        return _osg.BlendFunc_setSourceRGB(self, *args)

    def getSourceRGB(self):
        """getSourceRGB(self) -> GLenum"""
        return _osg.BlendFunc_getSourceRGB(self)

    def setSourceAlpha(self, *args):
        """setSourceAlpha(self, GLenum source)"""
        return _osg.BlendFunc_setSourceAlpha(self, *args)

    def getSourceAlpha(self):
        """getSourceAlpha(self) -> GLenum"""
        return _osg.BlendFunc_getSourceAlpha(self)

    def setDestination(self, *args):
        """setDestination(self, GLenum destination)"""
        return _osg.BlendFunc_setDestination(self, *args)

    def getDestination(self):
        """getDestination(self) -> GLenum"""
        return _osg.BlendFunc_getDestination(self)

    def setDestinationRGB(self, *args):
        """setDestinationRGB(self, GLenum destination)"""
        return _osg.BlendFunc_setDestinationRGB(self, *args)

    def getDestinationRGB(self):
        """getDestinationRGB(self) -> GLenum"""
        return _osg.BlendFunc_getDestinationRGB(self)

    def setDestinationAlpha(self, *args):
        """setDestinationAlpha(self, GLenum destination)"""
        return _osg.BlendFunc_setDestinationAlpha(self, *args)

    def getDestinationAlpha(self):
        """getDestinationAlpha(self) -> GLenum"""
        return _osg.BlendFunc_getDestinationAlpha(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.BlendFunc_apply(self, *args)

BlendFunc_swigregister = _osg.BlendFunc_swigregister
BlendFunc_swigregister(BlendFunc)

OSG_BLENDEQUATION = _osg.OSG_BLENDEQUATION
GL_MIN = _osg.GL_MIN
GL_MAX = _osg.GL_MAX
GL_FUNC_ADD = _osg.GL_FUNC_ADD
GL_FUNC_SUBTRACT = _osg.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = _osg.GL_FUNC_REVERSE_SUBTRACT
GL_ALPHA_MIN_SGIX = _osg.GL_ALPHA_MIN_SGIX
GL_ALPHA_MAX_SGIX = _osg.GL_ALPHA_MAX_SGIX
class BlendEquation(StateAttribute):
    """Proxy of C++ osg::BlendEquation class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendEquation, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendEquation, name)
    __repr__ = _swig_repr
    RGBA_MIN = _osg.BlendEquation_RGBA_MIN
    RGBA_MAX = _osg.BlendEquation_RGBA_MAX
    ALPHA_MIN = _osg.BlendEquation_ALPHA_MIN
    ALPHA_MAX = _osg.BlendEquation_ALPHA_MAX
    LOGIC_OP = _osg.BlendEquation_LOGIC_OP
    FUNC_ADD = _osg.BlendEquation_FUNC_ADD
    FUNC_SUBTRACT = _osg.BlendEquation_FUNC_SUBTRACT
    FUNC_REVERSE_SUBTRACT = _osg.BlendEquation_FUNC_REVERSE_SUBTRACT
    def __init__(self, *args): 
        """
        __init__(self) -> BlendEquation
        __init__(self, Equation equation) -> BlendEquation
        __init__(self, Equation equationRGB, Equation equationAlpha) -> BlendEquation
        __init__(self, BlendEquation trans, CopyOp copyop = SHALLOW_COPY) -> BlendEquation
        __init__(self, BlendEquation trans) -> BlendEquation
        """
        this = _osg.new_BlendEquation(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.BlendEquation_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.BlendEquation_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.BlendEquation_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.BlendEquation_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.BlendEquation_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.BlendEquation_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.BlendEquation_compare(self, *args)

    def setEquation(self, *args):
        """setEquation(self, Equation equation)"""
        return _osg.BlendEquation_setEquation(self, *args)

    def getEquation(self):
        """getEquation(self) -> Equation"""
        return _osg.BlendEquation_getEquation(self)

    def setEquationRGB(self, *args):
        """setEquationRGB(self, Equation equation)"""
        return _osg.BlendEquation_setEquationRGB(self, *args)

    def getEquationRGB(self):
        """getEquationRGB(self) -> Equation"""
        return _osg.BlendEquation_getEquationRGB(self)

    def setEquationAlpha(self, *args):
        """setEquationAlpha(self, Equation equation)"""
        return _osg.BlendEquation_setEquationAlpha(self, *args)

    def getEquationAlpha(self):
        """getEquationAlpha(self) -> Equation"""
        return _osg.BlendEquation_getEquationAlpha(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.BlendEquation_apply(self, *args)

BlendEquation_swigregister = _osg.BlendEquation_swigregister
BlendEquation_swigregister(BlendEquation)

OSG_BLENDCOLOR = _osg.OSG_BLENDCOLOR
class BlendColor(StateAttribute):
    """Proxy of C++ osg::BlendColor class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendColor, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlendColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BlendColor
        __init__(self, Vec4 constantColor) -> BlendColor
        __init__(self, BlendColor trans, CopyOp copyop = SHALLOW_COPY) -> BlendColor
        __init__(self, BlendColor trans) -> BlendColor
        """
        this = _osg.new_BlendColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.BlendColor_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.BlendColor_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.BlendColor_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.BlendColor_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.BlendColor_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.BlendColor_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.BlendColor_compare(self, *args)

    def setConstantColor(self, *args):
        """setConstantColor(self, Vec4 color)"""
        return _osg.BlendColor_setConstantColor(self, *args)

    def getConstantColor(self, *args):
        """
        getConstantColor(self) -> Vec4
        getConstantColor(self) -> Vec4
        """
        return _osg.BlendColor_getConstantColor(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.BlendColor_apply(self, *args)

BlendColor_swigregister = _osg.BlendColor_swigregister
BlendColor_swigregister(BlendColor)

OSG_BUFFEROBJECT = _osg.OSG_BUFFEROBJECT
GL_ARRAY_BUFFER_ARB = _osg.GL_ARRAY_BUFFER_ARB
GL_ELEMENT_ARRAY_BUFFER_ARB = _osg.GL_ELEMENT_ARRAY_BUFFER_ARB
GL_ARRAY_BUFFER_BINDING_ARB = _osg.GL_ARRAY_BUFFER_BINDING_ARB
GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = _osg.GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = _osg.GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = _osg.GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
GL_COLOR_ARRAY_BUFFER_BINDING_ARB = _osg.GL_COLOR_ARRAY_BUFFER_BINDING_ARB
GL_INDEX_ARRAY_BUFFER_BINDING_ARB = _osg.GL_INDEX_ARRAY_BUFFER_BINDING_ARB
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = _osg.GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = _osg.GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = _osg.GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = _osg.GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = _osg.GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
GL_STREAM_DRAW_ARB = _osg.GL_STREAM_DRAW_ARB
GL_STREAM_READ_ARB = _osg.GL_STREAM_READ_ARB
GL_STREAM_COPY_ARB = _osg.GL_STREAM_COPY_ARB
GL_STATIC_DRAW_ARB = _osg.GL_STATIC_DRAW_ARB
GL_STATIC_READ_ARB = _osg.GL_STATIC_READ_ARB
GL_STATIC_COPY_ARB = _osg.GL_STATIC_COPY_ARB
GL_DYNAMIC_DRAW_ARB = _osg.GL_DYNAMIC_DRAW_ARB
GL_DYNAMIC_READ_ARB = _osg.GL_DYNAMIC_READ_ARB
GL_DYNAMIC_COPY_ARB = _osg.GL_DYNAMIC_COPY_ARB
GL_READ_ONLY_ARB = _osg.GL_READ_ONLY_ARB
GL_WRITE_ONLY_ARB = _osg.GL_WRITE_ONLY_ARB
GL_READ_WRITE_ARB = _osg.GL_READ_WRITE_ARB
GL_BUFFER_SIZE_ARB = _osg.GL_BUFFER_SIZE_ARB
GL_BUFFER_USAGE_ARB = _osg.GL_BUFFER_USAGE_ARB
GL_BUFFER_ACCESS_ARB = _osg.GL_BUFFER_ACCESS_ARB
GL_BUFFER_MAPPED_ARB = _osg.GL_BUFFER_MAPPED_ARB
GL_BUFFER_MAP_POINTER_ARB = _osg.GL_BUFFER_MAP_POINTER_ARB
GL_STREAM_DRAW = _osg.GL_STREAM_DRAW
GL_STREAM_READ = _osg.GL_STREAM_READ
GL_STREAM_COPY = _osg.GL_STREAM_COPY
GL_STATIC_DRAW = _osg.GL_STATIC_DRAW
GL_STATIC_READ = _osg.GL_STATIC_READ
GL_STATIC_COPY = _osg.GL_STATIC_COPY
GL_DYNAMIC_DRAW = _osg.GL_DYNAMIC_DRAW
GL_DYNAMIC_READ = _osg.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = _osg.GL_DYNAMIC_COPY
GL_PIXEL_PACK_BUFFER = _osg.GL_PIXEL_PACK_BUFFER
GL_PIXEL_UNPACK_BUFFER = _osg.GL_PIXEL_UNPACK_BUFFER
GL_PIXEL_PACK_BUFFER_BINDING = _osg.GL_PIXEL_PACK_BUFFER_BINDING
GL_PIXEL_UNPACK_BUFFER_BINDING = _osg.GL_PIXEL_UNPACK_BUFFER_BINDING
GL_PIXEL_PACK_BUFFER_ARB = _osg.GL_PIXEL_PACK_BUFFER_ARB
GL_PIXEL_UNPACK_BUFFER_ARB = _osg.GL_PIXEL_UNPACK_BUFFER_ARB
GL_PIXEL_PACK_BUFFER_BINDING_ARB = _osg.GL_PIXEL_PACK_BUFFER_BINDING_ARB
GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = _osg.GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
class BufferObjectProfile(_object):
    """Proxy of C++ osg::BufferObjectProfile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferObjectProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BufferObjectProfile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BufferObjectProfile
        __init__(self, GLenum target, GLenum usage, unsigned int size) -> BufferObjectProfile
        __init__(self, BufferObjectProfile bpo) -> BufferObjectProfile
        """
        this = _osg.new_BufferObjectProfile(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(self, *args):
        """__lt__(self, BufferObjectProfile rhs) -> bool"""
        return _osg.BufferObjectProfile___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, BufferObjectProfile rhs) -> bool"""
        return _osg.BufferObjectProfile___eq__(self, *args)

    def setProfile(self, *args):
        """setProfile(self, GLenum target, GLenum usage, unsigned int size)"""
        return _osg.BufferObjectProfile_setProfile(self, *args)

    __swig_setmethods__["_target"] = _osg.BufferObjectProfile__target_set
    __swig_getmethods__["_target"] = _osg.BufferObjectProfile__target_get
    if _newclass:_target = _swig_property(_osg.BufferObjectProfile__target_get, _osg.BufferObjectProfile__target_set)
    __swig_setmethods__["_usage"] = _osg.BufferObjectProfile__usage_set
    __swig_getmethods__["_usage"] = _osg.BufferObjectProfile__usage_get
    if _newclass:_usage = _swig_property(_osg.BufferObjectProfile__usage_get, _osg.BufferObjectProfile__usage_set)
    __swig_setmethods__["_size"] = _osg.BufferObjectProfile__size_set
    __swig_getmethods__["_size"] = _osg.BufferObjectProfile__size_get
    if _newclass:_size = _swig_property(_osg.BufferObjectProfile__size_get, _osg.BufferObjectProfile__size_set)
    __swig_destroy__ = _osg.delete_BufferObjectProfile
    __del__ = lambda self : None;
BufferObjectProfile_swigregister = _osg.BufferObjectProfile_swigregister
BufferObjectProfile_swigregister(BufferObjectProfile)

class GLBufferObject(Referenced):
    """Proxy of C++ osg::GLBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, unsigned int contextID, BufferObject bufferObject, 
            unsigned int glObjectID = 0) -> GLBufferObject
        __init__(self, unsigned int contextID, BufferObject bufferObject) -> GLBufferObject
        """
        this = _osg.new_GLBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def setProfile(self, *args):
        """setProfile(self, BufferObjectProfile profile)"""
        return _osg.GLBufferObject_setProfile(self, *args)

    def getProfile(self):
        """getProfile(self) -> BufferObjectProfile"""
        return _osg.GLBufferObject_getProfile(self)

    def setBufferObject(self, *args):
        """setBufferObject(self, BufferObject bufferObject)"""
        return _osg.GLBufferObject_setBufferObject(self, *args)

    def getBufferObject(self):
        """getBufferObject(self) -> BufferObject"""
        return _osg.GLBufferObject_getBufferObject(self)

    def getContextID(self):
        """getContextID(self) -> unsigned int"""
        return _osg.GLBufferObject_getContextID(self)

    def getGLObjectID(self, *args):
        """
        getGLObjectID(self) -> GLuint
        getGLObjectID(self) -> GLuint
        """
        return _osg.GLBufferObject_getGLObjectID(self, *args)

    def getOffset(self, *args):
        """getOffset(self, unsigned int i) -> GLsizeiptrARB"""
        return _osg.GLBufferObject_getOffset(self, *args)

    def bindBuffer(self):
        """bindBuffer(self)"""
        return _osg.GLBufferObject_bindBuffer(self)

    def unbindBuffer(self):
        """unbindBuffer(self)"""
        return _osg.GLBufferObject_unbindBuffer(self)

    def isDirty(self):
        """isDirty(self) -> bool"""
        return _osg.GLBufferObject_isDirty(self)

    def dirty(self):
        """dirty(self)"""
        return _osg.GLBufferObject_dirty(self)

    def clear(self):
        """clear(self)"""
        return _osg.GLBufferObject_clear(self)

    def compileBuffer(self):
        """compileBuffer(self)"""
        return _osg.GLBufferObject_compileBuffer(self)

    def deleteGLObject(self):
        """deleteGLObject(self)"""
        return _osg.GLBufferObject_deleteGLObject(self)

    def assign(self, *args):
        """assign(self, BufferObject bufferObject)"""
        return _osg.GLBufferObject_assign(self, *args)

    def isPBOSupported(self):
        """isPBOSupported(self) -> bool"""
        return _osg.GLBufferObject_isPBOSupported(self)

    def createGLBufferObject(*args):
        """createGLBufferObject(unsigned int contextID, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObject_createGLBufferObject(*args)

    if _newclass:createGLBufferObject = staticmethod(createGLBufferObject)
    __swig_getmethods__["createGLBufferObject"] = lambda x: createGLBufferObject
    def deleteAllBufferObjects(*args):
        """deleteAllBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_deleteAllBufferObjects(*args)

    if _newclass:deleteAllBufferObjects = staticmethod(deleteAllBufferObjects)
    __swig_getmethods__["deleteAllBufferObjects"] = lambda x: deleteAllBufferObjects
    def discardAllBufferObjects(*args):
        """discardAllBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_discardAllBufferObjects(*args)

    if _newclass:discardAllBufferObjects = staticmethod(discardAllBufferObjects)
    __swig_getmethods__["discardAllBufferObjects"] = lambda x: discardAllBufferObjects
    def flushAllDeletedBufferObjects(*args):
        """flushAllDeletedBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_flushAllDeletedBufferObjects(*args)

    if _newclass:flushAllDeletedBufferObjects = staticmethod(flushAllDeletedBufferObjects)
    __swig_getmethods__["flushAllDeletedBufferObjects"] = lambda x: flushAllDeletedBufferObjects
    def discardAllDeletedBufferObjects(*args):
        """discardAllDeletedBufferObjects(unsigned int contextID)"""
        return _osg.GLBufferObject_discardAllDeletedBufferObjects(*args)

    if _newclass:discardAllDeletedBufferObjects = staticmethod(discardAllDeletedBufferObjects)
    __swig_getmethods__["discardAllDeletedBufferObjects"] = lambda x: discardAllDeletedBufferObjects
    def flushDeletedBufferObjects(*args):
        """flushDeletedBufferObjects(unsigned int contextID, double currentTime, double availbleTime)"""
        return _osg.GLBufferObject_flushDeletedBufferObjects(*args)

    if _newclass:flushDeletedBufferObjects = staticmethod(flushDeletedBufferObjects)
    __swig_getmethods__["flushDeletedBufferObjects"] = lambda x: flushDeletedBufferObjects
    def releaseGLBufferObject(*args):
        """releaseGLBufferObject(unsigned int contextID, GLBufferObject to)"""
        return _osg.GLBufferObject_releaseGLBufferObject(*args)

    if _newclass:releaseGLBufferObject = staticmethod(releaseGLBufferObject)
    __swig_getmethods__["releaseGLBufferObject"] = lambda x: releaseGLBufferObject
    __swig_setmethods__["_set"] = _osg.GLBufferObject__set_set
    __swig_getmethods__["_set"] = _osg.GLBufferObject__set_get
    if _newclass:_set = _swig_property(_osg.GLBufferObject__set_get, _osg.GLBufferObject__set_set)
    __swig_setmethods__["_previous"] = _osg.GLBufferObject__previous_set
    __swig_getmethods__["_previous"] = _osg.GLBufferObject__previous_get
    if _newclass:_previous = _swig_property(_osg.GLBufferObject__previous_get, _osg.GLBufferObject__previous_set)
    __swig_setmethods__["_next"] = _osg.GLBufferObject__next_set
    __swig_getmethods__["_next"] = _osg.GLBufferObject__next_get
    if _newclass:_next = _swig_property(_osg.GLBufferObject__next_get, _osg.GLBufferObject__next_set)
    __swig_setmethods__["_frameLastUsed"] = _osg.GLBufferObject__frameLastUsed_set
    __swig_getmethods__["_frameLastUsed"] = _osg.GLBufferObject__frameLastUsed_get
    if _newclass:_frameLastUsed = _swig_property(_osg.GLBufferObject__frameLastUsed_get, _osg.GLBufferObject__frameLastUsed_set)
GLBufferObject_swigregister = _osg.GLBufferObject_swigregister
GLBufferObject_swigregister(GLBufferObject)

def GLBufferObject_createGLBufferObject(*args):
  """GLBufferObject_createGLBufferObject(unsigned int contextID, BufferObject bufferObject) -> GLBufferObject"""
  return _osg.GLBufferObject_createGLBufferObject(*args)

def GLBufferObject_deleteAllBufferObjects(*args):
  """GLBufferObject_deleteAllBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_deleteAllBufferObjects(*args)

def GLBufferObject_discardAllBufferObjects(*args):
  """GLBufferObject_discardAllBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_discardAllBufferObjects(*args)

def GLBufferObject_flushAllDeletedBufferObjects(*args):
  """GLBufferObject_flushAllDeletedBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_flushAllDeletedBufferObjects(*args)

def GLBufferObject_discardAllDeletedBufferObjects(*args):
  """GLBufferObject_discardAllDeletedBufferObjects(unsigned int contextID)"""
  return _osg.GLBufferObject_discardAllDeletedBufferObjects(*args)

def GLBufferObject_flushDeletedBufferObjects(*args):
  """GLBufferObject_flushDeletedBufferObjects(unsigned int contextID, double currentTime, double availbleTime)"""
  return _osg.GLBufferObject_flushDeletedBufferObjects(*args)

def GLBufferObject_releaseGLBufferObject(*args):
  """GLBufferObject_releaseGLBufferObject(unsigned int contextID, GLBufferObject to)"""
  return _osg.GLBufferObject_releaseGLBufferObject(*args)

class GLBufferObjectSet(Referenced):
    """Proxy of C++ osg::GLBufferObjectSet class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBufferObjectSet, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLBufferObjectSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, GLBufferObjectManager parent, BufferObjectProfile profile) -> GLBufferObjectSet"""
        this = _osg.new_GLBufferObjectSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def getProfile(self):
        """getProfile(self) -> BufferObjectProfile"""
        return _osg.GLBufferObjectSet_getProfile(self)

    def handlePendingOrphandedGLBufferObjects(self):
        """handlePendingOrphandedGLBufferObjects(self)"""
        return _osg.GLBufferObjectSet_handlePendingOrphandedGLBufferObjects(self)

    def deleteAllGLBufferObjects(self):
        """deleteAllGLBufferObjects(self)"""
        return _osg.GLBufferObjectSet_deleteAllGLBufferObjects(self)

    def discardAllGLBufferObjects(self):
        """discardAllGLBufferObjects(self)"""
        return _osg.GLBufferObjectSet_discardAllGLBufferObjects(self)

    def flushAllDeletedGLBufferObjects(self):
        """flushAllDeletedGLBufferObjects(self)"""
        return _osg.GLBufferObjectSet_flushAllDeletedGLBufferObjects(self)

    def discardAllDeletedGLBufferObjects(self):
        """discardAllDeletedGLBufferObjects(self)"""
        return _osg.GLBufferObjectSet_discardAllDeletedGLBufferObjects(self)

    def flushDeletedGLBufferObjects(self, *args):
        """flushDeletedGLBufferObjects(self, double currentTime, double availableTime)"""
        return _osg.GLBufferObjectSet_flushDeletedGLBufferObjects(self, *args)

    def takeFromOrphans(self, *args):
        """takeFromOrphans(self, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObjectSet_takeFromOrphans(self, *args)

    def takeOrGenerate(self, *args):
        """takeOrGenerate(self, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObjectSet_takeOrGenerate(self, *args)

    def moveToBack(self, *args):
        """moveToBack(self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_moveToBack(self, *args)

    def addToBack(self, *args):
        """addToBack(self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_addToBack(self, *args)

    def orphan(self, *args):
        """orphan(self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_orphan(self, *args)

    def remove(self, *args):
        """remove(self, GLBufferObject to)"""
        return _osg.GLBufferObjectSet_remove(self, *args)

    def moveToSet(self, *args):
        """moveToSet(self, GLBufferObject to, GLBufferObjectSet set)"""
        return _osg.GLBufferObjectSet_moveToSet(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _osg.GLBufferObjectSet_size(self)

    def makeSpace(self, *args):
        """makeSpace(self, unsigned int size) -> bool"""
        return _osg.GLBufferObjectSet_makeSpace(self, *args)

    def checkConsistency(self):
        """checkConsistency(self) -> bool"""
        return _osg.GLBufferObjectSet_checkConsistency(self)

    def getParent(self):
        """getParent(self) -> GLBufferObjectManager"""
        return _osg.GLBufferObjectSet_getParent(self)

    def computeNumGLBufferObjectsInList(self):
        """computeNumGLBufferObjectsInList(self) -> unsigned int"""
        return _osg.GLBufferObjectSet_computeNumGLBufferObjectsInList(self)

    def getNumOfGLBufferObjects(self):
        """getNumOfGLBufferObjects(self) -> unsigned int"""
        return _osg.GLBufferObjectSet_getNumOfGLBufferObjects(self)

    def getNumOrphans(self):
        """getNumOrphans(self) -> unsigned int"""
        return _osg.GLBufferObjectSet_getNumOrphans(self)

    def getNumPendingOrphans(self):
        """getNumPendingOrphans(self) -> unsigned int"""
        return _osg.GLBufferObjectSet_getNumPendingOrphans(self)

GLBufferObjectSet_swigregister = _osg.GLBufferObjectSet_swigregister
GLBufferObjectSet_swigregister(GLBufferObjectSet)

class GLBufferObjectManager(Referenced):
    """Proxy of C++ osg::GLBufferObjectManager class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBufferObjectManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLBufferObjectManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, unsigned int contextID) -> GLBufferObjectManager"""
        this = _osg.new_GLBufferObjectManager(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContextID(self):
        """getContextID(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getContextID(self)

    def setNumberActiveGLBufferObjects(self, *args):
        """setNumberActiveGLBufferObjects(self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setNumberActiveGLBufferObjects(self, *args)

    def getNumberActiveGLBufferObjects(self, *args):
        """
        getNumberActiveGLBufferObjects(self) -> unsigned int
        getNumberActiveGLBufferObjects(self) -> unsigned int
        """
        return _osg.GLBufferObjectManager_getNumberActiveGLBufferObjects(self, *args)

    def setNumberOrphanedGLBufferObjects(self, *args):
        """setNumberOrphanedGLBufferObjects(self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setNumberOrphanedGLBufferObjects(self, *args)

    def getNumberOrphanedGLBufferObjects(self, *args):
        """
        getNumberOrphanedGLBufferObjects(self) -> unsigned int
        getNumberOrphanedGLBufferObjects(self) -> unsigned int
        """
        return _osg.GLBufferObjectManager_getNumberOrphanedGLBufferObjects(self, *args)

    def setCurrGLBufferObjectPoolSize(self, *args):
        """setCurrGLBufferObjectPoolSize(self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setCurrGLBufferObjectPoolSize(self, *args)

    def getCurrGLBufferObjectPoolSize(self, *args):
        """
        getCurrGLBufferObjectPoolSize(self) -> unsigned int
        getCurrGLBufferObjectPoolSize(self) -> unsigned int
        """
        return _osg.GLBufferObjectManager_getCurrGLBufferObjectPoolSize(self, *args)

    def setMaxGLBufferObjectPoolSize(self, *args):
        """setMaxGLBufferObjectPoolSize(self, unsigned int size)"""
        return _osg.GLBufferObjectManager_setMaxGLBufferObjectPoolSize(self, *args)

    def getMaxGLBufferObjectPoolSize(self):
        """getMaxGLBufferObjectPoolSize(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getMaxGLBufferObjectPoolSize(self)

    def hasSpace(self, *args):
        """hasSpace(self, unsigned int size) -> bool"""
        return _osg.GLBufferObjectManager_hasSpace(self, *args)

    def makeSpace(self, *args):
        """makeSpace(self, unsigned int size) -> bool"""
        return _osg.GLBufferObjectManager_makeSpace(self, *args)

    def generateGLBufferObject(self, *args):
        """generateGLBufferObject(self, BufferObject bufferObject) -> GLBufferObject"""
        return _osg.GLBufferObjectManager_generateGLBufferObject(self, *args)

    def handlePendingOrphandedGLBufferObjects(self):
        """handlePendingOrphandedGLBufferObjects(self)"""
        return _osg.GLBufferObjectManager_handlePendingOrphandedGLBufferObjects(self)

    def deleteAllGLBufferObjects(self):
        """deleteAllGLBufferObjects(self)"""
        return _osg.GLBufferObjectManager_deleteAllGLBufferObjects(self)

    def discardAllGLBufferObjects(self):
        """discardAllGLBufferObjects(self)"""
        return _osg.GLBufferObjectManager_discardAllGLBufferObjects(self)

    def flushAllDeletedGLBufferObjects(self):
        """flushAllDeletedGLBufferObjects(self)"""
        return _osg.GLBufferObjectManager_flushAllDeletedGLBufferObjects(self)

    def discardAllDeletedGLBufferObjects(self):
        """discardAllDeletedGLBufferObjects(self)"""
        return _osg.GLBufferObjectManager_discardAllDeletedGLBufferObjects(self)

    def flushDeletedGLBufferObjects(self, *args):
        """flushDeletedGLBufferObjects(self, double currentTime, double availableTime)"""
        return _osg.GLBufferObjectManager_flushDeletedGLBufferObjects(self, *args)

    def releaseGLBufferObject(self, *args):
        """releaseGLBufferObject(self, GLBufferObject to)"""
        return _osg.GLBufferObjectManager_releaseGLBufferObject(self, *args)

    def getGLBufferObjectSet(self, *args):
        """getGLBufferObjectSet(self, BufferObjectProfile profile) -> GLBufferObjectSet"""
        return _osg.GLBufferObjectManager_getGLBufferObjectSet(self, *args)

    def newFrame(self, *args):
        """newFrame(self, FrameStamp fs)"""
        return _osg.GLBufferObjectManager_newFrame(self, *args)

    def resetStats(self):
        """resetStats(self)"""
        return _osg.GLBufferObjectManager_resetStats(self)

    def reportStats(self, *args):
        """reportStats(self, std::ostream out)"""
        return _osg.GLBufferObjectManager_reportStats(self, *args)

    def recomputeStats(self, *args):
        """recomputeStats(self, std::ostream out)"""
        return _osg.GLBufferObjectManager_recomputeStats(self, *args)

    def getFrameNumber(self):
        """getFrameNumber(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getFrameNumber(self)

    def getNumberFrames(self):
        """getNumberFrames(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getNumberFrames(self)

    def getNumberDeleted(self):
        """getNumberDeleted(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getNumberDeleted(self)

    def getDeleteTime(self):
        """getDeleteTime(self) -> double"""
        return _osg.GLBufferObjectManager_getDeleteTime(self)

    def getNumberGenerated(self):
        """getNumberGenerated(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getNumberGenerated(self)

    def getGenerateTime(self):
        """getGenerateTime(self) -> double"""
        return _osg.GLBufferObjectManager_getGenerateTime(self)

    def getNumberApplied(self):
        """getNumberApplied(self) -> unsigned int"""
        return _osg.GLBufferObjectManager_getNumberApplied(self)

    def getApplyTime(self):
        """getApplyTime(self) -> double"""
        return _osg.GLBufferObjectManager_getApplyTime(self)

    def getGLBufferObjectManager(*args):
        """getGLBufferObjectManager(unsigned int contextID) -> osg::ref_ptr<(osg::GLBufferObjectManager)>"""
        return _osg.GLBufferObjectManager_getGLBufferObjectManager(*args)

    if _newclass:getGLBufferObjectManager = staticmethod(getGLBufferObjectManager)
    __swig_getmethods__["getGLBufferObjectManager"] = lambda x: getGLBufferObjectManager
    __swig_destroy__ = _osg.delete_GLBufferObjectManager
    __del__ = lambda self : None;
GLBufferObjectManager_swigregister = _osg.GLBufferObjectManager_swigregister
GLBufferObjectManager_swigregister(GLBufferObjectManager)

def GLBufferObjectManager_getGLBufferObjectManager(*args):
  """GLBufferObjectManager_getGLBufferObjectManager(unsigned int contextID) -> osg::ref_ptr<(osg::GLBufferObjectManager)>"""
  return _osg.GLBufferObjectManager_getGLBufferObjectManager(*args)

class BufferObject(Object):
    """Proxy of C++ osg::BufferObject class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.BufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.BufferObject_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.BufferObject_className(self)

    def setTarget(self, *args):
        """setTarget(self, GLenum target)"""
        return _osg.BufferObject_setTarget(self, *args)

    def getTarget(self):
        """getTarget(self) -> GLenum"""
        return _osg.BufferObject_getTarget(self)

    def setUsage(self, *args):
        """setUsage(self, GLenum usage)"""
        return _osg.BufferObject_setUsage(self, *args)

    def getUsage(self):
        """getUsage(self) -> GLenum"""
        return _osg.BufferObject_getUsage(self)

    def getProfile(self, *args):
        """
        getProfile(self) -> BufferObjectProfile
        getProfile(self) -> BufferObjectProfile
        """
        return _osg.BufferObject_getProfile(self, *args)

    def setCopyDataAndReleaseGLBufferObject(self, *args):
        """setCopyDataAndReleaseGLBufferObject(self, bool copyAndRelease)"""
        return _osg.BufferObject_setCopyDataAndReleaseGLBufferObject(self, *args)

    def getCopyDataAndReleaseGLBufferObject(self):
        """getCopyDataAndReleaseGLBufferObject(self) -> bool"""
        return _osg.BufferObject_getCopyDataAndReleaseGLBufferObject(self)

    def dirty(self):
        """dirty(self)"""
        return _osg.BufferObject_dirty(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.BufferObject_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.BufferObject_releaseGLObjects(self, state)

    def addBufferData(self, *args):
        """addBufferData(self, BufferData bd) -> unsigned int"""
        return _osg.BufferObject_addBufferData(self, *args)

    def removeBufferData(self, *args):
        """
        removeBufferData(self, unsigned int index)
        removeBufferData(self, BufferData bd)
        """
        return _osg.BufferObject_removeBufferData(self, *args)

    def setBufferData(self, *args):
        """setBufferData(self, unsigned int index, BufferData bd)"""
        return _osg.BufferObject_setBufferData(self, *args)

    def getBufferData(self, *args):
        """
        getBufferData(self, unsigned int index) -> BufferData
        getBufferData(self, unsigned int index) -> BufferData
        """
        return _osg.BufferObject_getBufferData(self, *args)

    def getNumBufferData(self):
        """getNumBufferData(self) -> unsigned int"""
        return _osg.BufferObject_getNumBufferData(self)

    def setGLBufferObject(self, *args):
        """setGLBufferObject(self, unsigned int contextID, GLBufferObject glbo)"""
        return _osg.BufferObject_setGLBufferObject(self, *args)

    def getGLBufferObject(self, *args):
        """getGLBufferObject(self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferObject_getGLBufferObject(self, *args)

    def getOrCreateGLBufferObject(self, *args):
        """getOrCreateGLBufferObject(self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferObject_getOrCreateGLBufferObject(self, *args)

    def computeRequiredBufferSize(self):
        """computeRequiredBufferSize(self) -> unsigned int"""
        return _osg.BufferObject_computeRequiredBufferSize(self)

    def deleteBufferObject(*args):
        """deleteBufferObject(unsigned int contextID, GLuint globj)"""
        return _osg.BufferObject_deleteBufferObject(*args)

    if _newclass:deleteBufferObject = staticmethod(deleteBufferObject)
    __swig_getmethods__["deleteBufferObject"] = lambda x: deleteBufferObject
BufferObject_swigregister = _osg.BufferObject_swigregister
BufferObject_swigregister(BufferObject)

def BufferObject_deleteBufferObject(*args):
  """BufferObject_deleteBufferObject(unsigned int contextID, GLuint globj)"""
  return _osg.BufferObject_deleteBufferObject(*args)

class BufferData(Object):
    """Proxy of C++ osg::BufferData class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BufferData, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BufferData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.BufferData_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.BufferData_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.BufferData_className(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.BufferData_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.BufferData_getTotalDataSize(self)

    def setBufferObject(self, *args):
        """setBufferObject(self, BufferObject bufferObject)"""
        return _osg.BufferData_setBufferObject(self, *args)

    def getBufferObject(self, *args):
        """
        getBufferObject(self) -> BufferObject
        getBufferObject(self) -> BufferObject
        """
        return _osg.BufferData_getBufferObject(self, *args)

    def setBufferIndex(self, *args):
        """setBufferIndex(self, unsigned int index)"""
        return _osg.BufferData_setBufferIndex(self, *args)

    def getBufferIndex(self):
        """getBufferIndex(self) -> unsigned int"""
        return _osg.BufferData_getBufferIndex(self)

    def getGLBufferObject(self, *args):
        """getGLBufferObject(self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferData_getGLBufferObject(self, *args)

    def getOrCreateGLBufferObject(self, *args):
        """getOrCreateGLBufferObject(self, unsigned int contextID) -> GLBufferObject"""
        return _osg.BufferData_getOrCreateGLBufferObject(self, *args)

    def setModifiedCallback(self, *args):
        """setModifiedCallback(self, ModifiedCallback md)"""
        return _osg.BufferData_setModifiedCallback(self, *args)

    def getModifiedCallback(self, *args):
        """
        getModifiedCallback(self) -> ModifiedCallback
        getModifiedCallback(self) -> ModifiedCallback
        """
        return _osg.BufferData_getModifiedCallback(self, *args)

    def dirty(self):
        """dirty(self)"""
        return _osg.BufferData_dirty(self)

    def setModifiedCount(self, *args):
        """setModifiedCount(self, unsigned int value)"""
        return _osg.BufferData_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(self) -> unsigned int"""
        return _osg.BufferData_getModifiedCount(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.BufferData_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.BufferData_releaseGLObjects(self, state)

BufferData_swigregister = _osg.BufferData_swigregister
BufferData_swigregister(BufferData)

class VertexBufferObject(BufferObject):
    """Proxy of C++ osg::VertexBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VertexBufferObject
        __init__(self, VertexBufferObject vbo, CopyOp copyop = SHALLOW_COPY) -> VertexBufferObject
        __init__(self, VertexBufferObject vbo) -> VertexBufferObject
        """
        this = _osg.new_VertexBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.VertexBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.VertexBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.VertexBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.VertexBufferObject_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.VertexBufferObject_className(self)

    def addArray(self, *args):
        """addArray(self, Array array) -> unsigned int"""
        return _osg.VertexBufferObject_addArray(self, *args)

    def removeArray(self, *args):
        """removeArray(self, Array array)"""
        return _osg.VertexBufferObject_removeArray(self, *args)

    def setArray(self, *args):
        """setArray(self, unsigned int i, Array array)"""
        return _osg.VertexBufferObject_setArray(self, *args)

    def getArray(self, *args):
        """
        getArray(self, unsigned int i) -> Array
        getArray(self, unsigned int i) -> Array
        """
        return _osg.VertexBufferObject_getArray(self, *args)

VertexBufferObject_swigregister = _osg.VertexBufferObject_swigregister
VertexBufferObject_swigregister(VertexBufferObject)

class ElementBufferObject(BufferObject):
    """Proxy of C++ osg::ElementBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElementBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ElementBufferObject
        __init__(self, ElementBufferObject pbo, CopyOp copyop = SHALLOW_COPY) -> ElementBufferObject
        __init__(self, ElementBufferObject pbo) -> ElementBufferObject
        """
        this = _osg.new_ElementBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ElementBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ElementBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ElementBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ElementBufferObject_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ElementBufferObject_className(self)

    def addDrawElements(self, *args):
        """addDrawElements(self, DrawElements PrimitiveSet) -> unsigned int"""
        return _osg.ElementBufferObject_addDrawElements(self, *args)

    def removeDrawElements(self, *args):
        """removeDrawElements(self, DrawElements PrimitiveSet)"""
        return _osg.ElementBufferObject_removeDrawElements(self, *args)

    def setDrawElements(self, *args):
        """setDrawElements(self, unsigned int i, DrawElements PrimitiveSet)"""
        return _osg.ElementBufferObject_setDrawElements(self, *args)

    def getDrawElements(self, *args):
        """
        getDrawElements(self, unsigned int i) -> DrawElements
        getDrawElements(self, unsigned int i) -> DrawElements
        """
        return _osg.ElementBufferObject_getDrawElements(self, *args)

ElementBufferObject_swigregister = _osg.ElementBufferObject_swigregister
ElementBufferObject_swigregister(ElementBufferObject)

class PixelBufferObject(BufferObject):
    """Proxy of C++ osg::PixelBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Image image = None) -> PixelBufferObject
        __init__(self) -> PixelBufferObject
        __init__(self, PixelBufferObject pbo, CopyOp copyop = SHALLOW_COPY) -> PixelBufferObject
        __init__(self, PixelBufferObject pbo) -> PixelBufferObject
        """
        this = _osg.new_PixelBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PixelBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PixelBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PixelBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PixelBufferObject_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.PixelBufferObject_className(self)

    def setImage(self, *args):
        """setImage(self, Image image)"""
        return _osg.PixelBufferObject_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self) -> Image
        getImage(self) -> Image
        """
        return _osg.PixelBufferObject_getImage(self, *args)

    def isPBOSupported(self, *args):
        """isPBOSupported(self, unsigned int contextID) -> bool"""
        return _osg.PixelBufferObject_isPBOSupported(self, *args)

PixelBufferObject_swigregister = _osg.PixelBufferObject_swigregister
PixelBufferObject_swigregister(PixelBufferObject)

class PixelDataBufferObject(BufferObject):
    """Proxy of C++ osg::PixelDataBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelDataBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelDataBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PixelDataBufferObject
        __init__(self, PixelDataBufferObject pbo, CopyOp copyop = SHALLOW_COPY) -> PixelDataBufferObject
        __init__(self, PixelDataBufferObject pbo) -> PixelDataBufferObject
        """
        this = _osg.new_PixelDataBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PixelDataBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PixelDataBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PixelDataBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PixelDataBufferObject_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.PixelDataBufferObject_className(self)

    def setDataSize(self, *args):
        """setDataSize(self, unsigned int size)"""
        return _osg.PixelDataBufferObject_setDataSize(self, *args)

    def getDataSize(self):
        """getDataSize(self) -> unsigned int"""
        return _osg.PixelDataBufferObject_getDataSize(self)

    def compileBuffer(self, *args):
        """compileBuffer(self, State state)"""
        return _osg.PixelDataBufferObject_compileBuffer(self, *args)

    def bindBufferInReadMode(self, *args):
        """bindBufferInReadMode(self, State state)"""
        return _osg.PixelDataBufferObject_bindBufferInReadMode(self, *args)

    def bindBufferInWriteMode(self, *args):
        """bindBufferInWriteMode(self, State state)"""
        return _osg.PixelDataBufferObject_bindBufferInWriteMode(self, *args)

    def unbindBuffer(self, *args):
        """unbindBuffer(self, unsigned int contextID)"""
        return _osg.PixelDataBufferObject_unbindBuffer(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.PixelDataBufferObject_resizeGLObjectBuffers(self, *args)

    NONE = _osg.PixelDataBufferObject_NONE
    READ = _osg.PixelDataBufferObject_READ
    WRITE = _osg.PixelDataBufferObject_WRITE
    def getMode(self, *args):
        """getMode(self, unsigned int contextID) -> Mode"""
        return _osg.PixelDataBufferObject_getMode(self, *args)

PixelDataBufferObject_swigregister = _osg.PixelDataBufferObject_swigregister
PixelDataBufferObject_swigregister(PixelDataBufferObject)

class UniformBufferObject(BufferObject):
    """Proxy of C++ osg::UniformBufferObject class"""
    __swig_setmethods__ = {}
    for _s in [BufferObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformBufferObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformBufferObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UniformBufferObject
        __init__(self, UniformBufferObject ubo, CopyOp copyop = SHALLOW_COPY) -> UniformBufferObject
        __init__(self, UniformBufferObject ubo) -> UniformBufferObject
        """
        this = _osg.new_UniformBufferObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.UniformBufferObject_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.UniformBufferObject_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.UniformBufferObject_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.UniformBufferObject_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.UniformBufferObject_className(self)

UniformBufferObject_swigregister = _osg.UniformBufferObject_swigregister
UniformBufferObject_swigregister(UniformBufferObject)

OSG_IMAGE = _osg.OSG_IMAGE
GL_BGR = _osg.GL_BGR
GL_BGRA = _osg.GL_BGRA
GL_UNSIGNED_BYTE_3_3_2 = _osg.GL_UNSIGNED_BYTE_3_3_2
GL_UNSIGNED_BYTE_2_3_3_REV = _osg.GL_UNSIGNED_BYTE_2_3_3_REV
GL_UNSIGNED_SHORT_5_6_5 = _osg.GL_UNSIGNED_SHORT_5_6_5
GL_UNSIGNED_SHORT_5_6_5_REV = _osg.GL_UNSIGNED_SHORT_5_6_5_REV
GL_UNSIGNED_SHORT_4_4_4_4 = _osg.GL_UNSIGNED_SHORT_4_4_4_4
GL_UNSIGNED_SHORT_4_4_4_4_REV = _osg.GL_UNSIGNED_SHORT_4_4_4_4_REV
GL_UNSIGNED_SHORT_5_5_5_1 = _osg.GL_UNSIGNED_SHORT_5_5_5_1
GL_UNSIGNED_SHORT_1_5_5_5_REV = _osg.GL_UNSIGNED_SHORT_1_5_5_5_REV
GL_UNSIGNED_INT_8_8_8_8 = _osg.GL_UNSIGNED_INT_8_8_8_8
GL_UNSIGNED_INT_8_8_8_8_REV = _osg.GL_UNSIGNED_INT_8_8_8_8_REV
GL_UNSIGNED_INT_10_10_10_2 = _osg.GL_UNSIGNED_INT_10_10_10_2
GL_UNSIGNED_INT_2_10_10_10_REV = _osg.GL_UNSIGNED_INT_2_10_10_10_REV
GL_COMPRESSED_ALPHA = _osg.GL_COMPRESSED_ALPHA
GL_COMPRESSED_LUMINANCE = _osg.GL_COMPRESSED_LUMINANCE
GL_COMPRESSED_LUMINANCE_ALPHA = _osg.GL_COMPRESSED_LUMINANCE_ALPHA
GL_COMPRESSED_INTENSITY = _osg.GL_COMPRESSED_INTENSITY
GL_COMPRESSED_RGB = _osg.GL_COMPRESSED_RGB
GL_COMPRESSED_RGBA = _osg.GL_COMPRESSED_RGBA
GL_ABGR_EXT = _osg.GL_ABGR_EXT
GL_PACK_SKIP_IMAGES = _osg.GL_PACK_SKIP_IMAGES
GL_PACK_IMAGE_HEIGHT = _osg.GL_PACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = _osg.GL_UNPACK_SKIP_IMAGES
GL_UNPACK_IMAGE_HEIGHT = _osg.GL_UNPACK_IMAGE_HEIGHT
class Image(BufferData):
    """Proxy of C++ osg::Image class"""
    __swig_setmethods__ = {}
    for _s in [BufferData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Image
        __init__(self, Image image, CopyOp copyop = SHALLOW_COPY) -> Image
        __init__(self, Image image) -> Image
        """
        this = _osg.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Image_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Image_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Image_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Image_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Image_className(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Image_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Image_getTotalDataSize(self)

    def compare(self, *args):
        """compare(self, Image rhs) -> int"""
        return _osg.Image_compare(self, *args)

    def setFileName(self, *args):
        """setFileName(self, string fileName)"""
        return _osg.Image_setFileName(self, *args)

    def getFileName(self):
        """getFileName(self) -> string"""
        return _osg.Image_getFileName(self)

    NO_PREFERENCE = _osg.Image_NO_PREFERENCE
    STORE_INLINE = _osg.Image_STORE_INLINE
    EXTERNAL_FILE = _osg.Image_EXTERNAL_FILE
    def setWriteHint(self, *args):
        """setWriteHint(self, WriteHint writeHint)"""
        return _osg.Image_setWriteHint(self, *args)

    def getWriteHint(self):
        """getWriteHint(self) -> WriteHint"""
        return _osg.Image_getWriteHint(self)

    NO_DELETE = _osg.Image_NO_DELETE
    USE_NEW_DELETE = _osg.Image_USE_NEW_DELETE
    USE_MALLOC_FREE = _osg.Image_USE_MALLOC_FREE
    def setAllocationMode(self, *args):
        """setAllocationMode(self, AllocationMode mode)"""
        return _osg.Image_setAllocationMode(self, *args)

    def getAllocationMode(self):
        """getAllocationMode(self) -> AllocationMode"""
        return _osg.Image_getAllocationMode(self)

    def allocateImage(self, *args):
        """
        allocateImage(self, int s, int t, int r, GLenum pixelFormat, GLenum type, 
            int packing = 1)
        allocateImage(self, int s, int t, int r, GLenum pixelFormat, GLenum type)
        """
        return _osg.Image_allocateImage(self, *args)

    def setImage(self, *args):
        """
        setImage(self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, 
            GLenum type, unsigned char data, 
            AllocationMode mode, int packing = 1)
        setImage(self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, 
            GLenum type, unsigned char data, 
            AllocationMode mode)
        """
        return _osg.Image_setImage(self, *args)

    def readPixels(self, *args):
        """
        readPixels(self, int x, int y, int width, int height, GLenum pixelFormat, 
            GLenum type)
        """
        return _osg.Image_readPixels(self, *args)

    def readImageFromCurrentTexture(self, *args):
        """
        readImageFromCurrentTexture(self, unsigned int contextID, bool copyMipMapsIfAvailable, 
            GLenum type = 0x1401)
        readImageFromCurrentTexture(self, unsigned int contextID, bool copyMipMapsIfAvailable)
        """
        return _osg.Image_readImageFromCurrentTexture(self, *args)

    def scaleImage(self, *args):
        """
        scaleImage(self, int s, int t, int r)
        scaleImage(self, int s, int t, int r, GLenum newDataType)
        """
        return _osg.Image_scaleImage(self, *args)

    def copySubImage(self, *args):
        """copySubImage(self, int s_offset, int t_offset, int r_offset, Image source)"""
        return _osg.Image_copySubImage(self, *args)

    BOTTOM_LEFT = _osg.Image_BOTTOM_LEFT
    TOP_LEFT = _osg.Image_TOP_LEFT
    def setOrigin(self, *args):
        """setOrigin(self, Origin origin)"""
        return _osg.Image_setOrigin(self, *args)

    def getOrigin(self):
        """getOrigin(self) -> Origin"""
        return _osg.Image_getOrigin(self)

    def s(self):
        """s(self) -> int"""
        return _osg.Image_s(self)

    def t(self):
        """t(self) -> int"""
        return _osg.Image_t(self)

    def r(self):
        """r(self) -> int"""
        return _osg.Image_r(self)

    def setInternalTextureFormat(self, *args):
        """setInternalTextureFormat(self, GLint internalFormat)"""
        return _osg.Image_setInternalTextureFormat(self, *args)

    def getInternalTextureFormat(self):
        """getInternalTextureFormat(self) -> GLint"""
        return _osg.Image_getInternalTextureFormat(self)

    def setPixelFormat(self, *args):
        """setPixelFormat(self, GLenum pixelFormat)"""
        return _osg.Image_setPixelFormat(self, *args)

    def getPixelFormat(self):
        """getPixelFormat(self) -> GLenum"""
        return _osg.Image_getPixelFormat(self)

    def setDataType(self, *args):
        """setDataType(self, GLenum dataType)"""
        return _osg.Image_setDataType(self, *args)

    def getDataType(self):
        """getDataType(self) -> GLenum"""
        return _osg.Image_getDataType(self)

    def setPacking(self, *args):
        """setPacking(self, unsigned int packing)"""
        return _osg.Image_setPacking(self, *args)

    def getPacking(self):
        """getPacking(self) -> unsigned int"""
        return _osg.Image_getPacking(self)

    def isCompressed(self):
        """isCompressed(self) -> bool"""
        return _osg.Image_isCompressed(self)

    def setPixelAspectRatio(self, *args):
        """setPixelAspectRatio(self, float pixelAspectRatio)"""
        return _osg.Image_setPixelAspectRatio(self, *args)

    def getPixelAspectRatio(self):
        """getPixelAspectRatio(self) -> float"""
        return _osg.Image_getPixelAspectRatio(self)

    def getPixelSizeInBits(self):
        """getPixelSizeInBits(self) -> unsigned int"""
        return _osg.Image_getPixelSizeInBits(self)

    def getRowSizeInBytes(self):
        """getRowSizeInBytes(self) -> unsigned int"""
        return _osg.Image_getRowSizeInBytes(self)

    def getImageSizeInBytes(self):
        """getImageSizeInBytes(self) -> unsigned int"""
        return _osg.Image_getImageSizeInBytes(self)

    def getTotalSizeInBytes(self):
        """getTotalSizeInBytes(self) -> unsigned int"""
        return _osg.Image_getTotalSizeInBytes(self)

    def getTotalSizeInBytesIncludingMipmaps(self):
        """getTotalSizeInBytesIncludingMipmaps(self) -> unsigned int"""
        return _osg.Image_getTotalSizeInBytesIncludingMipmaps(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Image_valid(self)

    def data(self, *args):
        """
        data(self) -> unsigned char
        data(self) -> unsigned char
        data(self, int column, int row = 0, int image = 0) -> unsigned char
        data(self, int column, int row = 0) -> unsigned char
        data(self, int column) -> unsigned char
        data(self, int column, int row = 0, int image = 0) -> unsigned char
        data(self, int column, int row = 0) -> unsigned char
        data(self, int column) -> unsigned char
        """
        return _osg.Image_data(self, *args)

    def getColor(self, *args):
        """
        getColor(self, unsigned int s, unsigned int t = 0, unsigned int r = 0) -> Vec4
        getColor(self, unsigned int s, unsigned int t = 0) -> Vec4
        getColor(self, unsigned int s) -> Vec4
        getColor(self, Vec2 texcoord) -> Vec4
        getColor(self, Vec3 texcoord) -> Vec4
        """
        return _osg.Image_getColor(self, *args)

    def flipHorizontal(self):
        """flipHorizontal(self)"""
        return _osg.Image_flipHorizontal(self)

    def flipVertical(self):
        """flipVertical(self)"""
        return _osg.Image_flipVertical(self)

    def ensureValidSizeForTexturing(self, *args):
        """ensureValidSizeForTexturing(self, GLint maxTextureSize)"""
        return _osg.Image_ensureValidSizeForTexturing(self, *args)

    def isPackedType(*args):
        """isPackedType(GLenum type) -> bool"""
        return _osg.Image_isPackedType(*args)

    if _newclass:isPackedType = staticmethod(isPackedType)
    __swig_getmethods__["isPackedType"] = lambda x: isPackedType
    def computePixelFormat(*args):
        """computePixelFormat(GLenum pixelFormat) -> GLenum"""
        return _osg.Image_computePixelFormat(*args)

    if _newclass:computePixelFormat = staticmethod(computePixelFormat)
    __swig_getmethods__["computePixelFormat"] = lambda x: computePixelFormat
    def computeFormatDataType(*args):
        """computeFormatDataType(GLenum pixelFormat) -> GLenum"""
        return _osg.Image_computeFormatDataType(*args)

    if _newclass:computeFormatDataType = staticmethod(computeFormatDataType)
    __swig_getmethods__["computeFormatDataType"] = lambda x: computeFormatDataType
    def computeNumComponents(*args):
        """computeNumComponents(GLenum pixelFormat) -> unsigned int"""
        return _osg.Image_computeNumComponents(*args)

    if _newclass:computeNumComponents = staticmethod(computeNumComponents)
    __swig_getmethods__["computeNumComponents"] = lambda x: computeNumComponents
    def computePixelSizeInBits(*args):
        """computePixelSizeInBits(GLenum pixelFormat, GLenum type) -> unsigned int"""
        return _osg.Image_computePixelSizeInBits(*args)

    if _newclass:computePixelSizeInBits = staticmethod(computePixelSizeInBits)
    __swig_getmethods__["computePixelSizeInBits"] = lambda x: computePixelSizeInBits
    def computeRowWidthInBytes(*args):
        """computeRowWidthInBytes(int width, GLenum pixelFormat, GLenum type, int packing) -> unsigned int"""
        return _osg.Image_computeRowWidthInBytes(*args)

    if _newclass:computeRowWidthInBytes = staticmethod(computeRowWidthInBytes)
    __swig_getmethods__["computeRowWidthInBytes"] = lambda x: computeRowWidthInBytes
    def computeNearestPowerOfTwo(*args):
        """
        computeNearestPowerOfTwo(int s, float bias = 0.5) -> int
        computeNearestPowerOfTwo(int s) -> int
        """
        return _osg.Image_computeNearestPowerOfTwo(*args)

    if _newclass:computeNearestPowerOfTwo = staticmethod(computeNearestPowerOfTwo)
    __swig_getmethods__["computeNearestPowerOfTwo"] = lambda x: computeNearestPowerOfTwo
    def computeNumberOfMipmapLevels(*args):
        """
        computeNumberOfMipmapLevels(int s, int t = 1, int r = 1) -> int
        computeNumberOfMipmapLevels(int s, int t = 1) -> int
        computeNumberOfMipmapLevels(int s) -> int
        """
        return _osg.Image_computeNumberOfMipmapLevels(*args)

    if _newclass:computeNumberOfMipmapLevels = staticmethod(computeNumberOfMipmapLevels)
    __swig_getmethods__["computeNumberOfMipmapLevels"] = lambda x: computeNumberOfMipmapLevels
    def isMipmap(self):
        """isMipmap(self) -> bool"""
        return _osg.Image_isMipmap(self)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(self) -> unsigned int"""
        return _osg.Image_getNumMipmapLevels(self)

    def setMipmapLevels(self, *args):
        """setMipmapLevels(self, MipmapDataType mipmapDataVector)"""
        return _osg.Image_setMipmapLevels(self, *args)

    def getMipmapLevels(self):
        """getMipmapLevels(self) -> MipmapDataType"""
        return _osg.Image_getMipmapLevels(self)

    def getMipmapOffset(self, *args):
        """getMipmapOffset(self, unsigned int mipmapLevel) -> unsigned int"""
        return _osg.Image_getMipmapOffset(self, *args)

    def getMipmapData(self, *args):
        """
        getMipmapData(self, unsigned int mipmapLevel) -> unsigned char
        getMipmapData(self, unsigned int mipmapLevel) -> unsigned char
        """
        return _osg.Image_getMipmapData(self, *args)

    def isImageTranslucent(self):
        """isImageTranslucent(self) -> bool"""
        return _osg.Image_isImageTranslucent(self)

    def setPixelBufferObject(self, *args):
        """setPixelBufferObject(self, PixelBufferObject buffer)"""
        return _osg.Image_setPixelBufferObject(self, *args)

    def getPixelBufferObject(self, *args):
        """
        getPixelBufferObject(self) -> PixelBufferObject
        getPixelBufferObject(self) -> PixelBufferObject
        """
        return _osg.Image_getPixelBufferObject(self, *args)

    def requiresUpdateCall(self):
        """requiresUpdateCall(self) -> bool"""
        return _osg.Image_requiresUpdateCall(self)

    def update(self, *args):
        """update(self, NodeVisitor arg0)"""
        return _osg.Image_update(self, *args)

    def sendFocusHint(self, *args):
        """sendFocusHint(self, bool arg0) -> bool"""
        return _osg.Image_sendFocusHint(self, *args)

    def sendPointerEvent(self, *args):
        """sendPointerEvent(self, int arg0, int arg1, int arg2) -> bool"""
        return _osg.Image_sendPointerEvent(self, *args)

    def sendKeyEvent(self, *args):
        """sendKeyEvent(self, int arg0, bool arg1) -> bool"""
        return _osg.Image_sendKeyEvent(self, *args)

    def setFrameLastRendered(self, *args):
        """setFrameLastRendered(self, FrameStamp arg0)"""
        return _osg.Image_setFrameLastRendered(self, *args)

Image_swigregister = _osg.Image_swigregister
Image_swigregister(Image)

def Image_isPackedType(*args):
  """Image_isPackedType(GLenum type) -> bool"""
  return _osg.Image_isPackedType(*args)

def Image_computePixelFormat(*args):
  """Image_computePixelFormat(GLenum pixelFormat) -> GLenum"""
  return _osg.Image_computePixelFormat(*args)

def Image_computeFormatDataType(*args):
  """Image_computeFormatDataType(GLenum pixelFormat) -> GLenum"""
  return _osg.Image_computeFormatDataType(*args)

def Image_computeNumComponents(*args):
  """Image_computeNumComponents(GLenum pixelFormat) -> unsigned int"""
  return _osg.Image_computeNumComponents(*args)

def Image_computePixelSizeInBits(*args):
  """Image_computePixelSizeInBits(GLenum pixelFormat, GLenum type) -> unsigned int"""
  return _osg.Image_computePixelSizeInBits(*args)

def Image_computeRowWidthInBytes(*args):
  """Image_computeRowWidthInBytes(int width, GLenum pixelFormat, GLenum type, int packing) -> unsigned int"""
  return _osg.Image_computeRowWidthInBytes(*args)

def Image_computeNearestPowerOfTwo(*args):
  """
    computeNearestPowerOfTwo(int s, float bias = 0.5) -> int
    Image_computeNearestPowerOfTwo(int s) -> int
    """
  return _osg.Image_computeNearestPowerOfTwo(*args)

def Image_computeNumberOfMipmapLevels(*args):
  """
    computeNumberOfMipmapLevels(int s, int t = 1, int r = 1) -> int
    computeNumberOfMipmapLevels(int s, int t = 1) -> int
    Image_computeNumberOfMipmapLevels(int s) -> int
    """
  return _osg.Image_computeNumberOfMipmapLevels(*args)

OSG_IMAGESTREAM = _osg.OSG_IMAGESTREAM
class ImageStream(Image):
    """Proxy of C++ osg::ImageStream class"""
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageStream
        __init__(self, ImageStream image, CopyOp copyop = SHALLOW_COPY) -> ImageStream
        __init__(self, ImageStream image) -> ImageStream
        """
        this = _osg.new_ImageStream(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ImageStream_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ImageStream_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ImageStream_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ImageStream_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ImageStream_className(self)

    def compare(self, *args):
        """compare(self, Image rhs) -> int"""
        return _osg.ImageStream_compare(self, *args)

    INVALID = _osg.ImageStream_INVALID
    PLAYING = _osg.ImageStream_PLAYING
    PAUSED = _osg.ImageStream_PAUSED
    REWINDING = _osg.ImageStream_REWINDING
    def seek(self, *args):
        """seek(self, double arg0)"""
        return _osg.ImageStream_seek(self, *args)

    def play(self):
        """play(self)"""
        return _osg.ImageStream_play(self)

    def pause(self):
        """pause(self)"""
        return _osg.ImageStream_pause(self)

    def rewind(self):
        """rewind(self)"""
        return _osg.ImageStream_rewind(self)

    def quit(self, arg0 = True):
        """
        quit(self, bool arg0 = True)
        quit(self)
        """
        return _osg.ImageStream_quit(self, arg0)

    def getStatus(self):
        """getStatus(self) -> StreamStatus"""
        return _osg.ImageStream_getStatus(self)

    NO_LOOPING = _osg.ImageStream_NO_LOOPING
    LOOPING = _osg.ImageStream_LOOPING
    def setLoopingMode(self, *args):
        """setLoopingMode(self, LoopingMode mode)"""
        return _osg.ImageStream_setLoopingMode(self, *args)

    def getLoopingMode(self):
        """getLoopingMode(self) -> LoopingMode"""
        return _osg.ImageStream_getLoopingMode(self)

    def getCreationTime(self):
        """getCreationTime(self) -> double"""
        return _osg.ImageStream_getCreationTime(self)

    def getLength(self):
        """getLength(self) -> double"""
        return _osg.ImageStream_getLength(self)

    def getFrameRate(self):
        """getFrameRate(self) -> double"""
        return _osg.ImageStream_getFrameRate(self)

    def setReferenceTime(self, *args):
        """setReferenceTime(self, double arg0)"""
        return _osg.ImageStream_setReferenceTime(self, *args)

    def getReferenceTime(self):
        """getReferenceTime(self) -> double"""
        return _osg.ImageStream_getReferenceTime(self)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(self, double arg0)"""
        return _osg.ImageStream_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(self) -> double"""
        return _osg.ImageStream_getTimeMultiplier(self)

    def setVolume(self, *args):
        """setVolume(self, float arg0)"""
        return _osg.ImageStream_setVolume(self, *args)

    def getVolume(self):
        """getVolume(self) -> float"""
        return _osg.ImageStream_getVolume(self)

    def setAudioStreams(self, *args):
        """setAudioStreams(self, AudioStreams asl)"""
        return _osg.ImageStream_setAudioStreams(self, *args)

    def getAudioStreams(self, *args):
        """
        getAudioStreams(self) -> AudioStreams
        getAudioStreams(self) -> AudioStreams
        """
        return _osg.ImageStream_getAudioStreams(self, *args)

ImageStream_swigregister = _osg.ImageStream_swigregister
ImageStream_swigregister(ImageStream)

def createGeodeForImage(*args):
  """
    createGeodeForImage(Image image) -> Geode
    createGeodeForImage(Image image, float s, float t) -> Geode
    """
  return _osg.createGeodeForImage(*args)

OSG_IMAGESEQUENCE = _osg.OSG_IMAGESEQUENCE
class ImageSequence(ImageStream):
    """Proxy of C++ osg::ImageSequence class"""
    __swig_setmethods__ = {}
    for _s in [ImageStream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSequence, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageStream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageSequence
        __init__(self, ImageSequence ImageSequence, CopyOp copyop = SHALLOW_COPY) -> ImageSequence
        __init__(self, ImageSequence ImageSequence) -> ImageSequence
        """
        this = _osg.new_ImageSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ImageSequence_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ImageSequence_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ImageSequence_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ImageSequence_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ImageSequence_className(self)

    def compare(self, *args):
        """compare(self, Image rhs) -> int"""
        return _osg.ImageSequence_compare(self, *args)

    def setReferenceTime(self, *args):
        """setReferenceTime(self, double t)"""
        return _osg.ImageSequence_setReferenceTime(self, *args)

    def getReferenceTime(self):
        """getReferenceTime(self) -> double"""
        return _osg.ImageSequence_getReferenceTime(self)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(self, double tm)"""
        return _osg.ImageSequence_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(self) -> double"""
        return _osg.ImageSequence_getTimeMultiplier(self)

    def seek(self, *args):
        """seek(self, double time)"""
        return _osg.ImageSequence_seek(self, *args)

    def play(self):
        """play(self)"""
        return _osg.ImageSequence_play(self)

    def pause(self):
        """pause(self)"""
        return _osg.ImageSequence_pause(self)

    def rewind(self):
        """rewind(self)"""
        return _osg.ImageSequence_rewind(self)

    PRE_LOAD_ALL_IMAGES = _osg.ImageSequence_PRE_LOAD_ALL_IMAGES
    PAGE_AND_RETAIN_IMAGES = _osg.ImageSequence_PAGE_AND_RETAIN_IMAGES
    PAGE_AND_DISCARD_USED_IMAGES = _osg.ImageSequence_PAGE_AND_DISCARD_USED_IMAGES
    def setMode(self, *args):
        """setMode(self, Mode mode)"""
        return _osg.ImageSequence_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> Mode"""
        return _osg.ImageSequence_getMode(self)

    def setLength(self, *args):
        """setLength(self, double length)"""
        return _osg.ImageSequence_setLength(self, *args)

    def getLength(self):
        """getLength(self) -> double"""
        return _osg.ImageSequence_getLength(self)

    def addImageFile(self, *args):
        """addImageFile(self, string fileName)"""
        return _osg.ImageSequence_addImageFile(self, *args)

    def setImageFile(self, *args):
        """setImageFile(self, unsigned int pos, string fileName)"""
        return _osg.ImageSequence_setImageFile(self, *args)

    def getImageFile(self, *args):
        """getImageFile(self, unsigned int pos) -> string"""
        return _osg.ImageSequence_getImageFile(self, *args)

    def getNumImageFiles(self):
        """getNumImageFiles(self) -> unsigned int"""
        return _osg.ImageSequence_getNumImageFiles(self)

    def getFileNames(self, *args):
        """
        getFileNames(self) -> FileNames
        getFileNames(self) -> FileNames
        """
        return _osg.ImageSequence_getFileNames(self, *args)

    def addImage(self, *args):
        """addImage(self, Image image)"""
        return _osg.ImageSequence_addImage(self, *args)

    def setImage(self, *args):
        """
        setImage(self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, 
            GLenum type, unsigned char data, 
            AllocationMode mode, int packing = 1)
        setImage(self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, 
            GLenum type, unsigned char data, 
            AllocationMode mode)
        setImage(self, unsigned int pos, Image image)
        """
        return _osg.ImageSequence_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self, unsigned int pos) -> Image
        getImage(self, unsigned int pos) -> Image
        """
        return _osg.ImageSequence_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.ImageSequence_getNumImages(self)

    def getImages(self, *args):
        """
        getImages(self) -> Images
        getImages(self) -> Images
        """
        return _osg.ImageSequence_getImages(self, *args)

    def requiresUpdateCall(self):
        """requiresUpdateCall(self) -> bool"""
        return _osg.ImageSequence_requiresUpdateCall(self)

    def update(self, *args):
        """update(self, NodeVisitor nv)"""
        return _osg.ImageSequence_update(self, *args)

ImageSequence_swigregister = _osg.ImageSequence_swigregister
ImageSequence_swigregister(ImageSequence)

OSG_OPERATIONTHREAD = _osg.OSG_OPERATIONTHREAD
class RefBlock(Referenced):
    """Proxy of C++ osg::RefBlock class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefBlock, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefBlock, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> RefBlock"""
        this = _osg.new_RefBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_RefBlock
    __del__ = lambda self : None;
RefBlock_swigregister = _osg.RefBlock_swigregister
RefBlock_swigregister(RefBlock)

class RefBlockCount(Referenced):
    """Proxy of C++ osg::RefBlockCount class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefBlockCount, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefBlockCount, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, unsigned int blockCount) -> RefBlockCount"""
        this = _osg.new_RefBlockCount(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_RefBlockCount
    __del__ = lambda self : None;
RefBlockCount_swigregister = _osg.RefBlockCount_swigregister
RefBlockCount_swigregister(RefBlockCount)

class Operation(Referenced):
    """Proxy of C++ osg::Operation class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operation, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Operation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setName(self, *args):
        """setName(self, string name)"""
        return _osg.Operation_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.Operation_getName(self)

    def setKeep(self, *args):
        """setKeep(self, bool keep)"""
        return _osg.Operation_setKeep(self, *args)

    def getKeep(self):
        """getKeep(self) -> bool"""
        return _osg.Operation_getKeep(self)

    def release(self):
        """release(self)"""
        return _osg.Operation_release(self)

    def __call__(self, *args):
        """__call__(self, Object arg0)"""
        return _osg.Operation___call__(self, *args)

Operation_swigregister = _osg.Operation_swigregister
Operation_swigregister(Operation)

class OperationQueue(Referenced):
    """Proxy of C++ osg::OperationQueue class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> OperationQueue"""
        this = _osg.new_OperationQueue()
        try: self.this.append(this)
        except: self.this = this
    def getNextOperation(self, blockIfEmpty = False):
        """
        getNextOperation(self, bool blockIfEmpty = False) -> osg::ref_ptr<(osg::Operation)>
        getNextOperation(self) -> osg::ref_ptr<(osg::Operation)>
        """
        return _osg.OperationQueue_getNextOperation(self, blockIfEmpty)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.OperationQueue_empty(self)

    def getNumOperationsInQueue(self):
        """getNumOperationsInQueue(self) -> unsigned int"""
        return _osg.OperationQueue_getNumOperationsInQueue(self)

    def add(self, *args):
        """add(self, Operation operation)"""
        return _osg.OperationQueue_add(self, *args)

    def remove(self, *args):
        """
        remove(self, Operation operation)
        remove(self, string name)
        """
        return _osg.OperationQueue_remove(self, *args)

    def removeAllOperations(self):
        """removeAllOperations(self)"""
        return _osg.OperationQueue_removeAllOperations(self)

    def runOperations(self, callingObject = None):
        """
        runOperations(self, Object callingObject = None)
        runOperations(self)
        """
        return _osg.OperationQueue_runOperations(self, callingObject)

    def releaseAllOperations(self):
        """releaseAllOperations(self)"""
        return _osg.OperationQueue_releaseAllOperations(self)

    def releaseOperationsBlock(self):
        """releaseOperationsBlock(self)"""
        return _osg.OperationQueue_releaseOperationsBlock(self)

    def getOperationThreads(self):
        """getOperationThreads(self) -> OperationThreads"""
        return _osg.OperationQueue_getOperationThreads(self)

OperationQueue_swigregister = _osg.OperationQueue_swigregister
OperationQueue_swigregister(OperationQueue)

class OperationThread(Referenced):
    """Proxy of C++ osg::OperationThread class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationThread, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> OperationThread"""
        this = _osg.new_OperationThread()
        try: self.this.append(this)
        except: self.this = this
    def setParent(self, *args):
        """setParent(self, Object parent)"""
        return _osg.OperationThread_setParent(self, *args)

    def getParent(self, *args):
        """
        getParent(self) -> Object
        getParent(self) -> Object
        """
        return _osg.OperationThread_getParent(self, *args)

    def setOperationQueue(self, *args):
        """setOperationQueue(self, OperationQueue opq)"""
        return _osg.OperationThread_setOperationQueue(self, *args)

    def getOperationQueue(self, *args):
        """
        getOperationQueue(self) -> OperationQueue
        getOperationQueue(self) -> OperationQueue
        """
        return _osg.OperationThread_getOperationQueue(self, *args)

    def add(self, *args):
        """add(self, Operation operation)"""
        return _osg.OperationThread_add(self, *args)

    def remove(self, *args):
        """
        remove(self, Operation operation)
        remove(self, string name)
        """
        return _osg.OperationThread_remove(self, *args)

    def removeAllOperations(self):
        """removeAllOperations(self)"""
        return _osg.OperationThread_removeAllOperations(self)

    def getCurrentOperation(self):
        """getCurrentOperation(self) -> osg::ref_ptr<(osg::Operation)>"""
        return _osg.OperationThread_getCurrentOperation(self)

    def run(self):
        """run(self)"""
        return _osg.OperationThread_run(self)

    def setDone(self, *args):
        """setDone(self, bool done)"""
        return _osg.OperationThread_setDone(self, *args)

    def getDone(self):
        """getDone(self) -> bool"""
        return _osg.OperationThread_getDone(self)

    def cancel(self):
        """cancel(self) -> int"""
        return _osg.OperationThread_cancel(self)

OperationThread_swigregister = _osg.OperationThread_swigregister
OperationThread_swigregister(OperationThread)

OSG_GRAPHICSTHREAD = _osg.OSG_GRAPHICSTHREAD
class GraphicsThread(OperationThread):
    """Proxy of C++ osg::GraphicsThread class"""
    __swig_setmethods__ = {}
    for _s in [OperationThread]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsThread, name, value)
    __swig_getmethods__ = {}
    for _s in [OperationThread]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GraphicsThread"""
        this = _osg.new_GraphicsThread()
        try: self.this.append(this)
        except: self.this = this
    def run(self):
        """run(self)"""
        return _osg.GraphicsThread_run(self)

    __swig_destroy__ = _osg.delete_GraphicsThread
    __del__ = lambda self : None;
GraphicsThread_swigregister = _osg.GraphicsThread_swigregister
GraphicsThread_swigregister(GraphicsThread)

class GraphicsOperation(Operation):
    """Proxy of C++ osg::GraphicsOperation class"""
    __swig_setmethods__ = {}
    for _s in [Operation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [Operation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsOperation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(self, Object object)
        __call__(self, GraphicsContext context)
        """
        return _osg.GraphicsOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_GraphicsOperation
    __del__ = lambda self : None;
GraphicsOperation_swigregister = _osg.GraphicsOperation_swigregister
GraphicsOperation_swigregister(GraphicsOperation)

class SwapBuffersOperation(GraphicsOperation):
    """Proxy of C++ osg::SwapBuffersOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapBuffersOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapBuffersOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> SwapBuffersOperation"""
        this = _osg.new_SwapBuffersOperation()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(self, GraphicsContext context)"""
        return _osg.SwapBuffersOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_SwapBuffersOperation
    __del__ = lambda self : None;
SwapBuffersOperation_swigregister = _osg.SwapBuffersOperation_swigregister
SwapBuffersOperation_swigregister(SwapBuffersOperation)

class BarrierOperation(Operation):
    """Proxy of C++ osg::BarrierOperation class"""
    __swig_setmethods__ = {}
    for _s in [Operation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BarrierOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [Operation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BarrierOperation, name)
    __repr__ = _swig_repr
    NO_OPERATION = _osg.BarrierOperation_NO_OPERATION
    GL_FLUSH = _osg.BarrierOperation_GL_FLUSH
    GL_FINISH = _osg.BarrierOperation_GL_FINISH
    def __init__(self, *args): 
        """
        __init__(self, int numThreads, PreBlockOp op = NO_OPERATION, bool keep = True) -> BarrierOperation
        __init__(self, int numThreads, PreBlockOp op = NO_OPERATION) -> BarrierOperation
        __init__(self, int numThreads) -> BarrierOperation
        """
        this = _osg.new_BarrierOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self):
        """release(self)"""
        return _osg.BarrierOperation_release(self)

    def __call__(self, *args):
        """__call__(self, Object object)"""
        return _osg.BarrierOperation___call__(self, *args)

    __swig_setmethods__["_preBlockOp"] = _osg.BarrierOperation__preBlockOp_set
    __swig_getmethods__["_preBlockOp"] = _osg.BarrierOperation__preBlockOp_get
    if _newclass:_preBlockOp = _swig_property(_osg.BarrierOperation__preBlockOp_get, _osg.BarrierOperation__preBlockOp_set)
    __swig_destroy__ = _osg.delete_BarrierOperation
    __del__ = lambda self : None;
BarrierOperation_swigregister = _osg.BarrierOperation_swigregister
BarrierOperation_swigregister(BarrierOperation)

class ReleaseContext_Block_MakeCurrentOperation(GraphicsOperation,RefBlock):
    """Proxy of C++ osg::ReleaseContext_Block_MakeCurrentOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation,RefBlock]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReleaseContext_Block_MakeCurrentOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation,RefBlock]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReleaseContext_Block_MakeCurrentOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ReleaseContext_Block_MakeCurrentOperation"""
        this = _osg.new_ReleaseContext_Block_MakeCurrentOperation()
        try: self.this.append(this)
        except: self.this = this
    def release(self):
        """release(self)"""
        return _osg.ReleaseContext_Block_MakeCurrentOperation_release(self)

    def __call__(self, *args):
        """__call__(self, GraphicsContext context)"""
        return _osg.ReleaseContext_Block_MakeCurrentOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_ReleaseContext_Block_MakeCurrentOperation
    __del__ = lambda self : None;
ReleaseContext_Block_MakeCurrentOperation_swigregister = _osg.ReleaseContext_Block_MakeCurrentOperation_swigregister
ReleaseContext_Block_MakeCurrentOperation_swigregister(ReleaseContext_Block_MakeCurrentOperation)

class BlockAndFlushOperation(GraphicsOperation):
    """Proxy of C++ osg::BlockAndFlushOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockAndFlushOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockAndFlushOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> BlockAndFlushOperation"""
        this = _osg.new_BlockAndFlushOperation()
        try: self.this.append(this)
        except: self.this = this
    def release(self):
        """release(self)"""
        return _osg.BlockAndFlushOperation_release(self)

    def __call__(self, *args):
        """__call__(self, GraphicsContext arg0)"""
        return _osg.BlockAndFlushOperation___call__(self, *args)

    __swig_destroy__ = _osg.delete_BlockAndFlushOperation
    __del__ = lambda self : None;
BlockAndFlushOperation_swigregister = _osg.BlockAndFlushOperation_swigregister
BlockAndFlushOperation_swigregister(BlockAndFlushOperation)

class FlushDeletedGLObjectsOperation(GraphicsOperation):
    """Proxy of C++ osg::FlushDeletedGLObjectsOperation class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlushDeletedGLObjectsOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlushDeletedGLObjectsOperation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double availableTime, bool keep = False) -> FlushDeletedGLObjectsOperation
        __init__(self, double availableTime) -> FlushDeletedGLObjectsOperation
        """
        this = _osg.new_FlushDeletedGLObjectsOperation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(self, GraphicsContext arg0)"""
        return _osg.FlushDeletedGLObjectsOperation___call__(self, *args)

    __swig_setmethods__["_availableTime"] = _osg.FlushDeletedGLObjectsOperation__availableTime_set
    __swig_getmethods__["_availableTime"] = _osg.FlushDeletedGLObjectsOperation__availableTime_get
    if _newclass:_availableTime = _swig_property(_osg.FlushDeletedGLObjectsOperation__availableTime_get, _osg.FlushDeletedGLObjectsOperation__availableTime_set)
    __swig_destroy__ = _osg.delete_FlushDeletedGLObjectsOperation
    __del__ = lambda self : None;
FlushDeletedGLObjectsOperation_swigregister = _osg.FlushDeletedGLObjectsOperation_swigregister
FlushDeletedGLObjectsOperation_swigregister(FlushDeletedGLObjectsOperation)

class RunOperations(GraphicsOperation):
    """Proxy of C++ osg::RunOperations class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RunOperations, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RunOperations, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> RunOperations"""
        this = _osg.new_RunOperations()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """__call__(self, GraphicsContext context)"""
        return _osg.RunOperations___call__(self, *args)

    __swig_destroy__ = _osg.delete_RunOperations
    __del__ = lambda self : None;
RunOperations_swigregister = _osg.RunOperations_swigregister
RunOperations_swigregister(RunOperations)

class EndOfDynamicDrawBlock(_object):
    """Proxy of C++ osg::EndOfDynamicDrawBlock class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndOfDynamicDrawBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EndOfDynamicDrawBlock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, unsigned int arg0) -> EndOfDynamicDrawBlock"""
        this = _osg.new_EndOfDynamicDrawBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    def completed(self, *args):
        """completed(self, State state)"""
        return _osg.EndOfDynamicDrawBlock_completed(self, *args)

EndOfDynamicDrawBlock_swigregister = _osg.EndOfDynamicDrawBlock_swigregister
EndOfDynamicDrawBlock_swigregister(EndOfDynamicDrawBlock)

OSG_GRAPHICSCONTEXT = _osg.OSG_GRAPHICSCONTEXT
class GraphicsContext(Object):
    """Proxy of C++ osg::GraphicsContext class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsContext, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setWindowingSystemInterface(*args):
        """setWindowingSystemInterface(WindowingSystemInterface wsInterface)"""
        return _osg.GraphicsContext_setWindowingSystemInterface(*args)

    if _newclass:setWindowingSystemInterface = staticmethod(setWindowingSystemInterface)
    __swig_getmethods__["setWindowingSystemInterface"] = lambda x: setWindowingSystemInterface
    def getWindowingSystemInterface():
        """getWindowingSystemInterface() -> WindowingSystemInterface"""
        return _osg.GraphicsContext_getWindowingSystemInterface()

    if _newclass:getWindowingSystemInterface = staticmethod(getWindowingSystemInterface)
    __swig_getmethods__["getWindowingSystemInterface"] = lambda x: getWindowingSystemInterface
    def createGraphicsContext(*args):
        """createGraphicsContext(Traits traits) -> GraphicsContext"""
        return _osg.GraphicsContext_createGraphicsContext(*args)

    if _newclass:createGraphicsContext = staticmethod(createGraphicsContext)
    __swig_getmethods__["createGraphicsContext"] = lambda x: createGraphicsContext
    def createNewContextID():
        """createNewContextID() -> unsigned int"""
        return _osg.GraphicsContext_createNewContextID()

    if _newclass:createNewContextID = staticmethod(createNewContextID)
    __swig_getmethods__["createNewContextID"] = lambda x: createNewContextID
    def getMaxContextID():
        """getMaxContextID() -> unsigned int"""
        return _osg.GraphicsContext_getMaxContextID()

    if _newclass:getMaxContextID = staticmethod(getMaxContextID)
    __swig_getmethods__["getMaxContextID"] = lambda x: getMaxContextID
    def incrementContextIDUsageCount(*args):
        """incrementContextIDUsageCount(unsigned int contextID)"""
        return _osg.GraphicsContext_incrementContextIDUsageCount(*args)

    if _newclass:incrementContextIDUsageCount = staticmethod(incrementContextIDUsageCount)
    __swig_getmethods__["incrementContextIDUsageCount"] = lambda x: incrementContextIDUsageCount
    def decrementContextIDUsageCount(*args):
        """decrementContextIDUsageCount(unsigned int contextID)"""
        return _osg.GraphicsContext_decrementContextIDUsageCount(*args)

    if _newclass:decrementContextIDUsageCount = staticmethod(decrementContextIDUsageCount)
    __swig_getmethods__["decrementContextIDUsageCount"] = lambda x: decrementContextIDUsageCount
    def getAllRegisteredGraphicsContexts():
        """getAllRegisteredGraphicsContexts() -> GraphicsContexts"""
        return _osg.GraphicsContext_getAllRegisteredGraphicsContexts()

    if _newclass:getAllRegisteredGraphicsContexts = staticmethod(getAllRegisteredGraphicsContexts)
    __swig_getmethods__["getAllRegisteredGraphicsContexts"] = lambda x: getAllRegisteredGraphicsContexts
    def getRegisteredGraphicsContexts(*args):
        """getRegisteredGraphicsContexts(unsigned int contextID) -> GraphicsContexts"""
        return _osg.GraphicsContext_getRegisteredGraphicsContexts(*args)

    if _newclass:getRegisteredGraphicsContexts = staticmethod(getRegisteredGraphicsContexts)
    __swig_getmethods__["getRegisteredGraphicsContexts"] = lambda x: getRegisteredGraphicsContexts
    def setCompileContext(*args):
        """setCompileContext(unsigned int contextID, GraphicsContext gc)"""
        return _osg.GraphicsContext_setCompileContext(*args)

    if _newclass:setCompileContext = staticmethod(setCompileContext)
    __swig_getmethods__["setCompileContext"] = lambda x: setCompileContext
    def getOrCreateCompileContext(*args):
        """getOrCreateCompileContext(unsigned int contextID) -> GraphicsContext"""
        return _osg.GraphicsContext_getOrCreateCompileContext(*args)

    if _newclass:getOrCreateCompileContext = staticmethod(getOrCreateCompileContext)
    __swig_getmethods__["getOrCreateCompileContext"] = lambda x: getOrCreateCompileContext
    def getCompileContext(*args):
        """getCompileContext(unsigned int contextID) -> GraphicsContext"""
        return _osg.GraphicsContext_getCompileContext(*args)

    if _newclass:getCompileContext = staticmethod(getCompileContext)
    __swig_getmethods__["getCompileContext"] = lambda x: getCompileContext
    def removeAllOperations(self):
        """removeAllOperations(self)"""
        return _osg.GraphicsContext_removeAllOperations(self)

    def runOperations(self):
        """runOperations(self)"""
        return _osg.GraphicsContext_runOperations(self)

    def getOperationsQueue(self):
        """getOperationsQueue(self) -> GraphicsOperationQueue"""
        return _osg.GraphicsContext_getOperationsQueue(self)

    def getOperationsMutex(self):
        """getOperationsMutex(self) -> OpenThreads::Mutex"""
        return _osg.GraphicsContext_getOperationsMutex(self)

    def getOperationsBlock(self):
        """getOperationsBlock(self) -> RefBlock"""
        return _osg.GraphicsContext_getOperationsBlock(self)

    def getTraits(self):
        """getTraits(self) -> Traits"""
        return _osg.GraphicsContext_getTraits(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.GraphicsContext_valid(self)

    def setState(self, *args):
        """setState(self, State state)"""
        return _osg.GraphicsContext_setState(self, *args)

    def getState(self, *args):
        """
        getState(self) -> State
        getState(self) -> State
        """
        return _osg.GraphicsContext_getState(self, *args)

    def setClearColor(self, *args):
        """setClearColor(self, Vec4 color)"""
        return _osg.GraphicsContext_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(self) -> Vec4"""
        return _osg.GraphicsContext_getClearColor(self)

    def setClearMask(self, *args):
        """setClearMask(self, GLbitfield mask)"""
        return _osg.GraphicsContext_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(self) -> GLbitfield"""
        return _osg.GraphicsContext_getClearMask(self)

    def clear(self):
        """clear(self)"""
        return _osg.GraphicsContext_clear(self)

    def getTimeSinceLastClear(self):
        """getTimeSinceLastClear(self) -> double"""
        return _osg.GraphicsContext_getTimeSinceLastClear(self)

    def realize(self):
        """realize(self) -> bool"""
        return _osg.GraphicsContext_realize(self)

    def close(self, callCloseImplementation = True):
        """
        close(self, bool callCloseImplementation = True)
        close(self)
        """
        return _osg.GraphicsContext_close(self, callCloseImplementation)

    def swapBuffers(self):
        """swapBuffers(self)"""
        return _osg.GraphicsContext_swapBuffers(self)

    def isRealized(self):
        """isRealized(self) -> bool"""
        return _osg.GraphicsContext_isRealized(self)

    def makeCurrent(self):
        """makeCurrent(self) -> bool"""
        return _osg.GraphicsContext_makeCurrent(self)

    def makeContextCurrent(self, *args):
        """makeContextCurrent(self, GraphicsContext readContext) -> bool"""
        return _osg.GraphicsContext_makeContextCurrent(self, *args)

    def releaseContext(self):
        """releaseContext(self) -> bool"""
        return _osg.GraphicsContext_releaseContext(self)

    def isCurrent(self):
        """isCurrent(self) -> bool"""
        return _osg.GraphicsContext_isCurrent(self)

    def bindPBufferToTexture(self, *args):
        """bindPBufferToTexture(self, GLenum buffer)"""
        return _osg.GraphicsContext_bindPBufferToTexture(self, *args)

    def createGraphicsThread(self):
        """createGraphicsThread(self)"""
        return _osg.GraphicsContext_createGraphicsThread(self)

    def setGraphicsThread(self, *args):
        """setGraphicsThread(self, GraphicsThread gt)"""
        return _osg.GraphicsContext_setGraphicsThread(self, *args)

    def getGraphicsThread(self, *args):
        """
        getGraphicsThread(self) -> GraphicsThread
        getGraphicsThread(self) -> GraphicsThread
        """
        return _osg.GraphicsContext_getGraphicsThread(self, *args)

    def realizeImplementation(self):
        """realizeImplementation(self) -> bool"""
        return _osg.GraphicsContext_realizeImplementation(self)

    def isRealizedImplementation(self):
        """isRealizedImplementation(self) -> bool"""
        return _osg.GraphicsContext_isRealizedImplementation(self)

    def closeImplementation(self):
        """closeImplementation(self)"""
        return _osg.GraphicsContext_closeImplementation(self)

    def makeCurrentImplementation(self):
        """makeCurrentImplementation(self) -> bool"""
        return _osg.GraphicsContext_makeCurrentImplementation(self)

    def makeContextCurrentImplementation(self, *args):
        """makeContextCurrentImplementation(self, GraphicsContext readContext) -> bool"""
        return _osg.GraphicsContext_makeContextCurrentImplementation(self, *args)

    def releaseContextImplementation(self):
        """releaseContextImplementation(self) -> bool"""
        return _osg.GraphicsContext_releaseContextImplementation(self)

    def bindPBufferToTextureImplementation(self, *args):
        """bindPBufferToTextureImplementation(self, GLenum buffer)"""
        return _osg.GraphicsContext_bindPBufferToTextureImplementation(self, *args)

    def setSwapCallback(self, *args):
        """setSwapCallback(self, SwapCallback rc)"""
        return _osg.GraphicsContext_setSwapCallback(self, *args)

    def getSwapCallback(self, *args):
        """
        getSwapCallback(self) -> SwapCallback
        getSwapCallback(self) -> SwapCallback
        """
        return _osg.GraphicsContext_getSwapCallback(self, *args)

    def swapBuffersCallbackOrImplemenation(self):
        """swapBuffersCallbackOrImplemenation(self)"""
        return _osg.GraphicsContext_swapBuffersCallbackOrImplemenation(self)

    def swapBuffersImplementation(self):
        """swapBuffersImplementation(self)"""
        return _osg.GraphicsContext_swapBuffersImplementation(self)

    def resized(self, *args):
        """resized(self, int x, int y, int width, int height)"""
        return _osg.GraphicsContext_resized(self, *args)

    def resizedImplementation(self, *args):
        """resizedImplementation(self, int x, int y, int width, int height)"""
        return _osg.GraphicsContext_resizedImplementation(self, *args)

    def getCameras(self, *args):
        """
        getCameras(self) -> Cameras
        getCameras(self) -> Cameras
        """
        return _osg.GraphicsContext_getCameras(self, *args)

    def setDefaultFboId(self, *args):
        """setDefaultFboId(self, GLuint i)"""
        return _osg.GraphicsContext_setDefaultFboId(self, *args)

    def getDefaultFboId(self):
        """getDefaultFboId(self) -> GLuint"""
        return _osg.GraphicsContext_getDefaultFboId(self)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object object) -> bool"""
        return _osg.GraphicsContext_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.GraphicsContext_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.GraphicsContext_className(self)

GraphicsContext_swigregister = _osg.GraphicsContext_swigregister
GraphicsContext_swigregister(GraphicsContext)

def GraphicsContext_setWindowingSystemInterface(*args):
  """GraphicsContext_setWindowingSystemInterface(WindowingSystemInterface wsInterface)"""
  return _osg.GraphicsContext_setWindowingSystemInterface(*args)

def GraphicsContext_getWindowingSystemInterface():
  """GraphicsContext_getWindowingSystemInterface() -> WindowingSystemInterface"""
  return _osg.GraphicsContext_getWindowingSystemInterface()

def GraphicsContext_createGraphicsContext(*args):
  """GraphicsContext_createGraphicsContext(Traits traits) -> GraphicsContext"""
  return _osg.GraphicsContext_createGraphicsContext(*args)

def GraphicsContext_createNewContextID():
  """GraphicsContext_createNewContextID() -> unsigned int"""
  return _osg.GraphicsContext_createNewContextID()

def GraphicsContext_getMaxContextID():
  """GraphicsContext_getMaxContextID() -> unsigned int"""
  return _osg.GraphicsContext_getMaxContextID()

def GraphicsContext_incrementContextIDUsageCount(*args):
  """GraphicsContext_incrementContextIDUsageCount(unsigned int contextID)"""
  return _osg.GraphicsContext_incrementContextIDUsageCount(*args)

def GraphicsContext_decrementContextIDUsageCount(*args):
  """GraphicsContext_decrementContextIDUsageCount(unsigned int contextID)"""
  return _osg.GraphicsContext_decrementContextIDUsageCount(*args)

def GraphicsContext_getAllRegisteredGraphicsContexts():
  """GraphicsContext_getAllRegisteredGraphicsContexts() -> GraphicsContexts"""
  return _osg.GraphicsContext_getAllRegisteredGraphicsContexts()

def GraphicsContext_getRegisteredGraphicsContexts(*args):
  """GraphicsContext_getRegisteredGraphicsContexts(unsigned int contextID) -> GraphicsContexts"""
  return _osg.GraphicsContext_getRegisteredGraphicsContexts(*args)

def GraphicsContext_setCompileContext(*args):
  """GraphicsContext_setCompileContext(unsigned int contextID, GraphicsContext gc)"""
  return _osg.GraphicsContext_setCompileContext(*args)

def GraphicsContext_getOrCreateCompileContext(*args):
  """GraphicsContext_getOrCreateCompileContext(unsigned int contextID) -> GraphicsContext"""
  return _osg.GraphicsContext_getOrCreateCompileContext(*args)

def GraphicsContext_getCompileContext(*args):
  """GraphicsContext_getCompileContext(unsigned int contextID) -> GraphicsContext"""
  return _osg.GraphicsContext_getCompileContext(*args)

class SwapCallback(Referenced):
    """Proxy of C++ SwapCallback class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def swapBuffersImplementation(self, *args):
        """swapBuffersImplementation(self, GraphicsContext gc)"""
        return _osg.SwapCallback_swapBuffersImplementation(self, *args)

    __swig_destroy__ = _osg.delete_SwapCallback
    __del__ = lambda self : None;
SwapCallback_swigregister = _osg.SwapCallback_swigregister
SwapCallback_swigregister(SwapCallback)

class ScreenIdentifier(_object):
    """Proxy of C++ ScreenIdentifier class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenIdentifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ScreenIdentifier
        __init__(self, int in_screenNum) -> ScreenIdentifier
        __init__(self, string in_hostName, int in_displayNum, int in_screenNum) -> ScreenIdentifier
        """
        this = _osg.new_ScreenIdentifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def displayName(self):
        """displayName(self) -> string"""
        return _osg.ScreenIdentifier_displayName(self)

    def readDISPLAY(self):
        """readDISPLAY(self)"""
        return _osg.ScreenIdentifier_readDISPLAY(self)

    def setScreenIdentifier(self, *args):
        """setScreenIdentifier(self, string displayName)"""
        return _osg.ScreenIdentifier_setScreenIdentifier(self, *args)

    def setUndefinedScreenDetailsToDefaultScreen(self):
        """setUndefinedScreenDetailsToDefaultScreen(self)"""
        return _osg.ScreenIdentifier_setUndefinedScreenDetailsToDefaultScreen(self)

    __swig_setmethods__["hostName"] = _osg.ScreenIdentifier_hostName_set
    __swig_getmethods__["hostName"] = _osg.ScreenIdentifier_hostName_get
    if _newclass:hostName = _swig_property(_osg.ScreenIdentifier_hostName_get, _osg.ScreenIdentifier_hostName_set)
    __swig_setmethods__["displayNum"] = _osg.ScreenIdentifier_displayNum_set
    __swig_getmethods__["displayNum"] = _osg.ScreenIdentifier_displayNum_get
    if _newclass:displayNum = _swig_property(_osg.ScreenIdentifier_displayNum_get, _osg.ScreenIdentifier_displayNum_set)
    __swig_setmethods__["screenNum"] = _osg.ScreenIdentifier_screenNum_set
    __swig_getmethods__["screenNum"] = _osg.ScreenIdentifier_screenNum_get
    if _newclass:screenNum = _swig_property(_osg.ScreenIdentifier_screenNum_get, _osg.ScreenIdentifier_screenNum_set)
    __swig_destroy__ = _osg.delete_ScreenIdentifier
    __del__ = lambda self : None;
ScreenIdentifier_swigregister = _osg.ScreenIdentifier_swigregister
ScreenIdentifier_swigregister(ScreenIdentifier)

class Traits(Referenced,ScreenIdentifier):
    """Proxy of C++ Traits class"""
    __swig_setmethods__ = {}
    for _s in [Referenced,ScreenIdentifier]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Traits, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced,ScreenIdentifier]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Traits, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Traits"""
        this = _osg.new_Traits()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["x"] = _osg.Traits_x_set
    __swig_getmethods__["x"] = _osg.Traits_x_get
    if _newclass:x = _swig_property(_osg.Traits_x_get, _osg.Traits_x_set)
    __swig_setmethods__["y"] = _osg.Traits_y_set
    __swig_getmethods__["y"] = _osg.Traits_y_get
    if _newclass:y = _swig_property(_osg.Traits_y_get, _osg.Traits_y_set)
    __swig_setmethods__["width"] = _osg.Traits_width_set
    __swig_getmethods__["width"] = _osg.Traits_width_get
    if _newclass:width = _swig_property(_osg.Traits_width_get, _osg.Traits_width_set)
    __swig_setmethods__["height"] = _osg.Traits_height_set
    __swig_getmethods__["height"] = _osg.Traits_height_get
    if _newclass:height = _swig_property(_osg.Traits_height_get, _osg.Traits_height_set)
    __swig_setmethods__["windowName"] = _osg.Traits_windowName_set
    __swig_getmethods__["windowName"] = _osg.Traits_windowName_get
    if _newclass:windowName = _swig_property(_osg.Traits_windowName_get, _osg.Traits_windowName_set)
    __swig_setmethods__["windowDecoration"] = _osg.Traits_windowDecoration_set
    __swig_getmethods__["windowDecoration"] = _osg.Traits_windowDecoration_get
    if _newclass:windowDecoration = _swig_property(_osg.Traits_windowDecoration_get, _osg.Traits_windowDecoration_set)
    __swig_setmethods__["supportsResize"] = _osg.Traits_supportsResize_set
    __swig_getmethods__["supportsResize"] = _osg.Traits_supportsResize_get
    if _newclass:supportsResize = _swig_property(_osg.Traits_supportsResize_get, _osg.Traits_supportsResize_set)
    __swig_setmethods__["red"] = _osg.Traits_red_set
    __swig_getmethods__["red"] = _osg.Traits_red_get
    if _newclass:red = _swig_property(_osg.Traits_red_get, _osg.Traits_red_set)
    __swig_setmethods__["blue"] = _osg.Traits_blue_set
    __swig_getmethods__["blue"] = _osg.Traits_blue_get
    if _newclass:blue = _swig_property(_osg.Traits_blue_get, _osg.Traits_blue_set)
    __swig_setmethods__["green"] = _osg.Traits_green_set
    __swig_getmethods__["green"] = _osg.Traits_green_get
    if _newclass:green = _swig_property(_osg.Traits_green_get, _osg.Traits_green_set)
    __swig_setmethods__["alpha"] = _osg.Traits_alpha_set
    __swig_getmethods__["alpha"] = _osg.Traits_alpha_get
    if _newclass:alpha = _swig_property(_osg.Traits_alpha_get, _osg.Traits_alpha_set)
    __swig_setmethods__["depth"] = _osg.Traits_depth_set
    __swig_getmethods__["depth"] = _osg.Traits_depth_get
    if _newclass:depth = _swig_property(_osg.Traits_depth_get, _osg.Traits_depth_set)
    __swig_setmethods__["stencil"] = _osg.Traits_stencil_set
    __swig_getmethods__["stencil"] = _osg.Traits_stencil_get
    if _newclass:stencil = _swig_property(_osg.Traits_stencil_get, _osg.Traits_stencil_set)
    __swig_setmethods__["sampleBuffers"] = _osg.Traits_sampleBuffers_set
    __swig_getmethods__["sampleBuffers"] = _osg.Traits_sampleBuffers_get
    if _newclass:sampleBuffers = _swig_property(_osg.Traits_sampleBuffers_get, _osg.Traits_sampleBuffers_set)
    __swig_setmethods__["samples"] = _osg.Traits_samples_set
    __swig_getmethods__["samples"] = _osg.Traits_samples_get
    if _newclass:samples = _swig_property(_osg.Traits_samples_get, _osg.Traits_samples_set)
    __swig_setmethods__["pbuffer"] = _osg.Traits_pbuffer_set
    __swig_getmethods__["pbuffer"] = _osg.Traits_pbuffer_get
    if _newclass:pbuffer = _swig_property(_osg.Traits_pbuffer_get, _osg.Traits_pbuffer_set)
    __swig_setmethods__["quadBufferStereo"] = _osg.Traits_quadBufferStereo_set
    __swig_getmethods__["quadBufferStereo"] = _osg.Traits_quadBufferStereo_get
    if _newclass:quadBufferStereo = _swig_property(_osg.Traits_quadBufferStereo_get, _osg.Traits_quadBufferStereo_set)
    __swig_setmethods__["doubleBuffer"] = _osg.Traits_doubleBuffer_set
    __swig_getmethods__["doubleBuffer"] = _osg.Traits_doubleBuffer_get
    if _newclass:doubleBuffer = _swig_property(_osg.Traits_doubleBuffer_get, _osg.Traits_doubleBuffer_set)
    __swig_setmethods__["target"] = _osg.Traits_target_set
    __swig_getmethods__["target"] = _osg.Traits_target_get
    if _newclass:target = _swig_property(_osg.Traits_target_get, _osg.Traits_target_set)
    __swig_setmethods__["format"] = _osg.Traits_format_set
    __swig_getmethods__["format"] = _osg.Traits_format_get
    if _newclass:format = _swig_property(_osg.Traits_format_get, _osg.Traits_format_set)
    __swig_setmethods__["level"] = _osg.Traits_level_set
    __swig_getmethods__["level"] = _osg.Traits_level_get
    if _newclass:level = _swig_property(_osg.Traits_level_get, _osg.Traits_level_set)
    __swig_setmethods__["face"] = _osg.Traits_face_set
    __swig_getmethods__["face"] = _osg.Traits_face_get
    if _newclass:face = _swig_property(_osg.Traits_face_get, _osg.Traits_face_set)
    __swig_setmethods__["mipMapGeneration"] = _osg.Traits_mipMapGeneration_set
    __swig_getmethods__["mipMapGeneration"] = _osg.Traits_mipMapGeneration_get
    if _newclass:mipMapGeneration = _swig_property(_osg.Traits_mipMapGeneration_get, _osg.Traits_mipMapGeneration_set)
    __swig_setmethods__["vsync"] = _osg.Traits_vsync_set
    __swig_getmethods__["vsync"] = _osg.Traits_vsync_get
    if _newclass:vsync = _swig_property(_osg.Traits_vsync_get, _osg.Traits_vsync_set)
    __swig_setmethods__["useMultiThreadedOpenGLEngine"] = _osg.Traits_useMultiThreadedOpenGLEngine_set
    __swig_getmethods__["useMultiThreadedOpenGLEngine"] = _osg.Traits_useMultiThreadedOpenGLEngine_get
    if _newclass:useMultiThreadedOpenGLEngine = _swig_property(_osg.Traits_useMultiThreadedOpenGLEngine_get, _osg.Traits_useMultiThreadedOpenGLEngine_set)
    __swig_setmethods__["useCursor"] = _osg.Traits_useCursor_set
    __swig_getmethods__["useCursor"] = _osg.Traits_useCursor_get
    if _newclass:useCursor = _swig_property(_osg.Traits_useCursor_get, _osg.Traits_useCursor_set)
    __swig_setmethods__["sharedContext"] = _osg.Traits_sharedContext_set
    __swig_getmethods__["sharedContext"] = _osg.Traits_sharedContext_get
    if _newclass:sharedContext = _swig_property(_osg.Traits_sharedContext_get, _osg.Traits_sharedContext_set)
    __swig_setmethods__["inheritedWindowData"] = _osg.Traits_inheritedWindowData_set
    __swig_getmethods__["inheritedWindowData"] = _osg.Traits_inheritedWindowData_get
    if _newclass:inheritedWindowData = _swig_property(_osg.Traits_inheritedWindowData_get, _osg.Traits_inheritedWindowData_set)
    __swig_setmethods__["setInheritedWindowPixelFormat"] = _osg.Traits_setInheritedWindowPixelFormat_set
    __swig_getmethods__["setInheritedWindowPixelFormat"] = _osg.Traits_setInheritedWindowPixelFormat_get
    if _newclass:setInheritedWindowPixelFormat = _swig_property(_osg.Traits_setInheritedWindowPixelFormat_get, _osg.Traits_setInheritedWindowPixelFormat_set)
    __swig_destroy__ = _osg.delete_Traits
    __del__ = lambda self : None;
Traits_swigregister = _osg.Traits_swigregister
Traits_swigregister(Traits)

class WindowingSystemInterface(Referenced):
    """Proxy of C++ WindowingSystemInterface class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowingSystemInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowingSystemInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNumScreens(self, *args):
        """
        getNumScreens(self, ScreenIdentifier screenIdentifier = ScreenIdentifier()) -> unsigned int
        getNumScreens(self) -> unsigned int
        """
        return _osg.WindowingSystemInterface_getNumScreens(self, *args)

    def getScreenResolution(self, *args):
        """
        getScreenResolution(self, ScreenIdentifier screenIdentifier, unsigned int width, 
            unsigned int height)
        """
        return _osg.WindowingSystemInterface_getScreenResolution(self, *args)

    def setScreenResolution(self, *args):
        """setScreenResolution(self, ScreenIdentifier arg0, unsigned int arg1, unsigned int arg2) -> bool"""
        return _osg.WindowingSystemInterface_setScreenResolution(self, *args)

    def setScreenRefreshRate(self, *args):
        """setScreenRefreshRate(self, ScreenIdentifier arg0, double arg1) -> bool"""
        return _osg.WindowingSystemInterface_setScreenRefreshRate(self, *args)

    def createGraphicsContext(self, *args):
        """createGraphicsContext(self, Traits traits) -> GraphicsContext"""
        return _osg.WindowingSystemInterface_createGraphicsContext(self, *args)

    __swig_destroy__ = _osg.delete_WindowingSystemInterface
    __del__ = lambda self : None;
WindowingSystemInterface_swigregister = _osg.WindowingSystemInterface_swigregister
WindowingSystemInterface_swigregister(WindowingSystemInterface)

#get the original definitions back into their classes
GraphicsContext.Traits = Traits
GraphicsContext.ScreenIdentifier = ScreenIdentifier
GraphicsContext.WindowingSystemInterface = WindowingSystemInterface
GraphicsContext.SwapCallback = SwapCallback

OSG_TEXTURE = _osg.OSG_TEXTURE
GL_TEXTURE_MAX_ANISOTROPY_EXT = _osg.GL_TEXTURE_MAX_ANISOTROPY_EXT
GL_COMPRESSED_ALPHA_ARB = _osg.GL_COMPRESSED_ALPHA_ARB
GL_COMPRESSED_LUMINANCE_ARB = _osg.GL_COMPRESSED_LUMINANCE_ARB
GL_COMPRESSED_LUMINANCE_ALPHA_ARB = _osg.GL_COMPRESSED_LUMINANCE_ALPHA_ARB
GL_COMPRESSED_INTENSITY_ARB = _osg.GL_COMPRESSED_INTENSITY_ARB
GL_COMPRESSED_RGB_ARB = _osg.GL_COMPRESSED_RGB_ARB
GL_COMPRESSED_RGBA_ARB = _osg.GL_COMPRESSED_RGBA_ARB
GL_TEXTURE_COMPRESSION_HINT_ARB = _osg.GL_TEXTURE_COMPRESSION_HINT_ARB
GL_TEXTURE_COMPRESSED_ARB = _osg.GL_TEXTURE_COMPRESSED_ARB
GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = _osg.GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
GL_COMPRESSED_TEXTURE_FORMATS_ARB = _osg.GL_COMPRESSED_TEXTURE_FORMATS_ARB
GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = _osg.GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
GL_COMPRESSED_RGB_S3TC_DXT1_EXT = _osg.GL_COMPRESSED_RGB_S3TC_DXT1_EXT
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = _osg.GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = _osg.GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = _osg.GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
GL_COMPRESSED_RED_RGTC1_EXT = _osg.GL_COMPRESSED_RED_RGTC1_EXT
GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = _osg.GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
GL_COMPRESSED_RED_GREEN_RGTC2_EXT = _osg.GL_COMPRESSED_RED_GREEN_RGTC2_EXT
GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = _osg.GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = _osg.GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = _osg.GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = _osg.GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = _osg.GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
GL_ETC1_RGB8_OES = _osg.GL_ETC1_RGB8_OES
GL_RGBA32F_ARB = _osg.GL_RGBA32F_ARB
GL_RGB32F_ARB = _osg.GL_RGB32F_ARB
GL_ALPHA32F_ARB = _osg.GL_ALPHA32F_ARB
GL_INTENSITY32F_ARB = _osg.GL_INTENSITY32F_ARB
GL_LUMINANCE32F_ARB = _osg.GL_LUMINANCE32F_ARB
GL_LUMINANCE_ALPHA32F_ARB = _osg.GL_LUMINANCE_ALPHA32F_ARB
GL_RGBA16F_ARB = _osg.GL_RGBA16F_ARB
GL_RGB16F_ARB = _osg.GL_RGB16F_ARB
GL_ALPHA16F_ARB = _osg.GL_ALPHA16F_ARB
GL_INTENSITY16F_ARB = _osg.GL_INTENSITY16F_ARB
GL_LUMINANCE16F_ARB = _osg.GL_LUMINANCE16F_ARB
GL_LUMINANCE_ALPHA16F_ARB = _osg.GL_LUMINANCE_ALPHA16F_ARB
GL_HALF_FLOAT_ARB = _osg.GL_HALF_FLOAT_ARB
GL_HILO_NV = _osg.GL_HILO_NV
GL_DSDT_NV = _osg.GL_DSDT_NV
GL_DSDT_MAG_NV = _osg.GL_DSDT_MAG_NV
GL_DSDT_MAG_VIB_NV = _osg.GL_DSDT_MAG_VIB_NV
GL_HILO16_NV = _osg.GL_HILO16_NV
GL_SIGNED_HILO_NV = _osg.GL_SIGNED_HILO_NV
GL_SIGNED_HILO16_NV = _osg.GL_SIGNED_HILO16_NV
GL_SIGNED_RGBA_NV = _osg.GL_SIGNED_RGBA_NV
GL_SIGNED_RGBA8_NV = _osg.GL_SIGNED_RGBA8_NV
GL_SIGNED_RGB_NV = _osg.GL_SIGNED_RGB_NV
GL_SIGNED_RGB8_NV = _osg.GL_SIGNED_RGB8_NV
GL_SIGNED_LUMINANCE_NV = _osg.GL_SIGNED_LUMINANCE_NV
GL_SIGNED_LUMINANCE8_NV = _osg.GL_SIGNED_LUMINANCE8_NV
GL_SIGNED_LUMINANCE_ALPHA_NV = _osg.GL_SIGNED_LUMINANCE_ALPHA_NV
GL_SIGNED_LUMINANCE8_ALPHA8_NV = _osg.GL_SIGNED_LUMINANCE8_ALPHA8_NV
GL_SIGNED_ALPHA_NV = _osg.GL_SIGNED_ALPHA_NV
GL_SIGNED_ALPHA8_NV = _osg.GL_SIGNED_ALPHA8_NV
GL_SIGNED_INTENSITY_NV = _osg.GL_SIGNED_INTENSITY_NV
GL_SIGNED_INTENSITY8_NV = _osg.GL_SIGNED_INTENSITY8_NV
GL_DSDT8_NV = _osg.GL_DSDT8_NV
GL_DSDT8_MAG8_NV = _osg.GL_DSDT8_MAG8_NV
GL_DSDT8_MAG8_INTENSITY8_NV = _osg.GL_DSDT8_MAG8_INTENSITY8_NV
GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = _osg.GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = _osg.GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
GL_FLOAT_R_NV = _osg.GL_FLOAT_R_NV
GL_FLOAT_RG_NV = _osg.GL_FLOAT_RG_NV
GL_FLOAT_RGB_NV = _osg.GL_FLOAT_RGB_NV
GL_FLOAT_RGBA_NV = _osg.GL_FLOAT_RGBA_NV
GL_FLOAT_R16_NV = _osg.GL_FLOAT_R16_NV
GL_FLOAT_R32_NV = _osg.GL_FLOAT_R32_NV
GL_FLOAT_RG16_NV = _osg.GL_FLOAT_RG16_NV
GL_FLOAT_RG32_NV = _osg.GL_FLOAT_RG32_NV
GL_FLOAT_RGB16_NV = _osg.GL_FLOAT_RGB16_NV
GL_FLOAT_RGB32_NV = _osg.GL_FLOAT_RGB32_NV
GL_FLOAT_RGBA16_NV = _osg.GL_FLOAT_RGBA16_NV
GL_FLOAT_RGBA32_NV = _osg.GL_FLOAT_RGBA32_NV
GL_HALF_FLOAT_NV = _osg.GL_HALF_FLOAT_NV
GL_RGBA_FLOAT32_ATI = _osg.GL_RGBA_FLOAT32_ATI
GL_RGB_FLOAT32_ATI = _osg.GL_RGB_FLOAT32_ATI
GL_ALPHA_FLOAT32_ATI = _osg.GL_ALPHA_FLOAT32_ATI
GL_INTENSITY_FLOAT32_ATI = _osg.GL_INTENSITY_FLOAT32_ATI
GL_LUMINANCE_FLOAT32_ATI = _osg.GL_LUMINANCE_FLOAT32_ATI
GL_LUMINANCE_ALPHA_FLOAT32_ATI = _osg.GL_LUMINANCE_ALPHA_FLOAT32_ATI
GL_RGBA_FLOAT16_ATI = _osg.GL_RGBA_FLOAT16_ATI
GL_RGB_FLOAT16_ATI = _osg.GL_RGB_FLOAT16_ATI
GL_ALPHA_FLOAT16_ATI = _osg.GL_ALPHA_FLOAT16_ATI
GL_INTENSITY_FLOAT16_ATI = _osg.GL_INTENSITY_FLOAT16_ATI
GL_LUMINANCE_FLOAT16_ATI = _osg.GL_LUMINANCE_FLOAT16_ATI
GL_LUMINANCE_ALPHA_FLOAT16_ATI = _osg.GL_LUMINANCE_ALPHA_FLOAT16_ATI
GL_MIRRORED_REPEAT_IBM = _osg.GL_MIRRORED_REPEAT_IBM
GL_CLAMP_TO_EDGE = _osg.GL_CLAMP_TO_EDGE
GL_CLAMP_TO_BORDER_ARB = _osg.GL_CLAMP_TO_BORDER_ARB
GL_GENERATE_MIPMAP_SGIS = _osg.GL_GENERATE_MIPMAP_SGIS
GL_GENERATE_MIPMAP_HINT_SGIS = _osg.GL_GENERATE_MIPMAP_HINT_SGIS
GL_TEXTURE_3D = _osg.GL_TEXTURE_3D
GL_TEXTURE_2D_ARRAY_EXT = _osg.GL_TEXTURE_2D_ARRAY_EXT
GL_PROXY_TEXTURE_2D_ARRAY_EXT = _osg.GL_PROXY_TEXTURE_2D_ARRAY_EXT
GL_TEXTURE_BINDING_2D_ARRAY_EXT = _osg.GL_TEXTURE_BINDING_2D_ARRAY_EXT
GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = _osg.GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = _osg.GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
GL_SAMPLER_2D_ARRAY_EXT = _osg.GL_SAMPLER_2D_ARRAY_EXT
GL_SAMPLER_2D_ARRAY_SHADOW_EXT = _osg.GL_SAMPLER_2D_ARRAY_SHADOW_EXT
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = _osg.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
GL_TEXTURE_CUBE_MAP = _osg.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = _osg.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _osg.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _osg.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _osg.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _osg.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _osg.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _osg.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_PROXY_TEXTURE_CUBE_MAP = _osg.GL_PROXY_TEXTURE_CUBE_MAP
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _osg.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_TEXTURE_BINDING_3D = _osg.GL_TEXTURE_BINDING_3D
GL_DEPTH_TEXTURE_MODE_ARB = _osg.GL_DEPTH_TEXTURE_MODE_ARB
GL_TEXTURE_COMPARE_MODE_ARB = _osg.GL_TEXTURE_COMPARE_MODE_ARB
GL_TEXTURE_COMPARE_FUNC_ARB = _osg.GL_TEXTURE_COMPARE_FUNC_ARB
GL_COMPARE_R_TO_TEXTURE_ARB = _osg.GL_COMPARE_R_TO_TEXTURE_ARB
TEXTURE_COMPARE_FAIL_VALUE_ARB = _osg.TEXTURE_COMPARE_FAIL_VALUE_ARB
GL_MAX_TEXTURE_UNITS = _osg.GL_MAX_TEXTURE_UNITS
GL_TEXTURE_DEPTH = _osg.GL_TEXTURE_DEPTH
GL_TEXTURE_2D_MULTISAMPLE = _osg.GL_TEXTURE_2D_MULTISAMPLE
GL_RGBA32UI_EXT = _osg.GL_RGBA32UI_EXT
GL_RGB32UI_EXT = _osg.GL_RGB32UI_EXT
GL_ALPHA32UI_EXT = _osg.GL_ALPHA32UI_EXT
GL_INTENSITY32UI_EXT = _osg.GL_INTENSITY32UI_EXT
GL_LUMINANCE32UI_EXT = _osg.GL_LUMINANCE32UI_EXT
GL_LUMINANCE_ALPHA32UI_EXT = _osg.GL_LUMINANCE_ALPHA32UI_EXT
GL_RGBA16UI_EXT = _osg.GL_RGBA16UI_EXT
GL_RGB16UI_EXT = _osg.GL_RGB16UI_EXT
GL_ALPHA16UI_EXT = _osg.GL_ALPHA16UI_EXT
GL_INTENSITY16UI_EXT = _osg.GL_INTENSITY16UI_EXT
GL_LUMINANCE16UI_EXT = _osg.GL_LUMINANCE16UI_EXT
GL_LUMINANCE_ALPHA16UI_EXT = _osg.GL_LUMINANCE_ALPHA16UI_EXT
GL_RGBA8UI_EXT = _osg.GL_RGBA8UI_EXT
GL_RGB8UI_EXT = _osg.GL_RGB8UI_EXT
GL_ALPHA8UI_EXT = _osg.GL_ALPHA8UI_EXT
GL_INTENSITY8UI_EXT = _osg.GL_INTENSITY8UI_EXT
GL_LUMINANCE8UI_EXT = _osg.GL_LUMINANCE8UI_EXT
GL_LUMINANCE_ALPHA8UI_EXT = _osg.GL_LUMINANCE_ALPHA8UI_EXT
GL_RGBA32I_EXT = _osg.GL_RGBA32I_EXT
GL_RGB32I_EXT = _osg.GL_RGB32I_EXT
GL_ALPHA32I_EXT = _osg.GL_ALPHA32I_EXT
GL_INTENSITY32I_EXT = _osg.GL_INTENSITY32I_EXT
GL_LUMINANCE32I_EXT = _osg.GL_LUMINANCE32I_EXT
GL_LUMINANCE_ALPHA32I_EXT = _osg.GL_LUMINANCE_ALPHA32I_EXT
GL_RGBA16I_EXT = _osg.GL_RGBA16I_EXT
GL_RGB16I_EXT = _osg.GL_RGB16I_EXT
GL_ALPHA16I_EXT = _osg.GL_ALPHA16I_EXT
GL_INTENSITY16I_EXT = _osg.GL_INTENSITY16I_EXT
GL_LUMINANCE16I_EXT = _osg.GL_LUMINANCE16I_EXT
GL_LUMINANCE_ALPHA16I_EXT = _osg.GL_LUMINANCE_ALPHA16I_EXT
GL_RGBA8I_EXT = _osg.GL_RGBA8I_EXT
GL_RGB8I_EXT = _osg.GL_RGB8I_EXT
GL_ALPHA8I_EXT = _osg.GL_ALPHA8I_EXT
GL_INTENSITY8I_EXT = _osg.GL_INTENSITY8I_EXT
GL_LUMINANCE8I_EXT = _osg.GL_LUMINANCE8I_EXT
GL_LUMINANCE_ALPHA8I_EXT = _osg.GL_LUMINANCE_ALPHA8I_EXT
GL_RED_INTEGER_EXT = _osg.GL_RED_INTEGER_EXT
GL_GREEN_INTEGER_EXT = _osg.GL_GREEN_INTEGER_EXT
GL_BLUE_INTEGER_EXT = _osg.GL_BLUE_INTEGER_EXT
GL_ALPHA_INTEGER_EXT = _osg.GL_ALPHA_INTEGER_EXT
GL_RGB_INTEGER_EXT = _osg.GL_RGB_INTEGER_EXT
GL_RGBA_INTEGER_EXT = _osg.GL_RGBA_INTEGER_EXT
GL_BGR_INTEGER_EXT = _osg.GL_BGR_INTEGER_EXT
GL_BGRA_INTEGER_EXT = _osg.GL_BGRA_INTEGER_EXT
GL_LUMINANCE_INTEGER_EXT = _osg.GL_LUMINANCE_INTEGER_EXT
GL_LUMINANCE_ALPHA_INTEGER_EXT = _osg.GL_LUMINANCE_ALPHA_INTEGER_EXT
GL_RGBA_INTEGER_MODE_EXT = _osg.GL_RGBA_INTEGER_MODE_EXT
class Texture(StateAttribute):
    """Proxy of C++ osg::Texture class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Texture_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Texture_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Texture_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Texture_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Texture_className(self)

    def asTexture(self, *args):
        """
        asTexture(self) -> Texture
        asTexture(self) -> Texture
        """
        return _osg.Texture_asTexture(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Texture_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.Texture_isTextureAttribute(self)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.Texture_getTextureTarget(self)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.Texture_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.Texture_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.Texture_getTextureDepth(self)

    WRAP_S = _osg.Texture_WRAP_S
    WRAP_T = _osg.Texture_WRAP_T
    WRAP_R = _osg.Texture_WRAP_R
    CLAMP = _osg.Texture_CLAMP
    CLAMP_TO_EDGE = _osg.Texture_CLAMP_TO_EDGE
    CLAMP_TO_BORDER = _osg.Texture_CLAMP_TO_BORDER
    REPEAT = _osg.Texture_REPEAT
    MIRROR = _osg.Texture_MIRROR
    def setWrap(self, *args):
        """setWrap(self, WrapParameter which, WrapMode wrap)"""
        return _osg.Texture_setWrap(self, *args)

    def getWrap(self, *args):
        """getWrap(self, WrapParameter which) -> WrapMode"""
        return _osg.Texture_getWrap(self, *args)

    def setBorderColor(self, *args):
        """setBorderColor(self, Vec4d color)"""
        return _osg.Texture_setBorderColor(self, *args)

    def getBorderColor(self):
        """getBorderColor(self) -> Vec4d"""
        return _osg.Texture_getBorderColor(self)

    def setBorderWidth(self, *args):
        """setBorderWidth(self, GLint width)"""
        return _osg.Texture_setBorderWidth(self, *args)

    def getBorderWidth(self):
        """getBorderWidth(self) -> GLint"""
        return _osg.Texture_getBorderWidth(self)

    MIN_FILTER = _osg.Texture_MIN_FILTER
    MAG_FILTER = _osg.Texture_MAG_FILTER
    LINEAR = _osg.Texture_LINEAR
    LINEAR_MIPMAP_LINEAR = _osg.Texture_LINEAR_MIPMAP_LINEAR
    LINEAR_MIPMAP_NEAREST = _osg.Texture_LINEAR_MIPMAP_NEAREST
    NEAREST = _osg.Texture_NEAREST
    NEAREST_MIPMAP_LINEAR = _osg.Texture_NEAREST_MIPMAP_LINEAR
    NEAREST_MIPMAP_NEAREST = _osg.Texture_NEAREST_MIPMAP_NEAREST
    def setFilter(self, *args):
        """setFilter(self, FilterParameter which, FilterMode filter)"""
        return _osg.Texture_setFilter(self, *args)

    def getFilter(self, *args):
        """getFilter(self, FilterParameter which) -> FilterMode"""
        return _osg.Texture_getFilter(self, *args)

    def setMaxAnisotropy(self, *args):
        """setMaxAnisotropy(self, float anis)"""
        return _osg.Texture_setMaxAnisotropy(self, *args)

    def getMaxAnisotropy(self):
        """getMaxAnisotropy(self) -> float"""
        return _osg.Texture_getMaxAnisotropy(self)

    def setUseHardwareMipMapGeneration(self, *args):
        """setUseHardwareMipMapGeneration(self, bool useHardwareMipMapGeneration)"""
        return _osg.Texture_setUseHardwareMipMapGeneration(self, *args)

    def getUseHardwareMipMapGeneration(self):
        """getUseHardwareMipMapGeneration(self) -> bool"""
        return _osg.Texture_getUseHardwareMipMapGeneration(self)

    def setUnRefImageDataAfterApply(self, *args):
        """setUnRefImageDataAfterApply(self, bool flag)"""
        return _osg.Texture_setUnRefImageDataAfterApply(self, *args)

    def getUnRefImageDataAfterApply(self):
        """getUnRefImageDataAfterApply(self) -> bool"""
        return _osg.Texture_getUnRefImageDataAfterApply(self)

    def setClientStorageHint(self, *args):
        """setClientStorageHint(self, bool flag)"""
        return _osg.Texture_setClientStorageHint(self, *args)

    def getClientStorageHint(self):
        """getClientStorageHint(self) -> bool"""
        return _osg.Texture_getClientStorageHint(self)

    def setResizeNonPowerOfTwoHint(self, *args):
        """setResizeNonPowerOfTwoHint(self, bool flag)"""
        return _osg.Texture_setResizeNonPowerOfTwoHint(self, *args)

    def getResizeNonPowerOfTwoHint(self):
        """getResizeNonPowerOfTwoHint(self) -> bool"""
        return _osg.Texture_getResizeNonPowerOfTwoHint(self)

    USE_IMAGE_DATA_FORMAT = _osg.Texture_USE_IMAGE_DATA_FORMAT
    USE_USER_DEFINED_FORMAT = _osg.Texture_USE_USER_DEFINED_FORMAT
    USE_ARB_COMPRESSION = _osg.Texture_USE_ARB_COMPRESSION
    USE_S3TC_DXT1_COMPRESSION = _osg.Texture_USE_S3TC_DXT1_COMPRESSION
    USE_S3TC_DXT3_COMPRESSION = _osg.Texture_USE_S3TC_DXT3_COMPRESSION
    USE_S3TC_DXT5_COMPRESSION = _osg.Texture_USE_S3TC_DXT5_COMPRESSION
    USE_PVRTC_2BPP_COMPRESSION = _osg.Texture_USE_PVRTC_2BPP_COMPRESSION
    USE_PVRTC_4BPP_COMPRESSION = _osg.Texture_USE_PVRTC_4BPP_COMPRESSION
    USE_ETC_COMPRESSION = _osg.Texture_USE_ETC_COMPRESSION
    USE_RGTC1_COMPRESSION = _osg.Texture_USE_RGTC1_COMPRESSION
    USE_RGTC2_COMPRESSION = _osg.Texture_USE_RGTC2_COMPRESSION
    USE_S3TC_DXT1c_COMPRESSION = _osg.Texture_USE_S3TC_DXT1c_COMPRESSION
    USE_S3TC_DXT1a_COMPRESSION = _osg.Texture_USE_S3TC_DXT1a_COMPRESSION
    def setInternalFormatMode(self, *args):
        """setInternalFormatMode(self, InternalFormatMode mode)"""
        return _osg.Texture_setInternalFormatMode(self, *args)

    def getInternalFormatMode(self):
        """getInternalFormatMode(self) -> InternalFormatMode"""
        return _osg.Texture_getInternalFormatMode(self)

    def setInternalFormat(self, *args):
        """setInternalFormat(self, GLint internalFormat)"""
        return _osg.Texture_setInternalFormat(self, *args)

    def getInternalFormat(self):
        """getInternalFormat(self) -> GLint"""
        return _osg.Texture_getInternalFormat(self)

    def setSourceFormat(self, *args):
        """setSourceFormat(self, GLenum sourceFormat)"""
        return _osg.Texture_setSourceFormat(self, *args)

    def getSourceFormat(self):
        """getSourceFormat(self) -> GLenum"""
        return _osg.Texture_getSourceFormat(self)

    def setSourceType(self, *args):
        """setSourceType(self, GLenum sourceType)"""
        return _osg.Texture_setSourceType(self, *args)

    def getSourceType(self):
        """getSourceType(self) -> GLenum"""
        return _osg.Texture_getSourceType(self)

    NORMALIZED = _osg.Texture_NORMALIZED
    FLOAT = _osg.Texture_FLOAT
    SIGNED_INTEGER = _osg.Texture_SIGNED_INTEGER
    UNSIGNED_INTEGER = _osg.Texture_UNSIGNED_INTEGER
    def getInternalFormatType(self):
        """getInternalFormatType(self) -> InternalFormatType"""
        return _osg.Texture_getInternalFormatType(self)

    def getTextureObject(self, *args):
        """getTextureObject(self, unsigned int contextID) -> TextureObject"""
        return _osg.Texture_getTextureObject(self, *args)

    def setTextureObject(self, *args):
        """setTextureObject(self, unsigned int contextID, TextureObject to)"""
        return _osg.Texture_setTextureObject(self, *args)

    def dirtyTextureObject(self):
        """dirtyTextureObject(self)"""
        return _osg.Texture_dirtyTextureObject(self)

    def areAllTextureObjectsLoaded(self):
        """areAllTextureObjectsLoaded(self) -> bool"""
        return _osg.Texture_areAllTextureObjectsLoaded(self)

    def getTextureParameterDirty(self, *args):
        """getTextureParameterDirty(self, unsigned int contextID) -> unsigned int"""
        return _osg.Texture_getTextureParameterDirty(self, *args)

    def dirtyTextureParameters(self):
        """dirtyTextureParameters(self)"""
        return _osg.Texture_dirtyTextureParameters(self)

    def allocateMipmapLevels(self):
        """allocateMipmapLevels(self)"""
        return _osg.Texture_allocateMipmapLevels(self)

    def setShadowComparison(self, *args):
        """setShadowComparison(self, bool flag)"""
        return _osg.Texture_setShadowComparison(self, *args)

    def getShadowComparison(self):
        """getShadowComparison(self) -> bool"""
        return _osg.Texture_getShadowComparison(self)

    NEVER = _osg.Texture_NEVER
    LESS = _osg.Texture_LESS
    EQUAL = _osg.Texture_EQUAL
    LEQUAL = _osg.Texture_LEQUAL
    GREATER = _osg.Texture_GREATER
    NOTEQUAL = _osg.Texture_NOTEQUAL
    GEQUAL = _osg.Texture_GEQUAL
    ALWAYS = _osg.Texture_ALWAYS
    def setShadowCompareFunc(self, *args):
        """setShadowCompareFunc(self, ShadowCompareFunc func)"""
        return _osg.Texture_setShadowCompareFunc(self, *args)

    def getShadowCompareFunc(self):
        """getShadowCompareFunc(self) -> ShadowCompareFunc"""
        return _osg.Texture_getShadowCompareFunc(self)

    LUMINANCE = _osg.Texture_LUMINANCE
    INTENSITY = _osg.Texture_INTENSITY
    ALPHA = _osg.Texture_ALPHA
    def setShadowTextureMode(self, *args):
        """setShadowTextureMode(self, ShadowTextureMode mode)"""
        return _osg.Texture_setShadowTextureMode(self, *args)

    def getShadowTextureMode(self):
        """getShadowTextureMode(self) -> ShadowTextureMode"""
        return _osg.Texture_getShadowTextureMode(self)

    def setShadowAmbient(self, *args):
        """setShadowAmbient(self, float shadow_ambient)"""
        return _osg.Texture_setShadowAmbient(self, *args)

    def getShadowAmbient(self):
        """getShadowAmbient(self) -> float"""
        return _osg.Texture_getShadowAmbient(self)

    def setImage(self, *args):
        """setImage(self, unsigned int face, Image image)"""
        return _osg.Texture_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self, unsigned int face) -> Image
        getImage(self, unsigned int face) -> Image
        """
        return _osg.Texture_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.Texture_getNumImages(self)

    def setReadPBuffer(self, *args):
        """setReadPBuffer(self, GraphicsContext context)"""
        return _osg.Texture_setReadPBuffer(self, *args)

    def getReadPBuffer(self, *args):
        """
        getReadPBuffer(self) -> GraphicsContext
        getReadPBuffer(self) -> GraphicsContext
        """
        return _osg.Texture_getReadPBuffer(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Texture_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State state)"""
        return _osg.Texture_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Texture_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.Texture_releaseGLObjects(self, state)

    def isCompressedInternalFormat(*args):
        """
        isCompressedInternalFormat() -> bool
        isCompressedInternalFormat(GLint internalFormat) -> bool
        """
        return _osg.Texture_isCompressedInternalFormat(*args)

    if _newclass:isCompressedInternalFormat = staticmethod(isCompressedInternalFormat)
    __swig_getmethods__["isCompressedInternalFormat"] = lambda x: isCompressedInternalFormat
    def getCompressedSize(*args):
        """
        getCompressedSize(GLenum internalFormat, GLint width, GLint height, GLint depth, 
            GLint blockSize, GLint size)
        """
        return _osg.Texture_getCompressedSize(*args)

    if _newclass:getCompressedSize = staticmethod(getCompressedSize)
    __swig_getmethods__["getCompressedSize"] = lambda x: getCompressedSize
    def applyTexImage2D_load(self, *args):
        """
        applyTexImage2D_load(self, State state, GLenum target, Image image, GLsizei width, 
            GLsizei height, GLsizei numMipmapLevels)
        """
        return _osg.Texture_applyTexImage2D_load(self, *args)

    def applyTexImage2D_subload(self, *args):
        """
        applyTexImage2D_subload(self, State state, GLenum target, Image image, GLsizei width, 
            GLsizei height, GLint inInternalFormat, 
            GLsizei numMipmapLevels)
        """
        return _osg.Texture_applyTexImage2D_subload(self, *args)

    GENERATE_MIPMAP_NONE = _osg.Texture_GENERATE_MIPMAP_NONE
    GENERATE_MIPMAP = _osg.Texture_GENERATE_MIPMAP
    GENERATE_MIPMAP_TEX_PARAMETER = _osg.Texture_GENERATE_MIPMAP_TEX_PARAMETER
    def generateTextureObject(*args):
        """
        generateTextureObject(Texture texture, unsigned int contextID, GLenum target) -> TextureObject
        generateTextureObject(Texture texture, unsigned int contextID, GLenum target, 
            GLint numMipmapLevels, GLenum internalFormat, 
            GLsizei width, GLsizei height, GLsizei depth, 
            GLint border) -> TextureObject
        """
        return _osg.Texture_generateTextureObject(*args)

    if _newclass:generateTextureObject = staticmethod(generateTextureObject)
    __swig_getmethods__["generateTextureObject"] = lambda x: generateTextureObject
    def deleteAllTextureObjects(*args):
        """deleteAllTextureObjects(unsigned int contextID)"""
        return _osg.Texture_deleteAllTextureObjects(*args)

    if _newclass:deleteAllTextureObjects = staticmethod(deleteAllTextureObjects)
    __swig_getmethods__["deleteAllTextureObjects"] = lambda x: deleteAllTextureObjects
    def discardAllTextureObjects(*args):
        """discardAllTextureObjects(unsigned int contextID)"""
        return _osg.Texture_discardAllTextureObjects(*args)

    if _newclass:discardAllTextureObjects = staticmethod(discardAllTextureObjects)
    __swig_getmethods__["discardAllTextureObjects"] = lambda x: discardAllTextureObjects
    def flushAllDeletedTextureObjects(*args):
        """flushAllDeletedTextureObjects(unsigned int contextID)"""
        return _osg.Texture_flushAllDeletedTextureObjects(*args)

    if _newclass:flushAllDeletedTextureObjects = staticmethod(flushAllDeletedTextureObjects)
    __swig_getmethods__["flushAllDeletedTextureObjects"] = lambda x: flushAllDeletedTextureObjects
    def discardAllDeletedTextureObjects(*args):
        """discardAllDeletedTextureObjects(unsigned int contextID)"""
        return _osg.Texture_discardAllDeletedTextureObjects(*args)

    if _newclass:discardAllDeletedTextureObjects = staticmethod(discardAllDeletedTextureObjects)
    __swig_getmethods__["discardAllDeletedTextureObjects"] = lambda x: discardAllDeletedTextureObjects
    def flushDeletedTextureObjects(*args):
        """flushDeletedTextureObjects(unsigned int contextID, double currentTime, double availableTime)"""
        return _osg.Texture_flushDeletedTextureObjects(*args)

    if _newclass:flushDeletedTextureObjects = staticmethod(flushDeletedTextureObjects)
    __swig_getmethods__["flushDeletedTextureObjects"] = lambda x: flushDeletedTextureObjects
    def releaseTextureObject(*args):
        """releaseTextureObject(unsigned int contextID, TextureObject to)"""
        return _osg.Texture_releaseTextureObject(*args)

    if _newclass:releaseTextureObject = staticmethod(releaseTextureObject)
    __swig_getmethods__["releaseTextureObject"] = lambda x: releaseTextureObject
Texture_swigregister = _osg.Texture_swigregister
Texture_swigregister(Texture)

def Texture_isCompressedInternalFormat(*args):
  """
    isCompressedInternalFormat() -> bool
    Texture_isCompressedInternalFormat(GLint internalFormat) -> bool
    """
  return _osg.Texture_isCompressedInternalFormat(*args)

def Texture_getCompressedSize(*args):
  """
    Texture_getCompressedSize(GLenum internalFormat, GLint width, GLint height, GLint depth, 
        GLint blockSize, GLint size)
    """
  return _osg.Texture_getCompressedSize(*args)

def Texture_generateTextureObject(*args):
  """
    generateTextureObject(Texture texture, unsigned int contextID, GLenum target) -> TextureObject
    Texture_generateTextureObject(Texture texture, unsigned int contextID, GLenum target, 
        GLint numMipmapLevels, GLenum internalFormat, 
        GLsizei width, GLsizei height, GLsizei depth, 
        GLint border) -> TextureObject
    """
  return _osg.Texture_generateTextureObject(*args)

def Texture_deleteAllTextureObjects(*args):
  """Texture_deleteAllTextureObjects(unsigned int contextID)"""
  return _osg.Texture_deleteAllTextureObjects(*args)

def Texture_discardAllTextureObjects(*args):
  """Texture_discardAllTextureObjects(unsigned int contextID)"""
  return _osg.Texture_discardAllTextureObjects(*args)

def Texture_flushAllDeletedTextureObjects(*args):
  """Texture_flushAllDeletedTextureObjects(unsigned int contextID)"""
  return _osg.Texture_flushAllDeletedTextureObjects(*args)

def Texture_discardAllDeletedTextureObjects(*args):
  """Texture_discardAllDeletedTextureObjects(unsigned int contextID)"""
  return _osg.Texture_discardAllDeletedTextureObjects(*args)

def Texture_flushDeletedTextureObjects(*args):
  """Texture_flushDeletedTextureObjects(unsigned int contextID, double currentTime, double availableTime)"""
  return _osg.Texture_flushDeletedTextureObjects(*args)

def Texture_releaseTextureObject(*args):
  """Texture_releaseTextureObject(unsigned int contextID, TextureObject to)"""
  return _osg.Texture_releaseTextureObject(*args)

OSG_TEXMAT = _osg.OSG_TEXMAT
class TexMat(StateAttribute):
    """Proxy of C++ osg::TexMat class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexMat, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexMat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TexMat
        __init__(self, Matrix matrix) -> TexMat
        __init__(self, TexMat texmat, CopyOp copyop = SHALLOW_COPY) -> TexMat
        __init__(self, TexMat texmat) -> TexMat
        """
        this = _osg.new_TexMat(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TexMat_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TexMat_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TexMat_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TexMat_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TexMat_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TexMat_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.TexMat_isTextureAttribute(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.TexMat_compare(self, *args)

    def setMatrix(self, *args):
        """setMatrix(self, Matrix matrix)"""
        return _osg.TexMat_setMatrix(self, *args)

    def getMatrix(self, *args):
        """
        getMatrix(self) -> Matrix
        getMatrix(self) -> Matrix
        """
        return _osg.TexMat_getMatrix(self, *args)

    def setScaleByTextureRectangleSize(self, *args):
        """setScaleByTextureRectangleSize(self, bool flag)"""
        return _osg.TexMat_setScaleByTextureRectangleSize(self, *args)

    def getScaleByTextureRectangleSize(self):
        """getScaleByTextureRectangleSize(self) -> bool"""
        return _osg.TexMat_getScaleByTextureRectangleSize(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TexMat_apply(self, *args)

TexMat_swigregister = _osg.TexMat_swigregister
TexMat_swigregister(TexMat)

OSG_TEXTURE1D = _osg.OSG_TEXTURE1D
class Texture1D(Texture):
    """Proxy of C++ osg::Texture1D class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture1D, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Texture1D
        __init__(self, Image image) -> Texture1D
        __init__(self, Texture1D text, CopyOp copyop = SHALLOW_COPY) -> Texture1D
        __init__(self, Texture1D text) -> Texture1D
        """
        this = _osg.new_Texture1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Texture1D_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Texture1D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Texture1D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Texture1D_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Texture1D_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Texture1D_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute rhs) -> int"""
        return _osg.Texture1D_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.Texture1D_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(self, unsigned int contextID) -> unsigned int"""
        return _osg.Texture1D_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(self, Image image)
        setImage(self, unsigned int arg0, Image image)
        """
        return _osg.Texture1D_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self) -> Image
        getImage(self) -> Image
        getImage(self, unsigned int arg0) -> Image
        getImage(self, unsigned int arg0) -> Image
        """
        return _osg.Texture1D_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.Texture1D_getNumImages(self)

    def setTextureWidth(self, *args):
        """setTextureWidth(self, int width)"""
        return _osg.Texture1D_setTextureWidth(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.Texture1D_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.Texture1D_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.Texture1D_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(self, unsigned int num)"""
        return _osg.Texture1D_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(self) -> unsigned int"""
        return _osg.Texture1D_getNumMipmapLevels(self)

    def copyTexImage1D(self, *args):
        """copyTexImage1D(self, State state, int x, int y, int width)"""
        return _osg.Texture1D_copyTexImage1D(self, *args)

    def copyTexSubImage1D(self, *args):
        """copyTexSubImage1D(self, State state, int xoffset, int x, int y, int width)"""
        return _osg.Texture1D_copyTexSubImage1D(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Texture1D_apply(self, *args)

Texture1D_swigregister = _osg.Texture1D_swigregister
Texture1D_swigregister(Texture1D)

OSG_TEXTURE2D = _osg.OSG_TEXTURE2D
class Texture2D(Texture):
    """Proxy of C++ osg::Texture2D class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture2D, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Texture2D
        __init__(self, Image image) -> Texture2D
        __init__(self, Texture2D text, CopyOp copyop = SHALLOW_COPY) -> Texture2D
        __init__(self, Texture2D text) -> Texture2D
        """
        this = _osg.new_Texture2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Texture2D_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Texture2D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Texture2D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Texture2D_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Texture2D_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Texture2D_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute rhs) -> int"""
        return _osg.Texture2D_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.Texture2D_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(self, unsigned int contextID) -> unsigned int"""
        return _osg.Texture2D_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(self, Image image)
        setImage(self, unsigned int arg0, Image image)
        """
        return _osg.Texture2D_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self) -> Image
        getImage(self) -> Image
        getImage(self, unsigned int arg0) -> Image
        getImage(self, unsigned int arg0) -> Image
        """
        return _osg.Texture2D_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.Texture2D_getNumImages(self)

    def setTextureSize(self, *args):
        """setTextureSize(self, int width, int height)"""
        return _osg.Texture2D_setTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(self, int width)"""
        return _osg.Texture2D_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(self, int height)"""
        return _osg.Texture2D_setTextureHeight(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.Texture2D_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.Texture2D_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.Texture2D_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(self, unsigned int num)"""
        return _osg.Texture2D_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(self) -> unsigned int"""
        return _osg.Texture2D_getNumMipmapLevels(self)

    def copyTexImage2D(self, *args):
        """copyTexImage2D(self, State state, int x, int y, int width, int height)"""
        return _osg.Texture2D_copyTexImage2D(self, *args)

    def copyTexSubImage2D(self, *args):
        """
        copyTexSubImage2D(self, State state, int xoffset, int yoffset, int x, int y, 
            int width, int height)
        """
        return _osg.Texture2D_copyTexSubImage2D(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Texture2D_apply(self, *args)

Texture2D_swigregister = _osg.Texture2D_swigregister
Texture2D_swigregister(Texture2D)

OSG_TEXTURE3D = _osg.OSG_TEXTURE3D
GL_MAX_3D_TEXTURE_SIZE = _osg.GL_MAX_3D_TEXTURE_SIZE
class Texture3D(Texture):
    """Proxy of C++ osg::Texture3D class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Texture3D
        __init__(self, Image image) -> Texture3D
        __init__(self, Texture3D text, CopyOp copyop = SHALLOW_COPY) -> Texture3D
        __init__(self, Texture3D text) -> Texture3D
        """
        this = _osg.new_Texture3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Texture3D_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Texture3D_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Texture3D_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Texture3D_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Texture3D_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Texture3D_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute rhs) -> int"""
        return _osg.Texture3D_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.Texture3D_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(self, unsigned int contextID) -> unsigned int"""
        return _osg.Texture3D_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(self, Image image)
        setImage(self, unsigned int arg0, Image image)
        """
        return _osg.Texture3D_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self) -> Image
        getImage(self) -> Image
        getImage(self, unsigned int arg0) -> Image
        getImage(self, unsigned int arg0) -> Image
        """
        return _osg.Texture3D_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.Texture3D_getNumImages(self)

    def setTextureSize(self, *args):
        """setTextureSize(self, int width, int height, int depth)"""
        return _osg.Texture3D_setTextureSize(self, *args)

    def getTextureSize(self, *args):
        """getTextureSize(self, int width, int height, int depth)"""
        return _osg.Texture3D_getTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(self, int width)"""
        return _osg.Texture3D_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(self, int height)"""
        return _osg.Texture3D_setTextureHeight(self, *args)

    def setTextureDepth(self, *args):
        """setTextureDepth(self, int depth)"""
        return _osg.Texture3D_setTextureDepth(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.Texture3D_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.Texture3D_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.Texture3D_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(self, unsigned int num)"""
        return _osg.Texture3D_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(self) -> unsigned int"""
        return _osg.Texture3D_getNumMipmapLevels(self)

    def copyTexSubImage3D(self, *args):
        """
        copyTexSubImage3D(self, State state, int xoffset, int yoffset, int zoffset, 
            int x, int y, int width, int height)
        """
        return _osg.Texture3D_copyTexSubImage3D(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Texture3D_apply(self, *args)

Texture3D_swigregister = _osg.Texture3D_swigregister
Texture3D_swigregister(Texture3D)

OSG_TEXTURECUBEMAP = _osg.OSG_TEXTURECUBEMAP
class TextureCubeMap(Texture):
    """Proxy of C++ osg::TextureCubeMap class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureCubeMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureCubeMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TextureCubeMap
        __init__(self, TextureCubeMap cm, CopyOp copyop = SHALLOW_COPY) -> TextureCubeMap
        __init__(self, TextureCubeMap cm) -> TextureCubeMap
        """
        this = _osg.new_TextureCubeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TextureCubeMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TextureCubeMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TextureCubeMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TextureCubeMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TextureCubeMap_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TextureCubeMap_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute rhs) -> int"""
        return _osg.TextureCubeMap_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.TextureCubeMap_getTextureTarget(self)

    POSITIVE_X = _osg.TextureCubeMap_POSITIVE_X
    NEGATIVE_X = _osg.TextureCubeMap_NEGATIVE_X
    POSITIVE_Y = _osg.TextureCubeMap_POSITIVE_Y
    NEGATIVE_Y = _osg.TextureCubeMap_NEGATIVE_Y
    POSITIVE_Z = _osg.TextureCubeMap_POSITIVE_Z
    NEGATIVE_Z = _osg.TextureCubeMap_NEGATIVE_Z
    def setImage(self, *args):
        """setImage(self, unsigned int face, Image image)"""
        return _osg.TextureCubeMap_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self, unsigned int face) -> Image
        getImage(self, unsigned int face) -> Image
        """
        return _osg.TextureCubeMap_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.TextureCubeMap_getNumImages(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(self, unsigned int face, unsigned int contextID) -> unsigned int"""
        return _osg.TextureCubeMap_getModifiedCount(self, *args)

    def setTextureSize(self, *args):
        """setTextureSize(self, int width, int height)"""
        return _osg.TextureCubeMap_setTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(self, int width)"""
        return _osg.TextureCubeMap_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(self, int height)"""
        return _osg.TextureCubeMap_setTextureHeight(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.TextureCubeMap_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.TextureCubeMap_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.TextureCubeMap_getTextureDepth(self)

    def setNumMipmapLevels(self, *args):
        """setNumMipmapLevels(self, unsigned int num)"""
        return _osg.TextureCubeMap_setNumMipmapLevels(self, *args)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(self) -> unsigned int"""
        return _osg.TextureCubeMap_getNumMipmapLevels(self)

    def copyTexSubImageCubeMap(self, *args):
        """
        copyTexSubImageCubeMap(self, State state, int face, int xoffset, int yoffset, int x, 
            int y, int width, int height)
        """
        return _osg.TextureCubeMap_copyTexSubImageCubeMap(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TextureCubeMap_apply(self, *args)

TextureCubeMap_swigregister = _osg.TextureCubeMap_swigregister
TextureCubeMap_swigregister(TextureCubeMap)

OSG_TEXTURERECTANGLE = _osg.OSG_TEXTURERECTANGLE
GL_TEXTURE_RECTANGLE_NV = _osg.GL_TEXTURE_RECTANGLE_NV
GL_TEXTURE_RECTANGLE = _osg.GL_TEXTURE_RECTANGLE
class TextureRectangle(Texture):
    """Proxy of C++ osg::TextureRectangle class"""
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureRectangle, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureRectangle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TextureRectangle
        __init__(self, Image image) -> TextureRectangle
        __init__(self, TextureRectangle text, CopyOp copyop = SHALLOW_COPY) -> TextureRectangle
        __init__(self, TextureRectangle text) -> TextureRectangle
        """
        this = _osg.new_TextureRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TextureRectangle_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TextureRectangle_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TextureRectangle_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TextureRectangle_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TextureRectangle_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TextureRectangle_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute rhs) -> int"""
        return _osg.TextureRectangle_compare(self, *args)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.TextureRectangle_getTextureTarget(self)

    def getModifiedCount(self, *args):
        """getModifiedCount(self, unsigned int contextID) -> unsigned int"""
        return _osg.TextureRectangle_getModifiedCount(self, *args)

    def setImage(self, *args):
        """
        setImage(self, Image image)
        setImage(self, unsigned int arg0, Image image)
        """
        return _osg.TextureRectangle_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self) -> Image
        getImage(self) -> Image
        getImage(self, unsigned int arg0) -> Image
        getImage(self, unsigned int arg0) -> Image
        """
        return _osg.TextureRectangle_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.TextureRectangle_getNumImages(self)

    def setTextureSize(self, *args):
        """setTextureSize(self, int width, int height)"""
        return _osg.TextureRectangle_setTextureSize(self, *args)

    def setTextureWidth(self, *args):
        """setTextureWidth(self, int width)"""
        return _osg.TextureRectangle_setTextureWidth(self, *args)

    def setTextureHeight(self, *args):
        """setTextureHeight(self, int height)"""
        return _osg.TextureRectangle_setTextureHeight(self, *args)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.TextureRectangle_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.TextureRectangle_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.TextureRectangle_getTextureDepth(self)

    def copyTexImage2D(self, *args):
        """copyTexImage2D(self, State state, int x, int y, int width, int height)"""
        return _osg.TextureRectangle_copyTexImage2D(self, *args)

    def copyTexSubImage2D(self, *args):
        """
        copyTexSubImage2D(self, State state, int xoffset, int yoffset, int x, int y, 
            int width, int height)
        """
        return _osg.TextureRectangle_copyTexSubImage2D(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TextureRectangle_apply(self, *args)

TextureRectangle_swigregister = _osg.TextureRectangle_swigregister
TextureRectangle_swigregister(TextureRectangle)

OSG_VERTEXPROGRAM = _osg.OSG_VERTEXPROGRAM
GL_VERTEX_PROGRAM_ARB = _osg.GL_VERTEX_PROGRAM_ARB
GL_VERTEX_PROGRAM_POINT_SIZE_ARB = _osg.GL_VERTEX_PROGRAM_POINT_SIZE_ARB
GL_VERTEX_PROGRAM_TWO_SIDE_ARB = _osg.GL_VERTEX_PROGRAM_TWO_SIDE_ARB
GL_COLOR_SUM_ARB = _osg.GL_COLOR_SUM_ARB
GL_PROGRAM_FORMAT_ASCII_ARB = _osg.GL_PROGRAM_FORMAT_ASCII_ARB
GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
GL_CURRENT_VERTEX_ATTRIB_ARB = _osg.GL_CURRENT_VERTEX_ATTRIB_ARB
GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = _osg.GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
GL_PROGRAM_LENGTH_ARB = _osg.GL_PROGRAM_LENGTH_ARB
GL_PROGRAM_FORMAT_ARB = _osg.GL_PROGRAM_FORMAT_ARB
GL_PROGRAM_BINDING_ARB = _osg.GL_PROGRAM_BINDING_ARB
GL_PROGRAM_INSTRUCTIONS_ARB = _osg.GL_PROGRAM_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_INSTRUCTIONS_ARB = _osg.GL_MAX_PROGRAM_INSTRUCTIONS_ARB
GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _osg.GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
GL_PROGRAM_TEMPORARIES_ARB = _osg.GL_PROGRAM_TEMPORARIES_ARB
GL_MAX_PROGRAM_TEMPORARIES_ARB = _osg.GL_MAX_PROGRAM_TEMPORARIES_ARB
GL_PROGRAM_NATIVE_TEMPORARIES_ARB = _osg.GL_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = _osg.GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
GL_PROGRAM_PARAMETERS_ARB = _osg.GL_PROGRAM_PARAMETERS_ARB
GL_MAX_PROGRAM_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_PARAMETERS_ARB
GL_PROGRAM_NATIVE_PARAMETERS_ARB = _osg.GL_PROGRAM_NATIVE_PARAMETERS_ARB
GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
GL_PROGRAM_ATTRIBS_ARB = _osg.GL_PROGRAM_ATTRIBS_ARB
GL_MAX_PROGRAM_ATTRIBS_ARB = _osg.GL_MAX_PROGRAM_ATTRIBS_ARB
GL_PROGRAM_NATIVE_ATTRIBS_ARB = _osg.GL_PROGRAM_NATIVE_ATTRIBS_ARB
GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
GL_PROGRAM_ADDRESS_REGISTERS_ARB = _osg.GL_PROGRAM_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = _osg.GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _osg.GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = _osg.GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = _osg.GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = _osg.GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
GL_PROGRAM_STRING_ARB = _osg.GL_PROGRAM_STRING_ARB
GL_PROGRAM_ERROR_POSITION_ARB = _osg.GL_PROGRAM_ERROR_POSITION_ARB
GL_CURRENT_MATRIX_ARB = _osg.GL_CURRENT_MATRIX_ARB
GL_TRANSPOSE_CURRENT_MATRIX_ARB = _osg.GL_TRANSPOSE_CURRENT_MATRIX_ARB
GL_CURRENT_MATRIX_STACK_DEPTH_ARB = _osg.GL_CURRENT_MATRIX_STACK_DEPTH_ARB
GL_MAX_VERTEX_ATTRIBS_ARB = _osg.GL_MAX_VERTEX_ATTRIBS_ARB
GL_MAX_PROGRAM_MATRICES_ARB = _osg.GL_MAX_PROGRAM_MATRICES_ARB
GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = _osg.GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
GL_PROGRAM_ERROR_STRING_ARB = _osg.GL_PROGRAM_ERROR_STRING_ARB
GL_MATRIX0_ARB = _osg.GL_MATRIX0_ARB
GL_MATRIX1_ARB = _osg.GL_MATRIX1_ARB
GL_MATRIX2_ARB = _osg.GL_MATRIX2_ARB
GL_MATRIX3_ARB = _osg.GL_MATRIX3_ARB
GL_MATRIX4_ARB = _osg.GL_MATRIX4_ARB
GL_MATRIX5_ARB = _osg.GL_MATRIX5_ARB
GL_MATRIX6_ARB = _osg.GL_MATRIX6_ARB
GL_MATRIX7_ARB = _osg.GL_MATRIX7_ARB
GL_MATRIX8_ARB = _osg.GL_MATRIX8_ARB
GL_MATRIX9_ARB = _osg.GL_MATRIX9_ARB
GL_MATRIX10_ARB = _osg.GL_MATRIX10_ARB
GL_MATRIX11_ARB = _osg.GL_MATRIX11_ARB
GL_MATRIX12_ARB = _osg.GL_MATRIX12_ARB
GL_MATRIX13_ARB = _osg.GL_MATRIX13_ARB
GL_MATRIX14_ARB = _osg.GL_MATRIX14_ARB
GL_MATRIX15_ARB = _osg.GL_MATRIX15_ARB
GL_MATRIX16_ARB = _osg.GL_MATRIX16_ARB
GL_MATRIX17_ARB = _osg.GL_MATRIX17_ARB
GL_MATRIX18_ARB = _osg.GL_MATRIX18_ARB
GL_MATRIX19_ARB = _osg.GL_MATRIX19_ARB
GL_MATRIX20_ARB = _osg.GL_MATRIX20_ARB
GL_MATRIX21_ARB = _osg.GL_MATRIX21_ARB
GL_MATRIX22_ARB = _osg.GL_MATRIX22_ARB
GL_MATRIX23_ARB = _osg.GL_MATRIX23_ARB
GL_MATRIX24_ARB = _osg.GL_MATRIX24_ARB
GL_MATRIX25_ARB = _osg.GL_MATRIX25_ARB
GL_MATRIX26_ARB = _osg.GL_MATRIX26_ARB
GL_MATRIX27_ARB = _osg.GL_MATRIX27_ARB
GL_MATRIX28_ARB = _osg.GL_MATRIX28_ARB
GL_MATRIX29_ARB = _osg.GL_MATRIX29_ARB
GL_MATRIX30_ARB = _osg.GL_MATRIX30_ARB
GL_MATRIX31_ARB = _osg.GL_MATRIX31_ARB
class VertexProgram(StateAttribute):
    """Proxy of C++ osg::VertexProgram class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexProgram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VertexProgram
        __init__(self, VertexProgram vp, CopyOp copyop = SHALLOW_COPY) -> VertexProgram
        __init__(self, VertexProgram vp) -> VertexProgram
        """
        this = _osg.new_VertexProgram(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.VertexProgram_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.VertexProgram_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.VertexProgram_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.VertexProgram_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.VertexProgram_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.VertexProgram_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.VertexProgram_compare(self, *args)

    def getVertexProgramID(self, *args):
        """getVertexProgramID(self, unsigned int contextID) -> GLuint"""
        return _osg.VertexProgram_getVertexProgramID(self, *args)

    def setVertexProgram(self, *args):
        """
        setVertexProgram(self, char program)
        setVertexProgram(self, string program)
        """
        return _osg.VertexProgram_setVertexProgram(self, *args)

    def getVertexProgram(self):
        """getVertexProgram(self) -> string"""
        return _osg.VertexProgram_getVertexProgram(self)

    def setProgramLocalParameter(self, *args):
        """setProgramLocalParameter(self, GLuint index, Vec4 p)"""
        return _osg.VertexProgram_setProgramLocalParameter(self, *args)

    def setLocalParameters(self, *args):
        """setLocalParameters(self, LocalParamList lpl)"""
        return _osg.VertexProgram_setLocalParameters(self, *args)

    def getLocalParameters(self, *args):
        """
        getLocalParameters(self) -> LocalParamList
        getLocalParameters(self) -> LocalParamList
        """
        return _osg.VertexProgram_getLocalParameters(self, *args)

    def setMatrix(self, *args):
        """setMatrix(self, GLenum mode, Matrix matrix)"""
        return _osg.VertexProgram_setMatrix(self, *args)

    def setMatrices(self, *args):
        """setMatrices(self, MatrixList matrices)"""
        return _osg.VertexProgram_setMatrices(self, *args)

    def getMatrices(self, *args):
        """
        getMatrices(self) -> MatrixList
        getMatrices(self) -> MatrixList
        """
        return _osg.VertexProgram_getMatrices(self, *args)

    def dirtyVertexProgramObject(self):
        """dirtyVertexProgramObject(self)"""
        return _osg.VertexProgram_dirtyVertexProgramObject(self)

    def deleteVertexProgramObject(*args):
        """deleteVertexProgramObject(unsigned int contextID, GLuint handle)"""
        return _osg.VertexProgram_deleteVertexProgramObject(*args)

    if _newclass:deleteVertexProgramObject = staticmethod(deleteVertexProgramObject)
    __swig_getmethods__["deleteVertexProgramObject"] = lambda x: deleteVertexProgramObject
    def flushDeletedVertexProgramObjects(*args):
        """flushDeletedVertexProgramObjects(unsigned int contextID, double currentTime, double availableTime)"""
        return _osg.VertexProgram_flushDeletedVertexProgramObjects(*args)

    if _newclass:flushDeletedVertexProgramObjects = staticmethod(flushDeletedVertexProgramObjects)
    __swig_getmethods__["flushDeletedVertexProgramObjects"] = lambda x: flushDeletedVertexProgramObjects
    def discardDeletedVertexProgramObjects(*args):
        """discardDeletedVertexProgramObjects(unsigned int contextID)"""
        return _osg.VertexProgram_discardDeletedVertexProgramObjects(*args)

    if _newclass:discardDeletedVertexProgramObjects = staticmethod(discardDeletedVertexProgramObjects)
    __swig_getmethods__["discardDeletedVertexProgramObjects"] = lambda x: discardDeletedVertexProgramObjects
    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.VertexProgram_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State state)"""
        return _osg.VertexProgram_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.VertexProgram_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.VertexProgram_releaseGLObjects(self, state)

VertexProgram_swigregister = _osg.VertexProgram_swigregister
VertexProgram_swigregister(VertexProgram)

def VertexProgram_deleteVertexProgramObject(*args):
  """VertexProgram_deleteVertexProgramObject(unsigned int contextID, GLuint handle)"""
  return _osg.VertexProgram_deleteVertexProgramObject(*args)

def VertexProgram_flushDeletedVertexProgramObjects(*args):
  """VertexProgram_flushDeletedVertexProgramObjects(unsigned int contextID, double currentTime, double availableTime)"""
  return _osg.VertexProgram_flushDeletedVertexProgramObjects(*args)

def VertexProgram_discardDeletedVertexProgramObjects(*args):
  """VertexProgram_discardDeletedVertexProgramObjects(unsigned int contextID)"""
  return _osg.VertexProgram_discardDeletedVertexProgramObjects(*args)

OSG_COLORMASK = _osg.OSG_COLORMASK
class ColorMask(StateAttribute):
    """Proxy of C++ osg::ColorMask class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorMask, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorMask, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ColorMask
        __init__(self, bool red, bool green, bool blue, bool alpha) -> ColorMask
        __init__(self, ColorMask cm, CopyOp copyop = SHALLOW_COPY) -> ColorMask
        __init__(self, ColorMask cm) -> ColorMask
        """
        this = _osg.new_ColorMask(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ColorMask_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ColorMask_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ColorMask_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ColorMask_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ColorMask_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.ColorMask_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.ColorMask_compare(self, *args)

    def setMask(self, *args):
        """setMask(self, bool red, bool green, bool blue, bool alpha)"""
        return _osg.ColorMask_setMask(self, *args)

    def setRedMask(self, *args):
        """setRedMask(self, bool mask)"""
        return _osg.ColorMask_setRedMask(self, *args)

    def getRedMask(self):
        """getRedMask(self) -> bool"""
        return _osg.ColorMask_getRedMask(self)

    def setGreenMask(self, *args):
        """setGreenMask(self, bool mask)"""
        return _osg.ColorMask_setGreenMask(self, *args)

    def getGreenMask(self):
        """getGreenMask(self) -> bool"""
        return _osg.ColorMask_getGreenMask(self)

    def setBlueMask(self, *args):
        """setBlueMask(self, bool mask)"""
        return _osg.ColorMask_setBlueMask(self, *args)

    def getBlueMask(self):
        """getBlueMask(self) -> bool"""
        return _osg.ColorMask_getBlueMask(self)

    def setAlphaMask(self, *args):
        """setAlphaMask(self, bool mask)"""
        return _osg.ColorMask_setAlphaMask(self, *args)

    def getAlphaMask(self):
        """getAlphaMask(self) -> bool"""
        return _osg.ColorMask_getAlphaMask(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.ColorMask_apply(self, *args)

ColorMask_swigregister = _osg.ColorMask_swigregister
ColorMask_swigregister(ColorMask)

OSG_CLAMPCOLOR = _osg.OSG_CLAMPCOLOR
GL_RGBA_FLOAT_MODE_ARB = _osg.GL_RGBA_FLOAT_MODE_ARB
GL_CLAMP_VERTEX_COLOR_ARB = _osg.GL_CLAMP_VERTEX_COLOR_ARB
GL_CLAMP_FRAGMENT_COLOR_ARB = _osg.GL_CLAMP_FRAGMENT_COLOR_ARB
GL_CLAMP_READ_COLOR_ARB = _osg.GL_CLAMP_READ_COLOR_ARB
GL_FIXED_ONLY_ARB = _osg.GL_FIXED_ONLY_ARB
GL_FIXED_ONLY = _osg.GL_FIXED_ONLY
GL_CLAMP_VERTEX_COLOR = _osg.GL_CLAMP_VERTEX_COLOR
GL_CLAMP_READ_COLOR = _osg.GL_CLAMP_READ_COLOR
GL_CLAMP_FRAGMENT_COLOR = _osg.GL_CLAMP_FRAGMENT_COLOR
class ClampColor(StateAttribute):
    """Proxy of C++ osg::ClampColor class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClampColor, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClampColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ClampColor
        __init__(self, GLenum vertexMode, GLenum fragmentMode, GLenum readMode) -> ClampColor
        __init__(self, ClampColor rhs, CopyOp copyop = SHALLOW_COPY) -> ClampColor
        __init__(self, ClampColor rhs) -> ClampColor
        """
        this = _osg.new_ClampColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ClampColor_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ClampColor_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ClampColor_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ClampColor_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ClampColor_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.ClampColor_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.ClampColor_compare(self, *args)

    def setClampVertexColor(self, *args):
        """setClampVertexColor(self, GLenum mode)"""
        return _osg.ClampColor_setClampVertexColor(self, *args)

    def getClampVertexColor(self):
        """getClampVertexColor(self) -> GLenum"""
        return _osg.ClampColor_getClampVertexColor(self)

    def setClampFragmentColor(self, *args):
        """setClampFragmentColor(self, GLenum mode)"""
        return _osg.ClampColor_setClampFragmentColor(self, *args)

    def getClampFragmentColor(self):
        """getClampFragmentColor(self) -> GLenum"""
        return _osg.ClampColor_getClampFragmentColor(self)

    def setClampReadColor(self, *args):
        """setClampReadColor(self, GLenum mode)"""
        return _osg.ClampColor_setClampReadColor(self, *args)

    def getClampReadColor(self):
        """getClampReadColor(self) -> GLenum"""
        return _osg.ClampColor_getClampReadColor(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.ClampColor_apply(self, *args)

ClampColor_swigregister = _osg.ClampColor_swigregister
ClampColor_swigregister(ClampColor)

OSG_VIEWPORT = _osg.OSG_VIEWPORT
class Viewport(StateAttribute):
    """Proxy of C++ osg::Viewport class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewport, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Viewport
        __init__(self, value_type x, value_type y, value_type width, value_type height) -> Viewport
        __init__(self, Viewport vp, CopyOp copyop = SHALLOW_COPY) -> Viewport
        __init__(self, Viewport vp) -> Viewport
        """
        this = _osg.new_Viewport(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Viewport_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Viewport_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Viewport_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Viewport_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Viewport_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Viewport_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Viewport_compare(self, *args)

    def setViewport(self, *args):
        """setViewport(self, value_type x, value_type y, value_type width, value_type height)"""
        return _osg.Viewport_setViewport(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Viewport_valid(self)

    def aspectRatio(self):
        """aspectRatio(self) -> double"""
        return _osg.Viewport_aspectRatio(self)

    def computeWindowMatrix(self):
        """computeWindowMatrix(self) -> Matrix"""
        return _osg.Viewport_computeWindowMatrix(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Viewport_apply(self, *args)

    def getX(self):
        """getX(self) -> value_type"""
        return _osg.Viewport_getX(self)

    def getY(self):
        """getY(self) -> value_type"""
        return _osg.Viewport_getY(self)

    def getWidth(self):
        """getWidth(self) -> value_type"""
        return _osg.Viewport_getWidth(self)

    def getHeight(self):
        """getHeight(self) -> value_type"""
        return _osg.Viewport_getHeight(self)

Viewport_swigregister = _osg.Viewport_swigregister
Viewport_swigregister(Viewport)

OSG_SHADER = _osg.OSG_SHADER
class ShaderBinary(Object):
    """Proxy of C++ osg::ShaderBinary class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderBinary, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderBinary, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShaderBinary
        __init__(self, ShaderBinary rhs, CopyOp copyop = SHALLOW_COPY) -> ShaderBinary
        __init__(self, ShaderBinary rhs) -> ShaderBinary
        """
        this = _osg.new_ShaderBinary(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ShaderBinary_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ShaderBinary_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ShaderBinary_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ShaderBinary_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ShaderBinary_className(self)

    def allocate(self, *args):
        """allocate(self, unsigned int size)"""
        return _osg.ShaderBinary_allocate(self, *args)

    def assign(self, *args):
        """assign(self, unsigned int size, unsigned char data)"""
        return _osg.ShaderBinary_assign(self, *args)

    def getSize(self):
        """getSize(self) -> unsigned int"""
        return _osg.ShaderBinary_getSize(self)

    def getData(self, *args):
        """
        getData(self) -> unsigned char
        getData(self) -> unsigned char
        """
        return _osg.ShaderBinary_getData(self, *args)

    def readShaderBinaryFile(*args):
        """readShaderBinaryFile(string fileName) -> ShaderBinary"""
        return _osg.ShaderBinary_readShaderBinaryFile(*args)

    if _newclass:readShaderBinaryFile = staticmethod(readShaderBinaryFile)
    __swig_getmethods__["readShaderBinaryFile"] = lambda x: readShaderBinaryFile
    __swig_destroy__ = _osg.delete_ShaderBinary
    __del__ = lambda self : None;
ShaderBinary_swigregister = _osg.ShaderBinary_swigregister
ShaderBinary_swigregister(ShaderBinary)

def ShaderBinary_readShaderBinaryFile(*args):
  """ShaderBinary_readShaderBinaryFile(string fileName) -> ShaderBinary"""
  return _osg.ShaderBinary_readShaderBinaryFile(*args)

class Shader(Object):
    """Proxy of C++ osg::Shader class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shader, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shader, name)
    __repr__ = _swig_repr
    VERTEX = _osg.Shader_VERTEX
    TESSCONTROL = _osg.Shader_TESSCONTROL
    TESSEVALUATION = _osg.Shader_TESSEVALUATION
    GEOMETRY = _osg.Shader_GEOMETRY
    FRAGMENT = _osg.Shader_FRAGMENT
    UNDEFINED = _osg.Shader_UNDEFINED
    def __init__(self, *args): 
        """
        __init__(self, Type type = UNDEFINED) -> Shader
        __init__(self) -> Shader
        __init__(self, Type type, string source) -> Shader
        __init__(self, Type type, ShaderBinary shaderBinary) -> Shader
        __init__(self, Shader rhs, CopyOp copyop = SHALLOW_COPY) -> Shader
        __init__(self, Shader rhs) -> Shader
        """
        this = _osg.new_Shader(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Shader_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Shader_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Shader_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Shader_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Shader_className(self)

    def compare(self, *args):
        """compare(self, Shader rhs) -> int"""
        return _osg.Shader_compare(self, *args)

    def setType(self, *args):
        """setType(self, Type t) -> bool"""
        return _osg.Shader_setType(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Shader_getType(self)

    def getTypename(self):
        """getTypename(self) -> char"""
        return _osg.Shader_getTypename(self)

    def setFileName(self, *args):
        """setFileName(self, string fileName)"""
        return _osg.Shader_setFileName(self, *args)

    def getFileName(self):
        """getFileName(self) -> string"""
        return _osg.Shader_getFileName(self)

    def setShaderSource(self, *args):
        """setShaderSource(self, string sourceText)"""
        return _osg.Shader_setShaderSource(self, *args)

    def getShaderSource(self):
        """getShaderSource(self) -> string"""
        return _osg.Shader_getShaderSource(self)

    def setShaderBinary(self, *args):
        """setShaderBinary(self, ShaderBinary shaderBinary)"""
        return _osg.Shader_setShaderBinary(self, *args)

    def getShaderBinary(self, *args):
        """
        getShaderBinary(self) -> ShaderBinary
        getShaderBinary(self) -> ShaderBinary
        """
        return _osg.Shader_getShaderBinary(self, *args)

    def readShaderFile(*args):
        """readShaderFile(Type type, string fileName) -> Shader"""
        return _osg.Shader_readShaderFile(*args)

    if _newclass:readShaderFile = staticmethod(readShaderFile)
    __swig_getmethods__["readShaderFile"] = lambda x: readShaderFile
    def loadShaderSourceFromFile(self, *args):
        """loadShaderSourceFromFile(self, string fileName) -> bool"""
        return _osg.Shader_loadShaderSourceFromFile(self, *args)

    def addCodeInjection(self, *args):
        """addCodeInjection(self, float position, string code)"""
        return _osg.Shader_addCodeInjection(self, *args)

    def getCodeInjectionMap(self, *args):
        """
        getCodeInjectionMap(self) -> CodeInjectionMap
        getCodeInjectionMap(self) -> CodeInjectionMap
        """
        return _osg.Shader_getCodeInjectionMap(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Shader_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.Shader_releaseGLObjects(self, state)

    def dirtyShader(self):
        """dirtyShader(self)"""
        return _osg.Shader_dirtyShader(self)

    def compileShader(self, *args):
        """compileShader(self, State state)"""
        return _osg.Shader_compileShader(self, *args)

    def attachShader(self, *args):
        """attachShader(self, unsigned int contextID, GLuint program)"""
        return _osg.Shader_attachShader(self, *args)

    def detachShader(self, *args):
        """detachShader(self, unsigned int contextID, GLuint program)"""
        return _osg.Shader_detachShader(self, *args)

    def getGlShaderInfoLog(self, *args):
        """getGlShaderInfoLog(self, unsigned int contextID, string log) -> bool"""
        return _osg.Shader_getGlShaderInfoLog(self, *args)

    def deleteGlShader(*args):
        """deleteGlShader(unsigned int contextID, GLuint shader)"""
        return _osg.Shader_deleteGlShader(*args)

    if _newclass:deleteGlShader = staticmethod(deleteGlShader)
    __swig_getmethods__["deleteGlShader"] = lambda x: deleteGlShader
    def flushDeletedGlShaders(*args):
        """flushDeletedGlShaders(unsigned int contextID, double currentTime, double availableTime)"""
        return _osg.Shader_flushDeletedGlShaders(*args)

    if _newclass:flushDeletedGlShaders = staticmethod(flushDeletedGlShaders)
    __swig_getmethods__["flushDeletedGlShaders"] = lambda x: flushDeletedGlShaders
    def discardDeletedGlShaders(*args):
        """discardDeletedGlShaders(unsigned int contextID)"""
        return _osg.Shader_discardDeletedGlShaders(*args)

    if _newclass:discardDeletedGlShaders = staticmethod(discardDeletedGlShaders)
    __swig_getmethods__["discardDeletedGlShaders"] = lambda x: discardDeletedGlShaders
    def getTypeId(*args):
        """getTypeId(string tname) -> Type"""
        return _osg.Shader_getTypeId(*args)

    if _newclass:getTypeId = staticmethod(getTypeId)
    __swig_getmethods__["getTypeId"] = lambda x: getTypeId
Shader_swigregister = _osg.Shader_swigregister
Shader_swigregister(Shader)

def Shader_readShaderFile(*args):
  """Shader_readShaderFile(Type type, string fileName) -> Shader"""
  return _osg.Shader_readShaderFile(*args)

def Shader_deleteGlShader(*args):
  """Shader_deleteGlShader(unsigned int contextID, GLuint shader)"""
  return _osg.Shader_deleteGlShader(*args)

def Shader_flushDeletedGlShaders(*args):
  """Shader_flushDeletedGlShaders(unsigned int contextID, double currentTime, double availableTime)"""
  return _osg.Shader_flushDeletedGlShaders(*args)

def Shader_discardDeletedGlShaders(*args):
  """Shader_discardDeletedGlShaders(unsigned int contextID)"""
  return _osg.Shader_discardDeletedGlShaders(*args)

def Shader_getTypeId(*args):
  """Shader_getTypeId(string tname) -> Type"""
  return _osg.Shader_getTypeId(*args)

class ShaderComponent(Object):
    """Proxy of C++ osg::ShaderComponent class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaderComponent, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShaderComponent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShaderComponent
        __init__(self, ShaderComponent sc, CopyOp copyop = SHALLOW_COPY) -> ShaderComponent
        __init__(self, ShaderComponent sc) -> ShaderComponent
        """
        this = _osg.new_ShaderComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ShaderComponent_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ShaderComponent_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ShaderComponent_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ShaderComponent_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ShaderComponent_className(self)

    def addShader(self, *args):
        """addShader(self, Shader shader) -> unsigned int"""
        return _osg.ShaderComponent_addShader(self, *args)

    def removeShader(self, *args):
        """removeShader(self, unsigned int i)"""
        return _osg.ShaderComponent_removeShader(self, *args)

    def getShader(self, *args):
        """
        getShader(self, unsigned int i) -> Shader
        getShader(self, unsigned int i) -> Shader
        """
        return _osg.ShaderComponent_getShader(self, *args)

    def getNumShaders(self):
        """getNumShaders(self) -> unsigned int"""
        return _osg.ShaderComponent_getNumShaders(self)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State state)"""
        return _osg.ShaderComponent_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.ShaderComponent_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.ShaderComponent_releaseGLObjects(self, state)

    __swig_destroy__ = _osg.delete_ShaderComponent
    __del__ = lambda self : None;
ShaderComponent_swigregister = _osg.ShaderComponent_swigregister
ShaderComponent_swigregister(ShaderComponent)

OSG_PROGRAM = _osg.OSG_PROGRAM
class Program(StateAttribute):
    """Proxy of C++ osg::Program class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Program, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Program, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Program
        __init__(self, Program rhs, CopyOp copyop = SHALLOW_COPY) -> Program
        __init__(self, Program rhs) -> Program
        """
        this = _osg.new_Program(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Program_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Program_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Program_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Program_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Program_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Program_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Program_compare(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Program_apply(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Program_setThreadSafeRefUnref(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State state)"""
        return _osg.Program_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Program_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.Program_releaseGLObjects(self, state)

    def dirtyProgram(self):
        """dirtyProgram(self)"""
        return _osg.Program_dirtyProgram(self)

    def addShader(self, *args):
        """addShader(self, Shader shader) -> bool"""
        return _osg.Program_addShader(self, *args)

    def getNumShaders(self):
        """getNumShaders(self) -> unsigned int"""
        return _osg.Program_getNumShaders(self)

    def getShader(self, *args):
        """
        getShader(self, unsigned int i) -> Shader
        getShader(self, unsigned int i) -> Shader
        """
        return _osg.Program_getShader(self, *args)

    def removeShader(self, *args):
        """removeShader(self, Shader shader) -> bool"""
        return _osg.Program_removeShader(self, *args)

    def setParameter(self, *args):
        """setParameter(self, GLenum pname, GLint value)"""
        return _osg.Program_setParameter(self, *args)

    def getParameter(self, *args):
        """getParameter(self, GLenum pname) -> GLint"""
        return _osg.Program_getParameter(self, *args)

    def setParameterfv(self, *args):
        """setParameterfv(self, GLenum pname, GLfloat value)"""
        return _osg.Program_setParameterfv(self, *args)

    def getParameterfv(self, *args):
        """getParameterfv(self, GLenum pname) -> GLfloat"""
        return _osg.Program_getParameterfv(self, *args)

    def addBindAttribLocation(self, *args):
        """addBindAttribLocation(self, string name, GLuint index)"""
        return _osg.Program_addBindAttribLocation(self, *args)

    def removeBindAttribLocation(self, *args):
        """removeBindAttribLocation(self, string name)"""
        return _osg.Program_removeBindAttribLocation(self, *args)

    def addBindFragDataLocation(self, *args):
        """addBindFragDataLocation(self, string name, GLuint index)"""
        return _osg.Program_addBindFragDataLocation(self, *args)

    def removeBindFragDataLocation(self, *args):
        """removeBindFragDataLocation(self, string name)"""
        return _osg.Program_removeBindFragDataLocation(self, *args)

    def addBindUniformBlock(self, *args):
        """addBindUniformBlock(self, string name, GLuint index)"""
        return _osg.Program_addBindUniformBlock(self, *args)

    def removeBindUniformBlock(self, *args):
        """removeBindUniformBlock(self, string name)"""
        return _osg.Program_removeBindUniformBlock(self, *args)

    def getAttribBindingList(self):
        """getAttribBindingList(self) -> AttribBindingList"""
        return _osg.Program_getAttribBindingList(self)

    def getFragDataBindingList(self):
        """getFragDataBindingList(self) -> FragDataBindingList"""
        return _osg.Program_getFragDataBindingList(self)

    def getUniformBlockBindingList(self):
        """getUniformBlockBindingList(self) -> UniformBlockBindingList"""
        return _osg.Program_getUniformBlockBindingList(self)

    def isFixedFunction(self):
        """isFixedFunction(self) -> bool"""
        return _osg.Program_isFixedFunction(self)

    def getGlProgramInfoLog(self, *args):
        """getGlProgramInfoLog(self, unsigned int contextID, string log) -> bool"""
        return _osg.Program_getGlProgramInfoLog(self, *args)

    def deleteGlProgram(*args):
        """deleteGlProgram(unsigned int contextID, GLuint program)"""
        return _osg.Program_deleteGlProgram(*args)

    if _newclass:deleteGlProgram = staticmethod(deleteGlProgram)
    __swig_getmethods__["deleteGlProgram"] = lambda x: deleteGlProgram
    def flushDeletedGlPrograms(*args):
        """flushDeletedGlPrograms(unsigned int contextID, double currentTime, double availableTime)"""
        return _osg.Program_flushDeletedGlPrograms(*args)

    if _newclass:flushDeletedGlPrograms = staticmethod(flushDeletedGlPrograms)
    __swig_getmethods__["flushDeletedGlPrograms"] = lambda x: flushDeletedGlPrograms
    def discardDeletedGlPrograms(*args):
        """discardDeletedGlPrograms(unsigned int contextID)"""
        return _osg.Program_discardDeletedGlPrograms(*args)

    if _newclass:discardDeletedGlPrograms = staticmethod(discardDeletedGlPrograms)
    __swig_getmethods__["discardDeletedGlPrograms"] = lambda x: discardDeletedGlPrograms
    def getActiveUniforms(self, *args):
        """getActiveUniforms(self, unsigned int contextID) -> ActiveUniformMap"""
        return _osg.Program_getActiveUniforms(self, *args)

    def getActiveAttribs(self, *args):
        """getActiveAttribs(self, unsigned int contextID) -> ActiveVarInfoMap"""
        return _osg.Program_getActiveAttribs(self, *args)

    def getPCP(self, *args):
        """getPCP(self, unsigned int contextID) -> PerContextProgram"""
        return _osg.Program_getPCP(self, *args)

    def getHandle(self, *args):
        """getHandle(self, int contextID) -> GLuint"""
        return _osg.Program_getHandle(self, *args)

    def getUniformLocation(self, *args):
        """getUniformLocation(self, int contextID, string name) -> GLint"""
        return _osg.Program_getUniformLocation(self, *args)

    def getAttribLocation(self, *args):
        """getAttribLocation(self, int contextID, string name) -> GLint"""
        return _osg.Program_getAttribLocation(self, *args)

Program_swigregister = _osg.Program_swigregister
Program_swigregister(Program)

def Program_deleteGlProgram(*args):
  """Program_deleteGlProgram(unsigned int contextID, GLuint program)"""
  return _osg.Program_deleteGlProgram(*args)

def Program_flushDeletedGlPrograms(*args):
  """Program_flushDeletedGlPrograms(unsigned int contextID, double currentTime, double availableTime)"""
  return _osg.Program_flushDeletedGlPrograms(*args)

def Program_discardDeletedGlPrograms(*args):
  """Program_discardDeletedGlPrograms(unsigned int contextID)"""
  return _osg.Program_discardDeletedGlPrograms(*args)

OSG_DisplaySettings = _osg.OSG_DisplaySettings
class DisplaySettings(Referenced):
    """Proxy of C++ osg::DisplaySettings class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplaySettings, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplaySettings, name)
    __repr__ = _swig_repr
    def instance():
        """instance() -> DisplaySettingsRef"""
        return _osg.DisplaySettings_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def __init__(self, *args): 
        """
        __init__(self) -> DisplaySettings
        __init__(self, ArgumentParser arguments) -> DisplaySettings
        __init__(self, DisplaySettings vs) -> DisplaySettings
        """
        this = _osg.new_DisplaySettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDisplaySettings(self, *args):
        """setDisplaySettings(self, DisplaySettings vs)"""
        return _osg.DisplaySettings_setDisplaySettings(self, *args)

    def merge(self, *args):
        """merge(self, DisplaySettings vs)"""
        return _osg.DisplaySettings_merge(self, *args)

    def setDefaults(self):
        """setDefaults(self)"""
        return _osg.DisplaySettings_setDefaults(self)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(self)"""
        return _osg.DisplaySettings_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(self, ArgumentParser arguments)"""
        return _osg.DisplaySettings_readCommandLine(self, *args)

    MONITOR = _osg.DisplaySettings_MONITOR
    POWERWALL = _osg.DisplaySettings_POWERWALL
    REALITY_CENTER = _osg.DisplaySettings_REALITY_CENTER
    HEAD_MOUNTED_DISPLAY = _osg.DisplaySettings_HEAD_MOUNTED_DISPLAY
    def setDisplayType(self, *args):
        """setDisplayType(self, DisplayType type)"""
        return _osg.DisplaySettings_setDisplayType(self, *args)

    def getDisplayType(self):
        """getDisplayType(self) -> DisplayType"""
        return _osg.DisplaySettings_getDisplayType(self)

    def setStereo(self, *args):
        """setStereo(self, bool on)"""
        return _osg.DisplaySettings_setStereo(self, *args)

    def getStereo(self):
        """getStereo(self) -> bool"""
        return _osg.DisplaySettings_getStereo(self)

    QUAD_BUFFER = _osg.DisplaySettings_QUAD_BUFFER
    ANAGLYPHIC = _osg.DisplaySettings_ANAGLYPHIC
    HORIZONTAL_SPLIT = _osg.DisplaySettings_HORIZONTAL_SPLIT
    VERTICAL_SPLIT = _osg.DisplaySettings_VERTICAL_SPLIT
    LEFT_EYE = _osg.DisplaySettings_LEFT_EYE
    RIGHT_EYE = _osg.DisplaySettings_RIGHT_EYE
    HORIZONTAL_INTERLACE = _osg.DisplaySettings_HORIZONTAL_INTERLACE
    VERTICAL_INTERLACE = _osg.DisplaySettings_VERTICAL_INTERLACE
    CHECKERBOARD = _osg.DisplaySettings_CHECKERBOARD
    def setStereoMode(self, *args):
        """setStereoMode(self, StereoMode mode)"""
        return _osg.DisplaySettings_setStereoMode(self, *args)

    def getStereoMode(self):
        """getStereoMode(self) -> StereoMode"""
        return _osg.DisplaySettings_getStereoMode(self)

    def setEyeSeparation(self, *args):
        """setEyeSeparation(self, float eyeSeparation)"""
        return _osg.DisplaySettings_setEyeSeparation(self, *args)

    def getEyeSeparation(self):
        """getEyeSeparation(self) -> float"""
        return _osg.DisplaySettings_getEyeSeparation(self)

    LEFT_EYE_LEFT_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_LEFT_VIEWPORT
    LEFT_EYE_RIGHT_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_RIGHT_VIEWPORT
    def setSplitStereoHorizontalEyeMapping(self, *args):
        """setSplitStereoHorizontalEyeMapping(self, SplitStereoHorizontalEyeMapping m)"""
        return _osg.DisplaySettings_setSplitStereoHorizontalEyeMapping(self, *args)

    def getSplitStereoHorizontalEyeMapping(self):
        """getSplitStereoHorizontalEyeMapping(self) -> SplitStereoHorizontalEyeMapping"""
        return _osg.DisplaySettings_getSplitStereoHorizontalEyeMapping(self)

    def setSplitStereoHorizontalSeparation(self, *args):
        """setSplitStereoHorizontalSeparation(self, int s)"""
        return _osg.DisplaySettings_setSplitStereoHorizontalSeparation(self, *args)

    def getSplitStereoHorizontalSeparation(self):
        """getSplitStereoHorizontalSeparation(self) -> int"""
        return _osg.DisplaySettings_getSplitStereoHorizontalSeparation(self)

    LEFT_EYE_TOP_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_TOP_VIEWPORT
    LEFT_EYE_BOTTOM_VIEWPORT = _osg.DisplaySettings_LEFT_EYE_BOTTOM_VIEWPORT
    def setSplitStereoVerticalEyeMapping(self, *args):
        """setSplitStereoVerticalEyeMapping(self, SplitStereoVerticalEyeMapping m)"""
        return _osg.DisplaySettings_setSplitStereoVerticalEyeMapping(self, *args)

    def getSplitStereoVerticalEyeMapping(self):
        """getSplitStereoVerticalEyeMapping(self) -> SplitStereoVerticalEyeMapping"""
        return _osg.DisplaySettings_getSplitStereoVerticalEyeMapping(self)

    def setSplitStereoVerticalSeparation(self, *args):
        """setSplitStereoVerticalSeparation(self, int s)"""
        return _osg.DisplaySettings_setSplitStereoVerticalSeparation(self, *args)

    def getSplitStereoVerticalSeparation(self):
        """getSplitStereoVerticalSeparation(self) -> int"""
        return _osg.DisplaySettings_getSplitStereoVerticalSeparation(self)

    def setSplitStereoAutoAdjustAspectRatio(self, *args):
        """setSplitStereoAutoAdjustAspectRatio(self, bool flag)"""
        return _osg.DisplaySettings_setSplitStereoAutoAdjustAspectRatio(self, *args)

    def getSplitStereoAutoAdjustAspectRatio(self):
        """getSplitStereoAutoAdjustAspectRatio(self) -> bool"""
        return _osg.DisplaySettings_getSplitStereoAutoAdjustAspectRatio(self)

    def setScreenWidth(self, *args):
        """setScreenWidth(self, float width)"""
        return _osg.DisplaySettings_setScreenWidth(self, *args)

    def getScreenWidth(self):
        """getScreenWidth(self) -> float"""
        return _osg.DisplaySettings_getScreenWidth(self)

    def setScreenHeight(self, *args):
        """setScreenHeight(self, float height)"""
        return _osg.DisplaySettings_setScreenHeight(self, *args)

    def getScreenHeight(self):
        """getScreenHeight(self) -> float"""
        return _osg.DisplaySettings_getScreenHeight(self)

    def setScreenDistance(self, *args):
        """setScreenDistance(self, float distance)"""
        return _osg.DisplaySettings_setScreenDistance(self, *args)

    def getScreenDistance(self):
        """getScreenDistance(self) -> float"""
        return _osg.DisplaySettings_getScreenDistance(self)

    def setDoubleBuffer(self, *args):
        """setDoubleBuffer(self, bool flag)"""
        return _osg.DisplaySettings_setDoubleBuffer(self, *args)

    def getDoubleBuffer(self):
        """getDoubleBuffer(self) -> bool"""
        return _osg.DisplaySettings_getDoubleBuffer(self)

    def setRGB(self, *args):
        """setRGB(self, bool flag)"""
        return _osg.DisplaySettings_setRGB(self, *args)

    def getRGB(self):
        """getRGB(self) -> bool"""
        return _osg.DisplaySettings_getRGB(self)

    def setDepthBuffer(self, *args):
        """setDepthBuffer(self, bool flag)"""
        return _osg.DisplaySettings_setDepthBuffer(self, *args)

    def getDepthBuffer(self):
        """getDepthBuffer(self) -> bool"""
        return _osg.DisplaySettings_getDepthBuffer(self)

    def setMinimumNumAlphaBits(self, *args):
        """setMinimumNumAlphaBits(self, unsigned int bits)"""
        return _osg.DisplaySettings_setMinimumNumAlphaBits(self, *args)

    def getMinimumNumAlphaBits(self):
        """getMinimumNumAlphaBits(self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAlphaBits(self)

    def getAlphaBuffer(self):
        """getAlphaBuffer(self) -> bool"""
        return _osg.DisplaySettings_getAlphaBuffer(self)

    def setMinimumNumStencilBits(self, *args):
        """setMinimumNumStencilBits(self, unsigned int bits)"""
        return _osg.DisplaySettings_setMinimumNumStencilBits(self, *args)

    def getMinimumNumStencilBits(self):
        """getMinimumNumStencilBits(self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumStencilBits(self)

    def getStencilBuffer(self):
        """getStencilBuffer(self) -> bool"""
        return _osg.DisplaySettings_getStencilBuffer(self)

    def setMinimumNumAccumBits(self, *args):
        """
        setMinimumNumAccumBits(self, unsigned int red, unsigned int green, unsigned int blue, 
            unsigned int alpha)
        """
        return _osg.DisplaySettings_setMinimumNumAccumBits(self, *args)

    def getMinimumNumAccumRedBits(self):
        """getMinimumNumAccumRedBits(self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumRedBits(self)

    def getMinimumNumAccumGreenBits(self):
        """getMinimumNumAccumGreenBits(self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumGreenBits(self)

    def getMinimumNumAccumBlueBits(self):
        """getMinimumNumAccumBlueBits(self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumBlueBits(self)

    def getMinimumNumAccumAlphaBits(self):
        """getMinimumNumAccumAlphaBits(self) -> unsigned int"""
        return _osg.DisplaySettings_getMinimumNumAccumAlphaBits(self)

    def getAccumBuffer(self):
        """getAccumBuffer(self) -> bool"""
        return _osg.DisplaySettings_getAccumBuffer(self)

    def setMaxNumberOfGraphicsContexts(self, *args):
        """setMaxNumberOfGraphicsContexts(self, unsigned int num)"""
        return _osg.DisplaySettings_setMaxNumberOfGraphicsContexts(self, *args)

    def getMaxNumberOfGraphicsContexts(self):
        """getMaxNumberOfGraphicsContexts(self) -> unsigned int"""
        return _osg.DisplaySettings_getMaxNumberOfGraphicsContexts(self)

    def setNumMultiSamples(self, *args):
        """setNumMultiSamples(self, unsigned int samples)"""
        return _osg.DisplaySettings_setNumMultiSamples(self, *args)

    def getNumMultiSamples(self):
        """getNumMultiSamples(self) -> unsigned int"""
        return _osg.DisplaySettings_getNumMultiSamples(self)

    def getMultiSamples(self):
        """getMultiSamples(self) -> bool"""
        return _osg.DisplaySettings_getMultiSamples(self)

    def setCompileContextsHint(self, *args):
        """setCompileContextsHint(self, bool useCompileContexts)"""
        return _osg.DisplaySettings_setCompileContextsHint(self, *args)

    def getCompileContextsHint(self):
        """getCompileContextsHint(self) -> bool"""
        return _osg.DisplaySettings_getCompileContextsHint(self)

    def setSerializeDrawDispatch(self, *args):
        """setSerializeDrawDispatch(self, bool serializeDrawDispatch)"""
        return _osg.DisplaySettings_setSerializeDrawDispatch(self, *args)

    def getSerializeDrawDispatch(self):
        """getSerializeDrawDispatch(self) -> bool"""
        return _osg.DisplaySettings_getSerializeDrawDispatch(self)

    def setNumOfDatabaseThreadsHint(self, *args):
        """setNumOfDatabaseThreadsHint(self, unsigned int numThreads)"""
        return _osg.DisplaySettings_setNumOfDatabaseThreadsHint(self, *args)

    def getNumOfDatabaseThreadsHint(self):
        """getNumOfDatabaseThreadsHint(self) -> unsigned int"""
        return _osg.DisplaySettings_getNumOfDatabaseThreadsHint(self)

    def setNumOfHttpDatabaseThreadsHint(self, *args):
        """setNumOfHttpDatabaseThreadsHint(self, unsigned int numThreads)"""
        return _osg.DisplaySettings_setNumOfHttpDatabaseThreadsHint(self, *args)

    def getNumOfHttpDatabaseThreadsHint(self):
        """getNumOfHttpDatabaseThreadsHint(self) -> unsigned int"""
        return _osg.DisplaySettings_getNumOfHttpDatabaseThreadsHint(self)

    def setApplication(self, *args):
        """setApplication(self, string application)"""
        return _osg.DisplaySettings_setApplication(self, *args)

    def getApplication(self):
        """getApplication(self) -> string"""
        return _osg.DisplaySettings_getApplication(self)

    def setMaxTexturePoolSize(self, *args):
        """setMaxTexturePoolSize(self, unsigned int size)"""
        return _osg.DisplaySettings_setMaxTexturePoolSize(self, *args)

    def getMaxTexturePoolSize(self):
        """getMaxTexturePoolSize(self) -> unsigned int"""
        return _osg.DisplaySettings_getMaxTexturePoolSize(self)

    def setMaxBufferObjectPoolSize(self, *args):
        """setMaxBufferObjectPoolSize(self, unsigned int size)"""
        return _osg.DisplaySettings_setMaxBufferObjectPoolSize(self, *args)

    def getMaxBufferObjectPoolSize(self):
        """getMaxBufferObjectPoolSize(self) -> unsigned int"""
        return _osg.DisplaySettings_getMaxBufferObjectPoolSize(self)

    IMPLICIT_DEPTH_BUFFER_ATTACHMENT = _osg.DisplaySettings_IMPLICIT_DEPTH_BUFFER_ATTACHMENT
    IMPLICIT_STENCIL_BUFFER_ATTACHMENT = _osg.DisplaySettings_IMPLICIT_STENCIL_BUFFER_ATTACHMENT
    IMPLICIT_COLOR_BUFFER_ATTACHMENT = _osg.DisplaySettings_IMPLICIT_COLOR_BUFFER_ATTACHMENT
    DEFAULT_IMPLICIT_BUFFER_ATTACHMENT = _osg.DisplaySettings_DEFAULT_IMPLICIT_BUFFER_ATTACHMENT
    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            ImplicitBufferAttachmentMask resolveMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self)
        """
        return _osg.DisplaySettings_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.DisplaySettings_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.DisplaySettings_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self):
        """getImplicitBufferAttachmentRenderMask(self) -> ImplicitBufferAttachmentMask"""
        return _osg.DisplaySettings_getImplicitBufferAttachmentRenderMask(self)

    def getImplicitBufferAttachmentResolveMask(self):
        """getImplicitBufferAttachmentResolveMask(self) -> ImplicitBufferAttachmentMask"""
        return _osg.DisplaySettings_getImplicitBufferAttachmentResolveMask(self)

    SWAP_DEFAULT = _osg.DisplaySettings_SWAP_DEFAULT
    SWAP_EXCHANGE = _osg.DisplaySettings_SWAP_EXCHANGE
    SWAP_COPY = _osg.DisplaySettings_SWAP_COPY
    SWAP_UNDEFINED = _osg.DisplaySettings_SWAP_UNDEFINED
    def setSwapMethod(self, *args):
        """setSwapMethod(self, SwapMethod swapMethod)"""
        return _osg.DisplaySettings_setSwapMethod(self, *args)

    def getSwapMethod(self):
        """getSwapMethod(self) -> SwapMethod"""
        return _osg.DisplaySettings_getSwapMethod(self)

    def setGLContextVersion(self, *args):
        """setGLContextVersion(self, string version)"""
        return _osg.DisplaySettings_setGLContextVersion(self, *args)

    def getGLContextVersion(self):
        """getGLContextVersion(self) -> string"""
        return _osg.DisplaySettings_getGLContextVersion(self)

    def setGLContextFlags(self, *args):
        """setGLContextFlags(self, unsigned int flags)"""
        return _osg.DisplaySettings_setGLContextFlags(self, *args)

    def getGLContextFlags(self):
        """getGLContextFlags(self) -> unsigned int"""
        return _osg.DisplaySettings_getGLContextFlags(self)

    def setGLContextProfileMask(self, *args):
        """setGLContextProfileMask(self, unsigned int mask)"""
        return _osg.DisplaySettings_setGLContextProfileMask(self, *args)

    def getGLContextProfileMask(self):
        """getGLContextProfileMask(self) -> unsigned int"""
        return _osg.DisplaySettings_getGLContextProfileMask(self)

DisplaySettings_swigregister = _osg.DisplaySettings_swigregister
DisplaySettings_swigregister(DisplaySettings)

def DisplaySettings_instance():
  """DisplaySettings_instance() -> DisplaySettingsRef"""
  return _osg.DisplaySettings_instance()

OSG_STATE = _osg.OSG_STATE
GL_FOG_COORDINATE_ARRAY = _osg.GL_FOG_COORDINATE_ARRAY
GL_SECONDARY_COLOR_ARRAY = _osg.GL_SECONDARY_COLOR_ARRAY
class VertexAttribAlias(_object):
    """Proxy of C++ osg::VertexAttribAlias class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexAttribAlias, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VertexAttribAlias, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VertexAttribAlias
        __init__(self, VertexAttribAlias rhs) -> VertexAttribAlias
        __init__(self, GLuint location, string glName, string osgName, string declaration) -> VertexAttribAlias
        """
        this = _osg.new_VertexAttribAlias(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["_location"] = _osg.VertexAttribAlias__location_set
    __swig_getmethods__["_location"] = _osg.VertexAttribAlias__location_get
    if _newclass:_location = _swig_property(_osg.VertexAttribAlias__location_get, _osg.VertexAttribAlias__location_set)
    __swig_setmethods__["_glName"] = _osg.VertexAttribAlias__glName_set
    __swig_getmethods__["_glName"] = _osg.VertexAttribAlias__glName_get
    if _newclass:_glName = _swig_property(_osg.VertexAttribAlias__glName_get, _osg.VertexAttribAlias__glName_set)
    __swig_setmethods__["_osgName"] = _osg.VertexAttribAlias__osgName_set
    __swig_getmethods__["_osgName"] = _osg.VertexAttribAlias__osgName_get
    if _newclass:_osgName = _swig_property(_osg.VertexAttribAlias__osgName_get, _osg.VertexAttribAlias__osgName_set)
    __swig_setmethods__["_declaration"] = _osg.VertexAttribAlias__declaration_set
    __swig_getmethods__["_declaration"] = _osg.VertexAttribAlias__declaration_get
    if _newclass:_declaration = _swig_property(_osg.VertexAttribAlias__declaration_get, _osg.VertexAttribAlias__declaration_set)
    __swig_destroy__ = _osg.delete_VertexAttribAlias
    __del__ = lambda self : None;
VertexAttribAlias_swigregister = _osg.VertexAttribAlias_swigregister
VertexAttribAlias_swigregister(VertexAttribAlias)

class State(Referenced):
    """Proxy of C++ osg::State class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, State, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, State, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> State"""
        this = _osg.new_State()
        try: self.this.append(this)
        except: self.this = this
    def setGraphicsContext(self, *args):
        """setGraphicsContext(self, GraphicsContext context)"""
        return _osg.State_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(self) -> GraphicsContext
        getGraphicsContext(self) -> GraphicsContext
        """
        return _osg.State_getGraphicsContext(self, *args)

    def setContextID(self, *args):
        """setContextID(self, unsigned int contextID)"""
        return _osg.State_setContextID(self, *args)

    def getContextID(self):
        """getContextID(self) -> unsigned int"""
        return _osg.State_getContextID(self)

    def setShaderCompositionEnabled(self, *args):
        """setShaderCompositionEnabled(self, bool flag)"""
        return _osg.State_setShaderCompositionEnabled(self, *args)

    def getShaderCompositionEnabled(self):
        """getShaderCompositionEnabled(self) -> bool"""
        return _osg.State_getShaderCompositionEnabled(self)

    def setShaderComposer(self, *args):
        """setShaderComposer(self, ShaderComposer sc)"""
        return _osg.State_setShaderComposer(self, *args)

    def getShaderComposer(self, *args):
        """
        getShaderComposer(self) -> ShaderComposer
        getShaderComposer(self) -> ShaderComposer
        """
        return _osg.State_getShaderComposer(self, *args)

    def getCurrentShaderCompositionUniformList(self):
        """getCurrentShaderCompositionUniformList(self) -> UniformList"""
        return _osg.State_getCurrentShaderCompositionUniformList(self)

    def applyShaderCompositionUniform(self, *args):
        """
        applyShaderCompositionUniform(self, Uniform uniform, OverrideValue value = ON)
        applyShaderCompositionUniform(self, Uniform uniform)
        """
        return _osg.State_applyShaderCompositionUniform(self, *args)

    def pushStateSet(self, *args):
        """pushStateSet(self, StateSet dstate)"""
        return _osg.State_pushStateSet(self, *args)

    def popStateSet(self):
        """popStateSet(self)"""
        return _osg.State_popStateSet(self)

    def popAllStateSets(self):
        """popAllStateSets(self)"""
        return _osg.State_popAllStateSets(self)

    def insertStateSet(self, *args):
        """insertStateSet(self, unsigned int pos, StateSet dstate)"""
        return _osg.State_insertStateSet(self, *args)

    def removeStateSet(self, *args):
        """removeStateSet(self, unsigned int pos)"""
        return _osg.State_removeStateSet(self, *args)

    def getStateSetStackSize(self):
        """getStateSetStackSize(self) -> unsigned int"""
        return _osg.State_getStateSetStackSize(self)

    def popStateSetStackToSize(self, *args):
        """popStateSetStackToSize(self, unsigned int size)"""
        return _osg.State_popStateSetStackToSize(self, *args)

    def getStateSetStack(self):
        """getStateSetStack(self) -> StateSetStack"""
        return _osg.State_getStateSetStack(self)

    def captureCurrentState(self, *args):
        """captureCurrentState(self, StateSet stateset)"""
        return _osg.State_captureCurrentState(self, *args)

    def reset(self):
        """reset(self)"""
        return _osg.State_reset(self)

    def getCurrentViewport(self):
        """getCurrentViewport(self) -> Viewport"""
        return _osg.State_getCurrentViewport(self)

    def setInitialViewMatrix(self, *args):
        """setInitialViewMatrix(self, RefMatrix matrix)"""
        return _osg.State_setInitialViewMatrix(self, *args)

    def getInitialViewMatrix(self):
        """getInitialViewMatrix(self) -> Matrix"""
        return _osg.State_getInitialViewMatrix(self)

    def getInitialInverseViewMatrix(self):
        """getInitialInverseViewMatrix(self) -> Matrix"""
        return _osg.State_getInitialInverseViewMatrix(self)

    def applyProjectionMatrix(self, *args):
        """applyProjectionMatrix(self, RefMatrix matrix)"""
        return _osg.State_applyProjectionMatrix(self, *args)

    def getProjectionMatrix(self):
        """getProjectionMatrix(self) -> Matrix"""
        return _osg.State_getProjectionMatrix(self)

    def applyModelViewMatrix(self, *args):
        """
        applyModelViewMatrix(self, RefMatrix matrix)
        applyModelViewMatrix(self, Matrix arg0)
        """
        return _osg.State_applyModelViewMatrix(self, *args)

    def getModelViewMatrix(self):
        """getModelViewMatrix(self) -> Matrix"""
        return _osg.State_getModelViewMatrix(self)

    def setUseModelViewAndProjectionUniforms(self, *args):
        """setUseModelViewAndProjectionUniforms(self, bool flag)"""
        return _osg.State_setUseModelViewAndProjectionUniforms(self, *args)

    def getUseModelViewAndProjectionUniforms(self):
        """getUseModelViewAndProjectionUniforms(self) -> bool"""
        return _osg.State_getUseModelViewAndProjectionUniforms(self)

    def updateModelViewAndProjectionMatrixUniforms(self):
        """updateModelViewAndProjectionMatrixUniforms(self)"""
        return _osg.State_updateModelViewAndProjectionMatrixUniforms(self)

    def applyModelViewAndProjectionUniformsIfRequired(self):
        """applyModelViewAndProjectionUniformsIfRequired(self)"""
        return _osg.State_applyModelViewAndProjectionUniformsIfRequired(self)

    def getModelViewMatrixUniform(self):
        """getModelViewMatrixUniform(self) -> Uniform"""
        return _osg.State_getModelViewMatrixUniform(self)

    def getProjectionMatrixUniform(self):
        """getProjectionMatrixUniform(self) -> Uniform"""
        return _osg.State_getProjectionMatrixUniform(self)

    def getModelViewProjectionMatrixUniform(self):
        """getModelViewProjectionMatrixUniform(self) -> Uniform"""
        return _osg.State_getModelViewProjectionMatrixUniform(self)

    def getNormalMatrixUniform(self):
        """getNormalMatrixUniform(self) -> Uniform"""
        return _osg.State_getNormalMatrixUniform(self)

    def getViewFrustum(self):
        """getViewFrustum(self) -> Polytope"""
        return _osg.State_getViewFrustum(self)

    def setUseVertexAttributeAliasing(self, *args):
        """setUseVertexAttributeAliasing(self, bool flag)"""
        return _osg.State_setUseVertexAttributeAliasing(self, *args)

    def getUseVertexAttributeAliasing(self):
        """getUseVertexAttributeAliasing(self) -> bool"""
        return _osg.State_getUseVertexAttributeAliasing(self)

    def getVertexAlias(self):
        """getVertexAlias(self) -> VertexAttribAlias"""
        return _osg.State_getVertexAlias(self)

    def getNormalAlias(self):
        """getNormalAlias(self) -> VertexAttribAlias"""
        return _osg.State_getNormalAlias(self)

    def getColorAlias(self):
        """getColorAlias(self) -> VertexAttribAlias"""
        return _osg.State_getColorAlias(self)

    def getSecondaryColorAlias(self):
        """getSecondaryColorAlias(self) -> VertexAttribAlias"""
        return _osg.State_getSecondaryColorAlias(self)

    def getFogCoordAlias(self):
        """getFogCoordAlias(self) -> VertexAttribAlias"""
        return _osg.State_getFogCoordAlias(self)

    def getTexCoordAliasList(self):
        """getTexCoordAliasList(self) -> VertexAttribAliasList"""
        return _osg.State_getTexCoordAliasList(self)

    def getAttributeBindingList(self):
        """getAttributeBindingList(self) -> AttribBindingList"""
        return _osg.State_getAttributeBindingList(self)

    def convertVertexShaderSourceToOsgBuiltIns(self, *args):
        """convertVertexShaderSourceToOsgBuiltIns(self, string source) -> bool"""
        return _osg.State_convertVertexShaderSourceToOsgBuiltIns(self, *args)

    def apply(self, *args):
        """
        apply(self, StateSet dstate)
        apply(self)
        """
        return _osg.State_apply(self, *args)

    def applyShaderComposition(self):
        """applyShaderComposition(self)"""
        return _osg.State_applyShaderComposition(self)

    def setModeValidity(self, *args):
        """setModeValidity(self, GLMode mode, bool valid)"""
        return _osg.State_setModeValidity(self, *args)

    def getModeValidity(self, *args):
        """getModeValidity(self, GLMode mode) -> bool"""
        return _osg.State_getModeValidity(self, *args)

    def setGlobalDefaultModeValue(self, *args):
        """setGlobalDefaultModeValue(self, GLMode mode, bool enabled)"""
        return _osg.State_setGlobalDefaultModeValue(self, *args)

    def getGlobalDefaultModeValue(self, *args):
        """getGlobalDefaultModeValue(self, GLMode mode) -> bool"""
        return _osg.State_getGlobalDefaultModeValue(self, *args)

    def applyMode(self, *args):
        """applyMode(self, GLMode mode, bool enabled) -> bool"""
        return _osg.State_applyMode(self, *args)

    def setGlobalDefaultTextureModeValue(self, *args):
        """setGlobalDefaultTextureModeValue(self, unsigned int unit, GLMode mode, bool enabled)"""
        return _osg.State_setGlobalDefaultTextureModeValue(self, *args)

    def getGlobalDefaultTextureModeValue(self, *args):
        """getGlobalDefaultTextureModeValue(self, unsigned int unit, GLMode mode) -> bool"""
        return _osg.State_getGlobalDefaultTextureModeValue(self, *args)

    def applyTextureMode(self, *args):
        """applyTextureMode(self, unsigned int unit, GLMode mode, bool enabled) -> bool"""
        return _osg.State_applyTextureMode(self, *args)

    def setGlobalDefaultAttribute(self, *args):
        """setGlobalDefaultAttribute(self, StateAttribute attribute)"""
        return _osg.State_setGlobalDefaultAttribute(self, *args)

    def getGlobalDefaultAttribute(self, *args):
        """
        getGlobalDefaultAttribute(self, Type type, unsigned int member = 0) -> StateAttribute
        getGlobalDefaultAttribute(self, Type type) -> StateAttribute
        """
        return _osg.State_getGlobalDefaultAttribute(self, *args)

    def applyAttribute(self, *args):
        """applyAttribute(self, StateAttribute attribute) -> bool"""
        return _osg.State_applyAttribute(self, *args)

    def setGlobalDefaultTextureAttribute(self, *args):
        """setGlobalDefaultTextureAttribute(self, unsigned int unit, StateAttribute attribute)"""
        return _osg.State_setGlobalDefaultTextureAttribute(self, *args)

    def getGlobalDefaultTextureAttribute(self, *args):
        """
        getGlobalDefaultTextureAttribute(self, unsigned int unit, Type type, unsigned int member = 0) -> StateAttribute
        getGlobalDefaultTextureAttribute(self, unsigned int unit, Type type) -> StateAttribute
        """
        return _osg.State_getGlobalDefaultTextureAttribute(self, *args)

    def applyTextureAttribute(self, *args):
        """applyTextureAttribute(self, unsigned int unit, StateAttribute attribute) -> bool"""
        return _osg.State_applyTextureAttribute(self, *args)

    def haveAppliedMode(self, *args):
        """
        haveAppliedMode(self, GLMode mode, GLModeValue value)
        haveAppliedMode(self, GLMode mode)
        """
        return _osg.State_haveAppliedMode(self, *args)

    def haveAppliedAttribute(self, *args):
        """
        haveAppliedAttribute(self, StateAttribute attribute)
        haveAppliedAttribute(self, Type type, unsigned int member = 0)
        haveAppliedAttribute(self, Type type)
        """
        return _osg.State_haveAppliedAttribute(self, *args)

    def getLastAppliedMode(self, *args):
        """getLastAppliedMode(self, GLMode mode) -> bool"""
        return _osg.State_getLastAppliedMode(self, *args)

    def getLastAppliedAttribute(self, *args):
        """
        getLastAppliedAttribute(self, Type type, unsigned int member = 0) -> StateAttribute
        getLastAppliedAttribute(self, Type type) -> StateAttribute
        """
        return _osg.State_getLastAppliedAttribute(self, *args)

    def haveAppliedTextureMode(self, *args):
        """
        haveAppliedTextureMode(self, unsigned int unit, GLMode mode, GLModeValue value)
        haveAppliedTextureMode(self, unsigned int unit, GLMode mode)
        """
        return _osg.State_haveAppliedTextureMode(self, *args)

    def haveAppliedTextureAttribute(self, *args):
        """
        haveAppliedTextureAttribute(self, unsigned int unit, StateAttribute attribute)
        haveAppliedTextureAttribute(self, unsigned int unit, Type type, unsigned int member = 0)
        haveAppliedTextureAttribute(self, unsigned int unit, Type type)
        """
        return _osg.State_haveAppliedTextureAttribute(self, *args)

    def getLastAppliedTextureMode(self, *args):
        """getLastAppliedTextureMode(self, unsigned int unit, GLMode mode) -> bool"""
        return _osg.State_getLastAppliedTextureMode(self, *args)

    def getLastAppliedTextureAttribute(self, *args):
        """
        getLastAppliedTextureAttribute(self, unsigned int unit, Type type, unsigned int member = 0) -> StateAttribute
        getLastAppliedTextureAttribute(self, unsigned int unit, Type type) -> StateAttribute
        """
        return _osg.State_getLastAppliedTextureAttribute(self, *args)

    def dirtyAllModes(self):
        """dirtyAllModes(self)"""
        return _osg.State_dirtyAllModes(self)

    def dirtyAllAttributes(self):
        """dirtyAllAttributes(self)"""
        return _osg.State_dirtyAllAttributes(self)

    def disableAllVertexArrays(self):
        """disableAllVertexArrays(self)"""
        return _osg.State_disableAllVertexArrays(self)

    def dirtyAllVertexArrays(self):
        """dirtyAllVertexArrays(self)"""
        return _osg.State_dirtyAllVertexArrays(self)

    def setCurrentVertexBufferObject(self, *args):
        """setCurrentVertexBufferObject(self, GLBufferObject vbo)"""
        return _osg.State_setCurrentVertexBufferObject(self, *args)

    def getCurrentVertexBufferObject(self):
        """getCurrentVertexBufferObject(self) -> GLBufferObject"""
        return _osg.State_getCurrentVertexBufferObject(self)

    def bindVertexBufferObject(self, *args):
        """bindVertexBufferObject(self, GLBufferObject vbo)"""
        return _osg.State_bindVertexBufferObject(self, *args)

    def unbindVertexBufferObject(self):
        """unbindVertexBufferObject(self)"""
        return _osg.State_unbindVertexBufferObject(self)

    def setCurrentElementBufferObject(self, *args):
        """setCurrentElementBufferObject(self, GLBufferObject ebo)"""
        return _osg.State_setCurrentElementBufferObject(self, *args)

    def getCurrentElementBufferObject(self):
        """getCurrentElementBufferObject(self) -> GLBufferObject"""
        return _osg.State_getCurrentElementBufferObject(self)

    def bindElementBufferObject(self, *args):
        """bindElementBufferObject(self, GLBufferObject ebo)"""
        return _osg.State_bindElementBufferObject(self, *args)

    def unbindElementBufferObject(self):
        """unbindElementBufferObject(self)"""
        return _osg.State_unbindElementBufferObject(self)

    def setCurrentPixelBufferObject(self, *args):
        """setCurrentPixelBufferObject(self, GLBufferObject pbo)"""
        return _osg.State_setCurrentPixelBufferObject(self, *args)

    def getCurrentPixelBufferObject(self):
        """getCurrentPixelBufferObject(self) -> GLBufferObject"""
        return _osg.State_getCurrentPixelBufferObject(self)

    def bindPixelBufferObject(self, *args):
        """bindPixelBufferObject(self, GLBufferObject pbo)"""
        return _osg.State_bindPixelBufferObject(self, *args)

    def unbindPixelBufferObject(self):
        """unbindPixelBufferObject(self)"""
        return _osg.State_unbindPixelBufferObject(self)

    __swig_setmethods__["_quadIndicesGLushort"] = _osg.State__quadIndicesGLushort_set
    __swig_getmethods__["_quadIndicesGLushort"] = _osg.State__quadIndicesGLushort_get
    if _newclass:_quadIndicesGLushort = _swig_property(_osg.State__quadIndicesGLushort_get, _osg.State__quadIndicesGLushort_set)
    __swig_setmethods__["_quadIndicesGLuint"] = _osg.State__quadIndicesGLuint_set
    __swig_getmethods__["_quadIndicesGLuint"] = _osg.State__quadIndicesGLuint_get
    if _newclass:_quadIndicesGLuint = _swig_property(_osg.State__quadIndicesGLuint_get, _osg.State__quadIndicesGLuint_set)
    def drawQuads(self, *args):
        """
        drawQuads(self, GLint first, GLsizei count, GLsizei primCount = 0)
        drawQuads(self, GLint first, GLsizei count)
        """
        return _osg.State_drawQuads(self, *args)

    def glDrawArraysInstanced(self, *args):
        """glDrawArraysInstanced(self, GLenum mode, GLint first, GLsizei count, GLsizei primcount)"""
        return _osg.State_glDrawArraysInstanced(self, *args)

    def glDrawElementsInstanced(self, *args):
        """
        glDrawElementsInstanced(self, GLenum mode, GLsizei count, GLenum type, GLvoid indices, 
            GLsizei primcount)
        """
        return _osg.State_glDrawElementsInstanced(self, *args)

    def Vertex(self, *args):
        """
        Vertex(self, float x, float y, float z, float w = 1.0)
        Vertex(self, float x, float y, float z)
        """
        return _osg.State_Vertex(self, *args)

    def Color(self, *args):
        """
        Color(self, float r, float g, float b, float a = 1.0)
        Color(self, float r, float g, float b)
        """
        return _osg.State_Color(self, *args)

    def Normal(self, *args):
        """Normal(self, float x, float y, float z)"""
        return _osg.State_Normal(self, *args)

    def TexCoord(self, *args):
        """
        TexCoord(self, float x, float y = 0.0, float z = 0.0, float w = 1.0)
        TexCoord(self, float x, float y = 0.0, float z = 0.0)
        TexCoord(self, float x, float y = 0.0)
        TexCoord(self, float x)
        """
        return _osg.State_TexCoord(self, *args)

    def MultiTexCoord(self, *args):
        """
        MultiTexCoord(self, unsigned int unit, float x, float y = 0.0, float z = 0.0, 
            float w = 1.0)
        MultiTexCoord(self, unsigned int unit, float x, float y = 0.0, float z = 0.0)
        MultiTexCoord(self, unsigned int unit, float x, float y = 0.0)
        MultiTexCoord(self, unsigned int unit, float x)
        """
        return _osg.State_MultiTexCoord(self, *args)

    def VerteAttrib(self, *args):
        """
        VerteAttrib(self, unsigned int location, float x, float y = 0.0, float z = 0.0, 
            float w = 0.0)
        VerteAttrib(self, unsigned int location, float x, float y = 0.0, float z = 0.0)
        VerteAttrib(self, unsigned int location, float x, float y = 0.0)
        VerteAttrib(self, unsigned int location, float x)
        """
        return _osg.State_VerteAttrib(self, *args)

    def lazyDisablingOfVertexAttributes(self):
        """lazyDisablingOfVertexAttributes(self)"""
        return _osg.State_lazyDisablingOfVertexAttributes(self)

    def applyDisablingOfVertexAttributes(self):
        """applyDisablingOfVertexAttributes(self)"""
        return _osg.State_applyDisablingOfVertexAttributes(self)

    def setInterleavedArrays(self, *args):
        """setInterleavedArrays(self, GLenum format, GLsizei stride, GLvoid pointer)"""
        return _osg.State_setInterleavedArrays(self, *args)

    def setVertexPointer(self, *args):
        """
        setVertexPointer(self, Array array)
        setVertexPointer(self, GLint size, GLenum type, GLsizei stride, GLvoid ptr)
        """
        return _osg.State_setVertexPointer(self, *args)

    def disableVertexPointer(self):
        """disableVertexPointer(self)"""
        return _osg.State_disableVertexPointer(self)

    def dirtyVertexPointer(self):
        """dirtyVertexPointer(self)"""
        return _osg.State_dirtyVertexPointer(self)

    def setNormalPointer(self, *args):
        """
        setNormalPointer(self, Array array)
        setNormalPointer(self, GLenum type, GLsizei stride, GLvoid ptr)
        """
        return _osg.State_setNormalPointer(self, *args)

    def disableNormalPointer(self):
        """disableNormalPointer(self)"""
        return _osg.State_disableNormalPointer(self)

    def dirtyNormalPointer(self):
        """dirtyNormalPointer(self)"""
        return _osg.State_dirtyNormalPointer(self)

    def setColorPointer(self, *args):
        """
        setColorPointer(self, Array array)
        setColorPointer(self, GLint size, GLenum type, GLsizei stride, GLvoid ptr)
        """
        return _osg.State_setColorPointer(self, *args)

    def disableColorPointer(self):
        """disableColorPointer(self)"""
        return _osg.State_disableColorPointer(self)

    def dirtyColorPointer(self):
        """dirtyColorPointer(self)"""
        return _osg.State_dirtyColorPointer(self)

    def isSecondaryColorSupported(self):
        """isSecondaryColorSupported(self) -> bool"""
        return _osg.State_isSecondaryColorSupported(self)

    def setSecondaryColorPointer(self, *args):
        """
        setSecondaryColorPointer(self, Array array)
        setSecondaryColorPointer(self, GLint size, GLenum type, GLsizei stride, GLvoid ptr)
        """
        return _osg.State_setSecondaryColorPointer(self, *args)

    def disableSecondaryColorPointer(self):
        """disableSecondaryColorPointer(self)"""
        return _osg.State_disableSecondaryColorPointer(self)

    def dirtySecondaryColorPointer(self):
        """dirtySecondaryColorPointer(self)"""
        return _osg.State_dirtySecondaryColorPointer(self)

    def isFogCoordSupported(self):
        """isFogCoordSupported(self) -> bool"""
        return _osg.State_isFogCoordSupported(self)

    def setFogCoordPointer(self, *args):
        """
        setFogCoordPointer(self, Array array)
        setFogCoordPointer(self, GLenum type, GLsizei stride, GLvoid ptr)
        """
        return _osg.State_setFogCoordPointer(self, *args)

    def disableFogCoordPointer(self):
        """disableFogCoordPointer(self)"""
        return _osg.State_disableFogCoordPointer(self)

    def dirtyFogCoordPointer(self):
        """dirtyFogCoordPointer(self)"""
        return _osg.State_dirtyFogCoordPointer(self)

    def setTexCoordPointer(self, *args):
        """
        setTexCoordPointer(self, unsigned int unit, Array array)
        setTexCoordPointer(self, unsigned int unit, GLint size, GLenum type, GLsizei stride, 
            GLvoid ptr)
        """
        return _osg.State_setTexCoordPointer(self, *args)

    def disableTexCoordPointer(self, *args):
        """disableTexCoordPointer(self, unsigned int unit)"""
        return _osg.State_disableTexCoordPointer(self, *args)

    def dirtyTexCoordPointer(self, *args):
        """dirtyTexCoordPointer(self, unsigned int unit)"""
        return _osg.State_dirtyTexCoordPointer(self, *args)

    def disableTexCoordPointersAboveAndIncluding(self, *args):
        """disableTexCoordPointersAboveAndIncluding(self, unsigned int unit)"""
        return _osg.State_disableTexCoordPointersAboveAndIncluding(self, *args)

    def dirtyTexCoordPointersAboveAndIncluding(self, *args):
        """dirtyTexCoordPointersAboveAndIncluding(self, unsigned int unit)"""
        return _osg.State_dirtyTexCoordPointersAboveAndIncluding(self, *args)

    def setActiveTextureUnit(self, *args):
        """setActiveTextureUnit(self, unsigned int unit) -> bool"""
        return _osg.State_setActiveTextureUnit(self, *args)

    def getActiveTextureUnit(self):
        """getActiveTextureUnit(self) -> unsigned int"""
        return _osg.State_getActiveTextureUnit(self)

    def setClientActiveTextureUnit(self, *args):
        """setClientActiveTextureUnit(self, unsigned int unit) -> bool"""
        return _osg.State_setClientActiveTextureUnit(self, *args)

    def getClientActiveTextureUnit(self):
        """getClientActiveTextureUnit(self) -> unsigned int"""
        return _osg.State_getClientActiveTextureUnit(self)

    def setVertexAttribPointer(self, *args):
        """
        setVertexAttribPointer(self, unsigned int unit, Array array, GLboolean normalized)
        setVertexAttribPointer(self, unsigned int index, GLint size, GLenum type, GLboolean normalized, 
            GLsizei stride, GLvoid ptr)
        """
        return _osg.State_setVertexAttribPointer(self, *args)

    def disableVertexAttribPointer(self, *args):
        """disableVertexAttribPointer(self, unsigned int index)"""
        return _osg.State_disableVertexAttribPointer(self, *args)

    def disableVertexAttribPointersAboveAndIncluding(self, *args):
        """disableVertexAttribPointersAboveAndIncluding(self, unsigned int index)"""
        return _osg.State_disableVertexAttribPointersAboveAndIncluding(self, *args)

    def dirtyVertexAttribPointer(self, *args):
        """dirtyVertexAttribPointer(self, unsigned int index)"""
        return _osg.State_dirtyVertexAttribPointer(self, *args)

    def dirtyVertexAttribPointersAboveAndIncluding(self, *args):
        """dirtyVertexAttribPointersAboveAndIncluding(self, unsigned int index)"""
        return _osg.State_dirtyVertexAttribPointersAboveAndIncluding(self, *args)

    def isVertexBufferObjectSupported(self):
        """isVertexBufferObjectSupported(self) -> bool"""
        return _osg.State_isVertexBufferObjectSupported(self)

    def setLastAppliedProgramObject(self, *args):
        """setLastAppliedProgramObject(self, PerContextProgram program)"""
        return _osg.State_setLastAppliedProgramObject(self, *args)

    def getLastAppliedProgramObject(self):
        """getLastAppliedProgramObject(self) -> PerContextProgram"""
        return _osg.State_getLastAppliedProgramObject(self)

    def getUniformLocation(self, *args):
        """
        getUniformLocation(self, unsigned int uniformNameID) -> GLint
        getUniformLocation(self, string uniformName) -> GLint
        """
        return _osg.State_getUniformLocation(self, *args)

    def getAttribLocation(self, *args):
        """getAttribLocation(self, string name) -> GLint"""
        return _osg.State_getAttribLocation(self, *args)

    def getAttributeVec(self, *args):
        """getAttributeVec(self, StateAttribute attribute) -> AttributeVec"""
        return _osg.State_getAttributeVec(self, *args)

    def setFrameStamp(self, *args):
        """setFrameStamp(self, FrameStamp fs)"""
        return _osg.State_setFrameStamp(self, *args)

    def getFrameStamp(self, *args):
        """
        getFrameStamp(self) -> FrameStamp
        getFrameStamp(self) -> FrameStamp
        """
        return _osg.State_getFrameStamp(self, *args)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(self, DisplaySettings vs)"""
        return _osg.State_setDisplaySettings(self, *args)

    def getDisplaySettings(self):
        """getDisplaySettings(self) -> DisplaySettings"""
        return _osg.State_getDisplaySettings(self)

    def setAbortRenderingPtr(self, *args):
        """setAbortRenderingPtr(self, bool abortPtr)"""
        return _osg.State_setAbortRenderingPtr(self, *args)

    def getAbortRendering(self):
        """getAbortRendering(self) -> bool"""
        return _osg.State_getAbortRendering(self)

    def setDynamicObjectCount(self, *args):
        """
        setDynamicObjectCount(self, unsigned int count, bool callCallbackOnZero = False)
        setDynamicObjectCount(self, unsigned int count)
        """
        return _osg.State_setDynamicObjectCount(self, *args)

    def getDynamicObjectCount(self):
        """getDynamicObjectCount(self) -> unsigned int"""
        return _osg.State_getDynamicObjectCount(self)

    def decrementDynamicObjectCount(self):
        """decrementDynamicObjectCount(self)"""
        return _osg.State_decrementDynamicObjectCount(self)

    def setMaxTexturePoolSize(self, *args):
        """setMaxTexturePoolSize(self, unsigned int size)"""
        return _osg.State_setMaxTexturePoolSize(self, *args)

    def getMaxTexturePoolSize(self):
        """getMaxTexturePoolSize(self) -> unsigned int"""
        return _osg.State_getMaxTexturePoolSize(self)

    def setMaxBufferObjectPoolSize(self, *args):
        """setMaxBufferObjectPoolSize(self, unsigned int size)"""
        return _osg.State_setMaxBufferObjectPoolSize(self, *args)

    def getMaxBufferObjectPoolSize(self):
        """getMaxBufferObjectPoolSize(self) -> unsigned int"""
        return _osg.State_getMaxBufferObjectPoolSize(self)

    NEVER_CHECK_GL_ERRORS = _osg.State_NEVER_CHECK_GL_ERRORS
    ONCE_PER_FRAME = _osg.State_ONCE_PER_FRAME
    ONCE_PER_ATTRIBUTE = _osg.State_ONCE_PER_ATTRIBUTE
    def setCheckForGLErrors(self, *args):
        """setCheckForGLErrors(self, CheckForGLErrors check)"""
        return _osg.State_setCheckForGLErrors(self, *args)

    def getCheckForGLErrors(self):
        """getCheckForGLErrors(self) -> CheckForGLErrors"""
        return _osg.State_getCheckForGLErrors(self)

    def checkGLErrors(self, *args):
        """
        checkGLErrors(self, char str) -> bool
        checkGLErrors(self, GLMode mode) -> bool
        checkGLErrors(self, StateAttribute attribute) -> bool
        """
        return _osg.State_checkGLErrors(self, *args)

    def _print(self, *args):
        """_print(self, std::ostream fout)"""
        return _osg.State__print(self, *args)

    def initializeExtensionProcs(self):
        """initializeExtensionProcs(self)"""
        return _osg.State_initializeExtensionProcs(self)

    def objectDeleted(self, *args):
        """objectDeleted(self, void object)"""
        return _osg.State_objectDeleted(self, *args)

    def getGLBeginEndAdapter(self):
        """getGLBeginEndAdapter(self) -> GLBeginEndAdapter"""
        return _osg.State_getGLBeginEndAdapter(self)

    def getArrayDispatchers(self):
        """getArrayDispatchers(self) -> ArrayDispatchers"""
        return _osg.State_getArrayDispatchers(self)

    def setGraphicsCostEstimator(self, *args):
        """setGraphicsCostEstimator(self, GraphicsCostEstimator gce)"""
        return _osg.State_setGraphicsCostEstimator(self, *args)

    def getGraphicsCostEstimator(self, *args):
        """
        getGraphicsCostEstimator(self) -> GraphicsCostEstimator
        getGraphicsCostEstimator(self) -> GraphicsCostEstimator
        """
        return _osg.State_getGraphicsCostEstimator(self, *args)

    def getStartTick(self):
        """getStartTick(self) -> Timer_t"""
        return _osg.State_getStartTick(self)

    def setStartTick(self, *args):
        """setStartTick(self, Timer_t tick)"""
        return _osg.State_setStartTick(self, *args)

    def getGpuTick(self):
        """getGpuTick(self) -> Timer_t"""
        return _osg.State_getGpuTick(self)

    def getGpuTime(self):
        """getGpuTime(self) -> double"""
        return _osg.State_getGpuTime(self)

    def getGpuTimestamp(self):
        """getGpuTimestamp(self) -> GLuint64EXT"""
        return _osg.State_getGpuTimestamp(self)

    def setGpuTimestamp(self, *args):
        """setGpuTimestamp(self, Timer_t tick, GLuint64EXT timestamp)"""
        return _osg.State_setGpuTimestamp(self, *args)

    def getTimestampBits(self):
        """getTimestampBits(self) -> int"""
        return _osg.State_getTimestampBits(self)

    def setTimestampBits(self, *args):
        """setTimestampBits(self, int bits)"""
        return _osg.State_setTimestampBits(self, *args)

    def frameCompleted(self):
        """frameCompleted(self)"""
        return _osg.State_frameCompleted(self)

State_swigregister = _osg.State_swigregister
State_swigregister(State)

OSG_NODECALLBACK = _osg.OSG_NODECALLBACK
class NodeCallback(Object):
    """Proxy of C++ osg::NodeCallback class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> NodeCallback
        __init__(self, NodeCallback nc, CopyOp arg1) -> NodeCallback
        """
        if self.__class__ == NodeCallback:
            _self = None
        else:
            _self = self
        this = _osg.new_NodeCallback(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.NodeCallback_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.NodeCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.NodeCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.NodeCallback_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.NodeCallback_className(self)

    def __call__(self, *args):
        """__call__(self, Node node, NodeVisitor nv)"""
        return _osg.NodeCallback___call__(self, *args)

    def traverse(self, *args):
        """traverse(self, Node node, NodeVisitor nv)"""
        return _osg.NodeCallback_traverse(self, *args)

    def setNestedCallback(self, *args):
        """setNestedCallback(self, NodeCallback nc)"""
        return _osg.NodeCallback_setNestedCallback(self, *args)

    def getNestedCallback(self, *args):
        """
        getNestedCallback(self) -> NodeCallback
        getNestedCallback(self) -> NodeCallback
        """
        return _osg.NodeCallback_getNestedCallback(self, *args)

    def addNestedCallback(self, *args):
        """addNestedCallback(self, NodeCallback nc)"""
        return _osg.NodeCallback_addNestedCallback(self, *args)

    def removeNestedCallback(self, *args):
        """removeNestedCallback(self, NodeCallback nc)"""
        return _osg.NodeCallback_removeNestedCallback(self, *args)

    __swig_setmethods__["_nestedCallback"] = _osg.NodeCallback__nestedCallback_set
    __swig_getmethods__["_nestedCallback"] = _osg.NodeCallback__nestedCallback_get
    if _newclass:_nestedCallback = _swig_property(_osg.NodeCallback__nestedCallback_get, _osg.NodeCallback__nestedCallback_set)
    def __disown__(self):
        self.this.disown()
        _osg.disown_NodeCallback(self)
        return weakref_proxy(self)
NodeCallback_swigregister = _osg.NodeCallback_swigregister
NodeCallback_swigregister(NodeCallback)

OSG_VIEW = _osg.OSG_VIEW
class View(Object):
    """Proxy of C++ osg::View class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> View
        __init__(self, View view, CopyOp copyop = SHALLOW_COPY) -> View
        __init__(self, View view) -> View
        """
        this = _osg.new_View(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.View_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.View_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.View_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.View_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.View_className(self)

    def take(self, *args):
        """take(self, View rhs)"""
        return _osg.View_take(self, *args)

    def setStats(self, *args):
        """setStats(self, Stats stats)"""
        return _osg.View_setStats(self, *args)

    def getStats(self, *args):
        """
        getStats(self) -> Stats
        getStats(self) -> Stats
        """
        return _osg.View_getStats(self, *args)

    NO_LIGHT = _osg.View_NO_LIGHT
    HEADLIGHT = _osg.View_HEADLIGHT
    SKY_LIGHT = _osg.View_SKY_LIGHT
    def setLightingMode(self, *args):
        """setLightingMode(self, LightingMode lightingMode)"""
        return _osg.View_setLightingMode(self, *args)

    def getLightingMode(self):
        """getLightingMode(self) -> LightingMode"""
        return _osg.View_getLightingMode(self)

    def setLight(self, *args):
        """setLight(self, Light light)"""
        return _osg.View_setLight(self, *args)

    def getLight(self, *args):
        """
        getLight(self) -> Light
        getLight(self) -> Light
        """
        return _osg.View_getLight(self, *args)

    def setCamera(self, *args):
        """setCamera(self, Camera camera)"""
        return _osg.View_setCamera(self, *args)

    def getCamera(self, *args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osg.View_getCamera(self, *args)

    def setFrameStamp(self, *args):
        """setFrameStamp(self, FrameStamp fs)"""
        return _osg.View_setFrameStamp(self, *args)

    def getFrameStamp(self, *args):
        """
        getFrameStamp(self) -> FrameStamp
        getFrameStamp(self) -> FrameStamp
        """
        return _osg.View_getFrameStamp(self, *args)

    def addSlave(self, *args):
        """
        addSlave(self, Camera camera, bool useMastersSceneData = True) -> bool
        addSlave(self, Camera camera) -> bool
        addSlave(self, Camera camera, Matrix projectionOffset, Matrix viewOffset, 
            bool useMastersSceneData = True) -> bool
        addSlave(self, Camera camera, Matrix projectionOffset, Matrix viewOffset) -> bool
        """
        return _osg.View_addSlave(self, *args)

    def removeSlave(self, *args):
        """removeSlave(self, unsigned int pos) -> bool"""
        return _osg.View_removeSlave(self, *args)

    def getNumSlaves(self):
        """getNumSlaves(self) -> unsigned int"""
        return _osg.View_getNumSlaves(self)

    def findSlaveIndexForCamera(self, *args):
        """findSlaveIndexForCamera(self, Camera camera) -> unsigned int"""
        return _osg.View_findSlaveIndexForCamera(self, *args)

    def updateSlaves(self):
        """updateSlaves(self)"""
        return _osg.View_updateSlaves(self)

View_swigregister = _osg.View_swigregister
View_swigregister(View)

OSG_RENDERINFO = _osg.OSG_RENDERINFO
class RenderInfo(_object):
    """Proxy of C++ osg::RenderInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RenderInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RenderInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RenderInfo
        __init__(self, RenderInfo rhs) -> RenderInfo
        __init__(self, State state, View view) -> RenderInfo
        """
        this = _osg.new_RenderInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getContextID(self):
        """getContextID(self) -> unsigned int"""
        return _osg.RenderInfo_getContextID(self)

    def setState(self, *args):
        """setState(self, State state)"""
        return _osg.RenderInfo_setState(self, *args)

    def getState(self, *args):
        """
        getState(self) -> State
        getState(self) -> State
        """
        return _osg.RenderInfo_getState(self, *args)

    def setView(self, *args):
        """setView(self, View view)"""
        return _osg.RenderInfo_setView(self, *args)

    def getView(self, *args):
        """
        getView(self) -> View
        getView(self) -> View
        """
        return _osg.RenderInfo_getView(self, *args)

    def pushCamera(self, *args):
        """pushCamera(self, Camera camera)"""
        return _osg.RenderInfo_pushCamera(self, *args)

    def popCamera(self):
        """popCamera(self)"""
        return _osg.RenderInfo_popCamera(self)

    def getCurrentCamera(self):
        """getCurrentCamera(self) -> Camera"""
        return _osg.RenderInfo_getCurrentCamera(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced userData)"""
        return _osg.RenderInfo_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.RenderInfo_getUserData(self, *args)

    __swig_destroy__ = _osg.delete_RenderInfo
    __del__ = lambda self : None;
RenderInfo_swigregister = _osg.RenderInfo_swigregister
RenderInfo_swigregister(RenderInfo)

OSG_DRAWABLE = _osg.OSG_DRAWABLE
GL_OCCLUSION_TEST_HP = _osg.GL_OCCLUSION_TEST_HP
GL_OCCLUSION_TEST_RESULT_HP = _osg.GL_OCCLUSION_TEST_RESULT_HP
GL_PIXEL_COUNTER_BITS_NV = _osg.GL_PIXEL_COUNTER_BITS_NV
GL_CURRENT_OCCLUSION_QUERY_ID_NV = _osg.GL_CURRENT_OCCLUSION_QUERY_ID_NV
GL_PIXEL_COUNT_NV = _osg.GL_PIXEL_COUNT_NV
GL_PIXEL_COUNT_AVAILABLE_NV = _osg.GL_PIXEL_COUNT_AVAILABLE_NV
GL_SAMPLES_PASSED_ARB = _osg.GL_SAMPLES_PASSED_ARB
GL_QUERY_COUNTER_BITS_ARB = _osg.GL_QUERY_COUNTER_BITS_ARB
GL_CURRENT_QUERY_ARB = _osg.GL_CURRENT_QUERY_ARB
GL_QUERY_RESULT_ARB = _osg.GL_QUERY_RESULT_ARB
GL_QUERY_RESULT_AVAILABLE_ARB = _osg.GL_QUERY_RESULT_AVAILABLE_ARB
GL_TIME_ELAPSED = _osg.GL_TIME_ELAPSED
GL_TIMESTAMP = _osg.GL_TIMESTAMP
GL_QUERY_RESULT = _osg.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = _osg.GL_QUERY_RESULT_AVAILABLE
class Drawable(Object):
    """Proxy of C++ osg::Drawable class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Drawable, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Drawable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["s_numberDrawablesReusedLastInLastFrame"] = _osg.Drawable_s_numberDrawablesReusedLastInLastFrame_set
    __swig_getmethods__["s_numberDrawablesReusedLastInLastFrame"] = _osg.Drawable_s_numberDrawablesReusedLastInLastFrame_get
    if _newclass:s_numberDrawablesReusedLastInLastFrame = _swig_property(_osg.Drawable_s_numberDrawablesReusedLastInLastFrame_get, _osg.Drawable_s_numberDrawablesReusedLastInLastFrame_set)
    __swig_setmethods__["s_numberNewDrawablesInLastFrame"] = _osg.Drawable_s_numberNewDrawablesInLastFrame_set
    __swig_getmethods__["s_numberNewDrawablesInLastFrame"] = _osg.Drawable_s_numberNewDrawablesInLastFrame_get
    if _newclass:s_numberNewDrawablesInLastFrame = _swig_property(_osg.Drawable_s_numberNewDrawablesInLastFrame_get, _osg.Drawable_s_numberNewDrawablesInLastFrame_set)
    __swig_setmethods__["s_numberDeletedDrawablesInLastFrame"] = _osg.Drawable_s_numberDeletedDrawablesInLastFrame_set
    __swig_getmethods__["s_numberDeletedDrawablesInLastFrame"] = _osg.Drawable_s_numberDeletedDrawablesInLastFrame_get
    if _newclass:s_numberDeletedDrawablesInLastFrame = _swig_property(_osg.Drawable_s_numberDeletedDrawablesInLastFrame_get, _osg.Drawable_s_numberDeletedDrawablesInLastFrame_set)
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Drawable_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Drawable_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Drawable_className(self)

    def asGeometry(self, *args):
        """
        asGeometry(self) -> Geometry
        asGeometry(self) -> Geometry
        """
        return _osg.Drawable_asGeometry(self, *args)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.Drawable_computeDataVariance(self)

    def getParents(self, *args):
        """
        getParents(self) -> ParentList
        getParents(self) -> ParentList
        """
        return _osg.Drawable_getParents(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Node
        getParent(self, unsigned int i) -> Node
        """
        return _osg.Drawable_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.Drawable_getNumParents(self)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.Drawable_getWorldMatrices(self, haltTraversalAtNode)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.Drawable_setStateSet(self, *args)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.Drawable_getStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.Drawable_getOrCreateStateSet(self)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingBox bbox)"""
        return _osg.Drawable_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingBox"""
        return _osg.Drawable_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.Drawable_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingBox"""
        return _osg.Drawable_getBound(self)

    def computeBound(self):
        """computeBound(self) -> BoundingBox"""
        return _osg.Drawable_computeBound(self)

    def setShape(self, *args):
        """setShape(self, Shape shape)"""
        return _osg.Drawable_setShape(self, *args)

    def getShape(self, *args):
        """
        getShape(self) -> Shape
        getShape(self) -> Shape
        """
        return _osg.Drawable_getShape(self, *args)

    def setSupportsDisplayList(self, *args):
        """setSupportsDisplayList(self, bool flag)"""
        return _osg.Drawable_setSupportsDisplayList(self, *args)

    def getSupportsDisplayList(self):
        """getSupportsDisplayList(self) -> bool"""
        return _osg.Drawable_getSupportsDisplayList(self)

    def setUseDisplayList(self, *args):
        """setUseDisplayList(self, bool flag)"""
        return _osg.Drawable_setUseDisplayList(self, *args)

    def getUseDisplayList(self):
        """getUseDisplayList(self) -> bool"""
        return _osg.Drawable_getUseDisplayList(self)

    def getDisplayList(self, *args):
        """getDisplayList(self, unsigned int contextID) -> GLuint"""
        return _osg.Drawable_getDisplayList(self, *args)

    def setUseVertexBufferObjects(self, *args):
        """setUseVertexBufferObjects(self, bool flag)"""
        return _osg.Drawable_setUseVertexBufferObjects(self, *args)

    def getUseVertexBufferObjects(self):
        """getUseVertexBufferObjects(self) -> bool"""
        return _osg.Drawable_getUseVertexBufferObjects(self)

    def dirtyDisplayList(self):
        """dirtyDisplayList(self)"""
        return _osg.Drawable_dirtyDisplayList(self)

    def getGLObjectSizeHint(self):
        """getGLObjectSizeHint(self) -> unsigned int"""
        return _osg.Drawable_getGLObjectSizeHint(self)

    def draw(self, *args):
        """draw(self, RenderInfo renderInfo)"""
        return _osg.Drawable_draw(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, RenderInfo renderInfo)"""
        return _osg.Drawable_compileGLObjects(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Drawable_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Drawable_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.Drawable_releaseGLObjects(self, state)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, UpdateCallback ac)"""
        return _osg.Drawable_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> UpdateCallback
        getUpdateCallback(self) -> UpdateCallback
        """
        return _osg.Drawable_getUpdateCallback(self, *args)

    def requiresUpdateTraversal(self):
        """requiresUpdateTraversal(self) -> bool"""
        return _osg.Drawable_requiresUpdateTraversal(self)

    def requiresEventTraversal(self):
        """requiresEventTraversal(self) -> bool"""
        return _osg.Drawable_requiresEventTraversal(self)

    def drawImplementation(self, *args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osg.Drawable_drawImplementation(self, *args)

    def generateDisplayList(*args):
        """
        generateDisplayList(unsigned int contextID, unsigned int sizeHint = 0) -> GLuint
        generateDisplayList(unsigned int contextID) -> GLuint
        """
        return _osg.Drawable_generateDisplayList(*args)

    if _newclass:generateDisplayList = staticmethod(generateDisplayList)
    __swig_getmethods__["generateDisplayList"] = lambda x: generateDisplayList
    def setMinimumNumberOfDisplayListsToRetainInCache(*args):
        """setMinimumNumberOfDisplayListsToRetainInCache(unsigned int minimum)"""
        return _osg.Drawable_setMinimumNumberOfDisplayListsToRetainInCache(*args)

    if _newclass:setMinimumNumberOfDisplayListsToRetainInCache = staticmethod(setMinimumNumberOfDisplayListsToRetainInCache)
    __swig_getmethods__["setMinimumNumberOfDisplayListsToRetainInCache"] = lambda x: setMinimumNumberOfDisplayListsToRetainInCache
    def getMinimumNumberOfDisplayListsToRetainInCache():
        """getMinimumNumberOfDisplayListsToRetainInCache() -> unsigned int"""
        return _osg.Drawable_getMinimumNumberOfDisplayListsToRetainInCache()

    if _newclass:getMinimumNumberOfDisplayListsToRetainInCache = staticmethod(getMinimumNumberOfDisplayListsToRetainInCache)
    __swig_getmethods__["getMinimumNumberOfDisplayListsToRetainInCache"] = lambda x: getMinimumNumberOfDisplayListsToRetainInCache
    def deleteDisplayList(*args):
        """
        deleteDisplayList(unsigned int contextID, GLuint globj, unsigned int sizeHint = 0)
        deleteDisplayList(unsigned int contextID, GLuint globj)
        """
        return _osg.Drawable_deleteDisplayList(*args)

    if _newclass:deleteDisplayList = staticmethod(deleteDisplayList)
    __swig_getmethods__["deleteDisplayList"] = lambda x: deleteDisplayList
    def flushAllDeletedDisplayLists(*args):
        """flushAllDeletedDisplayLists(unsigned int contextID)"""
        return _osg.Drawable_flushAllDeletedDisplayLists(*args)

    if _newclass:flushAllDeletedDisplayLists = staticmethod(flushAllDeletedDisplayLists)
    __swig_getmethods__["flushAllDeletedDisplayLists"] = lambda x: flushAllDeletedDisplayLists
    def discardAllDeletedDisplayLists(*args):
        """discardAllDeletedDisplayLists(unsigned int contextID)"""
        return _osg.Drawable_discardAllDeletedDisplayLists(*args)

    if _newclass:discardAllDeletedDisplayLists = staticmethod(discardAllDeletedDisplayLists)
    __swig_getmethods__["discardAllDeletedDisplayLists"] = lambda x: discardAllDeletedDisplayLists
    def flushDeletedDisplayLists(*args):
        """flushDeletedDisplayLists(unsigned int contextID, double availableTime)"""
        return _osg.Drawable_flushDeletedDisplayLists(*args)

    if _newclass:flushDeletedDisplayLists = staticmethod(flushDeletedDisplayLists)
    __swig_getmethods__["flushDeletedDisplayLists"] = lambda x: flushDeletedDisplayLists
    VERTICES = _osg.Drawable_VERTICES
    WEIGHTS = _osg.Drawable_WEIGHTS
    NORMALS = _osg.Drawable_NORMALS
    COLORS = _osg.Drawable_COLORS
    SECONDARY_COLORS = _osg.Drawable_SECONDARY_COLORS
    FOG_COORDS = _osg.Drawable_FOG_COORDS
    ATTRIBUTE_6 = _osg.Drawable_ATTRIBUTE_6
    ATTRIBUTE_7 = _osg.Drawable_ATTRIBUTE_7
    TEXTURE_COORDS = _osg.Drawable_TEXTURE_COORDS
    TEXTURE_COORDS_0 = _osg.Drawable_TEXTURE_COORDS_0
    TEXTURE_COORDS_1 = _osg.Drawable_TEXTURE_COORDS_1
    TEXTURE_COORDS_2 = _osg.Drawable_TEXTURE_COORDS_2
    TEXTURE_COORDS_3 = _osg.Drawable_TEXTURE_COORDS_3
    TEXTURE_COORDS_4 = _osg.Drawable_TEXTURE_COORDS_4
    TEXTURE_COORDS_5 = _osg.Drawable_TEXTURE_COORDS_5
    TEXTURE_COORDS_6 = _osg.Drawable_TEXTURE_COORDS_6
    TEXTURE_COORDS_7 = _osg.Drawable_TEXTURE_COORDS_7
    def accept(self, *args):
        """
        accept(self,  arg0)
        accept(self,  arg0)
        accept(self, PrimitiveFunctor arg0)
        accept(self, PrimitiveIndexFunctor arg0)
        """
        return _osg.Drawable_accept(self, *args)

Drawable_swigregister = _osg.Drawable_swigregister
Drawable_swigregister(Drawable)

def Drawable_generateDisplayList(*args):
  """
    generateDisplayList(unsigned int contextID, unsigned int sizeHint = 0) -> GLuint
    Drawable_generateDisplayList(unsigned int contextID) -> GLuint
    """
  return _osg.Drawable_generateDisplayList(*args)

def Drawable_setMinimumNumberOfDisplayListsToRetainInCache(*args):
  """Drawable_setMinimumNumberOfDisplayListsToRetainInCache(unsigned int minimum)"""
  return _osg.Drawable_setMinimumNumberOfDisplayListsToRetainInCache(*args)

def Drawable_getMinimumNumberOfDisplayListsToRetainInCache():
  """Drawable_getMinimumNumberOfDisplayListsToRetainInCache() -> unsigned int"""
  return _osg.Drawable_getMinimumNumberOfDisplayListsToRetainInCache()

def Drawable_deleteDisplayList(*args):
  """
    deleteDisplayList(unsigned int contextID, GLuint globj, unsigned int sizeHint = 0)
    Drawable_deleteDisplayList(unsigned int contextID, GLuint globj)
    """
  return _osg.Drawable_deleteDisplayList(*args)

def Drawable_flushAllDeletedDisplayLists(*args):
  """Drawable_flushAllDeletedDisplayLists(unsigned int contextID)"""
  return _osg.Drawable_flushAllDeletedDisplayLists(*args)

def Drawable_discardAllDeletedDisplayLists(*args):
  """Drawable_discardAllDeletedDisplayLists(unsigned int contextID)"""
  return _osg.Drawable_discardAllDeletedDisplayLists(*args)

def Drawable_flushDeletedDisplayLists(*args):
  """Drawable_flushDeletedDisplayLists(unsigned int contextID, double availableTime)"""
  return _osg.Drawable_flushDeletedDisplayLists(*args)

class UpdateCallback(Object):
    """Proxy of C++ UpdateCallback class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdateCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UpdateCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UpdateCallback
        __init__(self, UpdateCallback arg0, CopyOp arg1) -> UpdateCallback
        """
        if self.__class__ == UpdateCallback:
            _self = None
        else:
            _self = self
        this = _osg.new_UpdateCallback(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.UpdateCallback_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.UpdateCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.UpdateCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.UpdateCallback_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.UpdateCallback_className(self)

    def update(self, *args):
        """update(self, NodeVisitor arg0, Drawable arg1)"""
        return _osg.UpdateCallback_update(self, *args)

    __swig_destroy__ = _osg.delete_UpdateCallback
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _osg.disown_UpdateCallback(self)
        return weakref_proxy(self)
UpdateCallback_swigregister = _osg.UpdateCallback_swigregister
UpdateCallback_swigregister(UpdateCallback)

class AttributeFunctor(_object):
    """Proxy of C++ AttributeFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttributeFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AttributeFunctor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_AttributeFunctor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, GLbyte arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, GLshort arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, GLint arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, GLubyte arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, GLushort arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, GLuint arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, float arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec2 arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec3 arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec4 arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec4ub arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, double arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec2d arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec3d arg2)
        apply(self, Drawable::AttributeType arg0, unsigned int arg1, Vec4d arg2)
        """
        return _osg.AttributeFunctor_apply(self, *args)

    def __init__(self): 
        """__init__(self) -> AttributeFunctor"""
        if self.__class__ == AttributeFunctor:
            _self = None
        else:
            _self = self
        this = _osg.new_AttributeFunctor(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _osg.disown_AttributeFunctor(self)
        return weakref_proxy(self)
AttributeFunctor_swigregister = _osg.AttributeFunctor_swigregister
AttributeFunctor_swigregister(AttributeFunctor)

#get the original definitions back into their classes
Drawable.UpdateCallback = UpdateCallback
Drawable.AttributeFunctor = AttributeFunctor

OSG_ARRAY = _osg.OSG_ARRAY
class Array(BufferData):
    """Proxy of C++ osg::Array class"""
    __swig_setmethods__ = {}
    for _s in [BufferData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ArrayType = _osg.Array_ArrayType
    ByteArrayType = _osg.Array_ByteArrayType
    ShortArrayType = _osg.Array_ShortArrayType
    IntArrayType = _osg.Array_IntArrayType
    UByteArrayType = _osg.Array_UByteArrayType
    UShortArrayType = _osg.Array_UShortArrayType
    UIntArrayType = _osg.Array_UIntArrayType
    Vec4ubArrayType = _osg.Array_Vec4ubArrayType
    FloatArrayType = _osg.Array_FloatArrayType
    Vec2ArrayType = _osg.Array_Vec2ArrayType
    Vec3ArrayType = _osg.Array_Vec3ArrayType
    Vec4ArrayType = _osg.Array_Vec4ArrayType
    Vec2sArrayType = _osg.Array_Vec2sArrayType
    Vec3sArrayType = _osg.Array_Vec3sArrayType
    Vec4sArrayType = _osg.Array_Vec4sArrayType
    Vec2bArrayType = _osg.Array_Vec2bArrayType
    Vec3bArrayType = _osg.Array_Vec3bArrayType
    Vec4bArrayType = _osg.Array_Vec4bArrayType
    DoubleArrayType = _osg.Array_DoubleArrayType
    Vec2dArrayType = _osg.Array_Vec2dArrayType
    Vec3dArrayType = _osg.Array_Vec3dArrayType
    Vec4dArrayType = _osg.Array_Vec4dArrayType
    MatrixArrayType = _osg.Array_MatrixArrayType
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Array_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Array_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Array_className(self)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor arg0)
        accept(self, ConstArrayVisitor arg0)
        accept(self, unsigned int index, ValueVisitor arg1)
        accept(self, unsigned int index, ConstValueVisitor arg1)
        """
        return _osg.Array_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Array_compare(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Array_getType(self)

    def getDataSize(self):
        """getDataSize(self) -> GLint"""
        return _osg.Array_getDataSize(self)

    def getDataType(self):
        """getDataType(self) -> GLenum"""
        return _osg.Array_getDataType(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Array_getNumElements(self)

    def trim(self):
        """trim(self)"""
        return _osg.Array_trim(self)

    def setVertexBufferObject(self, *args):
        """setVertexBufferObject(self, VertexBufferObject vbo)"""
        return _osg.Array_setVertexBufferObject(self, *args)

    def getVertexBufferObject(self, *args):
        """
        getVertexBufferObject(self) -> VertexBufferObject
        getVertexBufferObject(self) -> VertexBufferObject
        """
        return _osg.Array_getVertexBufferObject(self, *args)

    def asVec2Array(self):
        """asVec2Array(self) -> Vec2Array"""
        return _osg.Array_asVec2Array(self)

    def asVec3Array(self):
        """asVec3Array(self) -> Vec3Array"""
        return _osg.Array_asVec3Array(self)

    def asVec4Array(self):
        """asVec4Array(self) -> Vec4Array"""
        return _osg.Array_asVec4Array(self)

    def asVec2dArray(self):
        """asVec2dArray(self) -> Vec2dArray"""
        return _osg.Array_asVec2dArray(self)

    def asVec3dArray(self):
        """asVec3dArray(self) -> Vec3dArray"""
        return _osg.Array_asVec3dArray(self)

    def asVec4dArray(self):
        """asVec4dArray(self) -> Vec4dArray"""
        return _osg.Array_asVec4dArray(self)

    def asShortArray(self):
        """asShortArray(self) -> ShortArray"""
        return _osg.Array_asShortArray(self)

    def asIntArray(self):
        """asIntArray(self) -> IntArray"""
        return _osg.Array_asIntArray(self)

    def asUByteArray(self):
        """asUByteArray(self) -> UByteArray"""
        return _osg.Array_asUByteArray(self)

    def asUShortArray(self):
        """asUShortArray(self) -> UShortArray"""
        return _osg.Array_asUShortArray(self)

    def asUIntArray(self):
        """asUIntArray(self) -> UIntArray"""
        return _osg.Array_asUIntArray(self)

    def asFloatArray(self):
        """asFloatArray(self) -> FloatArray"""
        return _osg.Array_asFloatArray(self)

Array_swigregister = _osg.Array_swigregister
Array_swigregister(Array)

class IndexArray(Array):
    """Proxy of C++ osg::IndexArray class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexArray, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.IndexArray_isSameKindAs(self, *args)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.IndexArray_index(self, *args)

IndexArray_swigregister = _osg.IndexArray_swigregister
IndexArray_swigregister(IndexArray)

class ArrayVisitor(_object):
    """Proxy of C++ osg::ArrayVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ArrayVisitor"""
        this = _osg.new_ArrayVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ArrayVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, Array arg0)
        apply(self, ByteArray arg0)
        apply(self, ShortArray arg0)
        apply(self, IntArray arg0)
        apply(self, UByteArray arg0)
        apply(self, UShortArray arg0)
        apply(self, UIntArray arg0)
        apply(self, FloatArray arg0)
        apply(self, DoubleArray arg0)
        apply(self, Vec2Array arg0)
        apply(self, Vec3Array arg0)
        apply(self, Vec4Array arg0)
        apply(self, Vec4ubArray arg0)
        apply(self, Vec2bArray arg0)
        apply(self, Vec3bArray arg0)
        apply(self, Vec4bArray arg0)
        apply(self, Vec2sArray arg0)
        apply(self, Vec3sArray arg0)
        apply(self, Vec4sArray arg0)
        apply(self, Vec2dArray arg0)
        apply(self, Vec3dArray arg0)
        apply(self, Vec4dArray arg0)
        apply(self, MatrixfArray arg0)
        """
        return _osg.ArrayVisitor_apply(self, *args)

ArrayVisitor_swigregister = _osg.ArrayVisitor_swigregister
ArrayVisitor_swigregister(ArrayVisitor)

class ConstArrayVisitor(_object):
    """Proxy of C++ osg::ConstArrayVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstArrayVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstArrayVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ConstArrayVisitor"""
        this = _osg.new_ConstArrayVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ConstArrayVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, Array arg0)
        apply(self, ByteArray arg0)
        apply(self, ShortArray arg0)
        apply(self, IntArray arg0)
        apply(self, UByteArray arg0)
        apply(self, UShortArray arg0)
        apply(self, UIntArray arg0)
        apply(self, FloatArray arg0)
        apply(self, DoubleArray arg0)
        apply(self, Vec2Array arg0)
        apply(self, Vec3Array arg0)
        apply(self, Vec4Array arg0)
        apply(self, Vec4ubArray arg0)
        apply(self, Vec2bArray arg0)
        apply(self, Vec3bArray arg0)
        apply(self, Vec4bArray arg0)
        apply(self, Vec2sArray arg0)
        apply(self, Vec3sArray arg0)
        apply(self, Vec4sArray arg0)
        apply(self, Vec2dArray arg0)
        apply(self, Vec3dArray arg0)
        apply(self, Vec4dArray arg0)
        apply(self, MatrixfArray arg0)
        """
        return _osg.ConstArrayVisitor_apply(self, *args)

ConstArrayVisitor_swigregister = _osg.ConstArrayVisitor_swigregister
ConstArrayVisitor_swigregister(ConstArrayVisitor)

class ValueVisitor(_object):
    """Proxy of C++ osg::ValueVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ValueVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ValueVisitor"""
        this = _osg.new_ValueVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ValueVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, GLbyte arg0)
        apply(self, GLshort arg0)
        apply(self, GLint arg0)
        apply(self, GLushort arg0)
        apply(self, GLubyte arg0)
        apply(self, GLuint arg0)
        apply(self, GLfloat arg0)
        apply(self, GLdouble arg0)
        apply(self, Vec2 arg0)
        apply(self, Vec3 arg0)
        apply(self, Vec4 arg0)
        apply(self, Vec4ub arg0)
        apply(self, Vec2b arg0)
        apply(self, Vec3b arg0)
        apply(self, Vec4b arg0)
        apply(self, Vec2s arg0)
        apply(self, Vec3s arg0)
        apply(self, Vec4s arg0)
        apply(self, Vec2d arg0)
        apply(self, Vec3d arg0)
        apply(self, Vec4d arg0)
        apply(self, Matrixf arg0)
        """
        return _osg.ValueVisitor_apply(self, *args)

ValueVisitor_swigregister = _osg.ValueVisitor_swigregister
ValueVisitor_swigregister(ValueVisitor)

class ConstValueVisitor(_object):
    """Proxy of C++ osg::ConstValueVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstValueVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstValueVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ConstValueVisitor"""
        this = _osg.new_ConstValueVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ConstValueVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, GLbyte arg0)
        apply(self, GLshort arg0)
        apply(self, GLint arg0)
        apply(self, GLushort arg0)
        apply(self, GLubyte arg0)
        apply(self, GLuint arg0)
        apply(self, GLfloat arg0)
        apply(self, GLdouble arg0)
        apply(self, Vec4ub arg0)
        apply(self, Vec2 arg0)
        apply(self, Vec3 arg0)
        apply(self, Vec4 arg0)
        apply(self, Vec2b arg0)
        apply(self, Vec3b arg0)
        apply(self, Vec4b arg0)
        apply(self, Vec2s arg0)
        apply(self, Vec3s arg0)
        apply(self, Vec4s arg0)
        apply(self, Vec2d arg0)
        apply(self, Vec3d arg0)
        apply(self, Vec4d arg0)
        apply(self, Matrixf arg0)
        """
        return _osg.ConstValueVisitor_apply(self, *args)

ConstValueVisitor_swigregister = _osg.ConstValueVisitor_swigregister
ConstValueVisitor_swigregister(ConstValueVisitor)

class vectorGLshort(_object):
    """Proxy of C++ std::vector<(GLshort)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLshort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLshort, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGLshort_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGLshort___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGLshort___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(short)>::size_type"""
        return _osg.vectorGLshort___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(short)>::value_type"""
        return _osg.vectorGLshort_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, std::vector<(short)>::difference_type i, std::vector<(short)>::difference_type j) -> vectorGLshort"""
        return _osg.vectorGLshort___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(short)>::difference_type i, std::vector<(short)>::difference_type j, 
            vectorGLshort v)
        """
        return _osg.vectorGLshort___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, std::vector<(short)>::difference_type i, std::vector<(short)>::difference_type j)"""
        return _osg.vectorGLshort___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(short)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGLshort___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGLshort
        __getitem__(self, std::vector<(short)>::difference_type i) -> std::vector<(short)>::value_type
        """
        return _osg.vectorGLshort___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGLshort v)
        __setitem__(self, std::vector<(short)>::difference_type i, std::vector<(short)>::value_type x)
        """
        return _osg.vectorGLshort___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(short)>::value_type x)"""
        return _osg.vectorGLshort_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGLshort_empty(self)

    def size(self):
        """size(self) -> std::vector<(short)>::size_type"""
        return _osg.vectorGLshort_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGLshort_clear(self)

    def swap(self, *args):
        """swap(self, vectorGLshort v)"""
        return _osg.vectorGLshort_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(short)>::allocator_type"""
        return _osg.vectorGLshort_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(short)>::const_iterator"""
        return _osg.vectorGLshort_begin(self)

    def end(self):
        """end(self) -> std::vector<(short)>::const_iterator"""
        return _osg.vectorGLshort_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(short)>::const_reverse_iterator"""
        return _osg.vectorGLshort_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(short)>::const_reverse_iterator"""
        return _osg.vectorGLshort_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGLshort_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(short)>::iterator pos) -> std::vector<(short)>::iterator
        erase(self, std::vector<(short)>::iterator first, std::vector<(short)>::iterator last) -> std::vector<(short)>::iterator
        """
        return _osg.vectorGLshort_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGLshort
        __init__(self, vectorGLshort arg0) -> vectorGLshort
        __init__(self, std::vector<(short)>::size_type size) -> vectorGLshort
        __init__(self, std::vector<(short)>::size_type size, std::vector<(short)>::value_type value) -> vectorGLshort
        """
        this = _osg.new_vectorGLshort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(short)>::value_type x)"""
        return _osg.vectorGLshort_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(short)>::value_type"""
        return _osg.vectorGLshort_front(self)

    def back(self):
        """back(self) -> std::vector<(short)>::value_type"""
        return _osg.vectorGLshort_back(self)

    def assign(self, *args):
        """assign(self, std::vector<(short)>::size_type n, std::vector<(short)>::value_type x)"""
        return _osg.vectorGLshort_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(short)>::size_type new_size)
        resize(self, std::vector<(short)>::size_type new_size, std::vector<(short)>::value_type x)
        """
        return _osg.vectorGLshort_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(short)>::iterator pos, std::vector<(short)>::value_type x) -> std::vector<(short)>::iterator
        insert(self, std::vector<(short)>::iterator pos, std::vector<(short)>::size_type n, 
            std::vector<(short)>::value_type x)
        """
        return _osg.vectorGLshort_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(short)>::size_type n)"""
        return _osg.vectorGLshort_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(short)>::size_type"""
        return _osg.vectorGLshort_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLshort
    __del__ = lambda self : None;
vectorGLshort_swigregister = _osg.vectorGLshort_swigregister
vectorGLshort_swigregister(vectorGLshort)

class vectorGLint(_object):
    """Proxy of C++ std::vector<(GLint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLint, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGLint_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGLint___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGLint___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(int)>::size_type"""
        return _osg.vectorGLint___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(int)>::value_type"""
        return _osg.vectorGLint_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, std::vector<(int)>::difference_type i, std::vector<(int)>::difference_type j) -> vectorGLint"""
        return _osg.vectorGLint___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(int)>::difference_type i, std::vector<(int)>::difference_type j, 
            vectorGLint v)
        """
        return _osg.vectorGLint___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, std::vector<(int)>::difference_type i, std::vector<(int)>::difference_type j)"""
        return _osg.vectorGLint___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(int)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGLint___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGLint
        __getitem__(self, std::vector<(int)>::difference_type i) -> std::vector<(int)>::value_type
        """
        return _osg.vectorGLint___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGLint v)
        __setitem__(self, std::vector<(int)>::difference_type i, std::vector<(int)>::value_type x)
        """
        return _osg.vectorGLint___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(int)>::value_type x)"""
        return _osg.vectorGLint_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGLint_empty(self)

    def size(self):
        """size(self) -> std::vector<(int)>::size_type"""
        return _osg.vectorGLint_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGLint_clear(self)

    def swap(self, *args):
        """swap(self, vectorGLint v)"""
        return _osg.vectorGLint_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(int)>::allocator_type"""
        return _osg.vectorGLint_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(int)>::const_iterator"""
        return _osg.vectorGLint_begin(self)

    def end(self):
        """end(self) -> std::vector<(int)>::const_iterator"""
        return _osg.vectorGLint_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(int)>::const_reverse_iterator"""
        return _osg.vectorGLint_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(int)>::const_reverse_iterator"""
        return _osg.vectorGLint_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGLint_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(int)>::iterator pos) -> std::vector<(int)>::iterator
        erase(self, std::vector<(int)>::iterator first, std::vector<(int)>::iterator last) -> std::vector<(int)>::iterator
        """
        return _osg.vectorGLint_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGLint
        __init__(self, vectorGLint arg0) -> vectorGLint
        __init__(self, std::vector<(int)>::size_type size) -> vectorGLint
        __init__(self, std::vector<(int)>::size_type size, std::vector<(int)>::value_type value) -> vectorGLint
        """
        this = _osg.new_vectorGLint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(int)>::value_type x)"""
        return _osg.vectorGLint_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(int)>::value_type"""
        return _osg.vectorGLint_front(self)

    def back(self):
        """back(self) -> std::vector<(int)>::value_type"""
        return _osg.vectorGLint_back(self)

    def assign(self, *args):
        """assign(self, std::vector<(int)>::size_type n, std::vector<(int)>::value_type x)"""
        return _osg.vectorGLint_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(int)>::size_type new_size)
        resize(self, std::vector<(int)>::size_type new_size, std::vector<(int)>::value_type x)
        """
        return _osg.vectorGLint_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(int)>::iterator pos, std::vector<(int)>::value_type x) -> std::vector<(int)>::iterator
        insert(self, std::vector<(int)>::iterator pos, std::vector<(int)>::size_type n, 
            std::vector<(int)>::value_type x)
        """
        return _osg.vectorGLint_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(int)>::size_type n)"""
        return _osg.vectorGLint_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(int)>::size_type"""
        return _osg.vectorGLint_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLint
    __del__ = lambda self : None;
vectorGLint_swigregister = _osg.vectorGLint_swigregister
vectorGLint_swigregister(vectorGLint)

class vectorGLubyte(_object):
    """Proxy of C++ std::vector<(GLubyte)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLubyte, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLubyte, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGLubyte_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGLubyte___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGLubyte___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(unsigned char)>::size_type"""
        return _osg.vectorGLubyte___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(unsigned char)>::value_type"""
        return _osg.vectorGLubyte_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, std::vector<(unsigned char)>::difference_type i, std::vector<(unsigned char)>::difference_type j) -> vectorGLubyte"""
        return _osg.vectorGLubyte___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(unsigned char)>::difference_type i, std::vector<(unsigned char)>::difference_type j, 
            vectorGLubyte v)
        """
        return _osg.vectorGLubyte___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, std::vector<(unsigned char)>::difference_type i, std::vector<(unsigned char)>::difference_type j)"""
        return _osg.vectorGLubyte___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(unsigned char)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGLubyte___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGLubyte
        __getitem__(self, std::vector<(unsigned char)>::difference_type i) -> std::vector<(unsigned char)>::value_type
        """
        return _osg.vectorGLubyte___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGLubyte v)
        __setitem__(self, std::vector<(unsigned char)>::difference_type i, std::vector<(unsigned char)>::value_type x)
        """
        return _osg.vectorGLubyte___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(unsigned char)>::value_type x)"""
        return _osg.vectorGLubyte_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGLubyte_empty(self)

    def size(self):
        """size(self) -> std::vector<(unsigned char)>::size_type"""
        return _osg.vectorGLubyte_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGLubyte_clear(self)

    def swap(self, *args):
        """swap(self, vectorGLubyte v)"""
        return _osg.vectorGLubyte_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(unsigned char)>::allocator_type"""
        return _osg.vectorGLubyte_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(unsigned char)>::const_iterator"""
        return _osg.vectorGLubyte_begin(self)

    def end(self):
        """end(self) -> std::vector<(unsigned char)>::const_iterator"""
        return _osg.vectorGLubyte_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(unsigned char)>::const_reverse_iterator"""
        return _osg.vectorGLubyte_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(unsigned char)>::const_reverse_iterator"""
        return _osg.vectorGLubyte_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGLubyte_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(unsigned char)>::iterator pos) -> std::vector<(unsigned char)>::iterator
        erase(self, std::vector<(unsigned char)>::iterator first, std::vector<(unsigned char)>::iterator last) -> std::vector<(unsigned char)>::iterator
        """
        return _osg.vectorGLubyte_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGLubyte
        __init__(self, vectorGLubyte arg0) -> vectorGLubyte
        __init__(self, std::vector<(unsigned char)>::size_type size) -> vectorGLubyte
        __init__(self, std::vector<(unsigned char)>::size_type size, std::vector<(unsigned char)>::value_type value) -> vectorGLubyte
        """
        this = _osg.new_vectorGLubyte(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(unsigned char)>::value_type x)"""
        return _osg.vectorGLubyte_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(unsigned char)>::value_type"""
        return _osg.vectorGLubyte_front(self)

    def back(self):
        """back(self) -> std::vector<(unsigned char)>::value_type"""
        return _osg.vectorGLubyte_back(self)

    def assign(self, *args):
        """assign(self, std::vector<(unsigned char)>::size_type n, std::vector<(unsigned char)>::value_type x)"""
        return _osg.vectorGLubyte_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(unsigned char)>::size_type new_size)
        resize(self, std::vector<(unsigned char)>::size_type new_size, std::vector<(unsigned char)>::value_type x)
        """
        return _osg.vectorGLubyte_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(unsigned char)>::iterator pos, std::vector<(unsigned char)>::value_type x) -> std::vector<(unsigned char)>::iterator
        insert(self, std::vector<(unsigned char)>::iterator pos, std::vector<(unsigned char)>::size_type n, 
            std::vector<(unsigned char)>::value_type x)
        """
        return _osg.vectorGLubyte_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(unsigned char)>::size_type n)"""
        return _osg.vectorGLubyte_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(unsigned char)>::size_type"""
        return _osg.vectorGLubyte_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLubyte
    __del__ = lambda self : None;
vectorGLubyte_swigregister = _osg.vectorGLubyte_swigregister
vectorGLubyte_swigregister(vectorGLubyte)

class vectorGLushort(_object):
    """Proxy of C++ std::vector<(GLushort)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLushort, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGLushort_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGLushort___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGLushort___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(unsigned short)>::size_type"""
        return _osg.vectorGLushort___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(unsigned short)>::value_type"""
        return _osg.vectorGLushort_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, std::vector<(unsigned short)>::difference_type i, std::vector<(unsigned short)>::difference_type j) -> vectorGLushort"""
        return _osg.vectorGLushort___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(unsigned short)>::difference_type i, std::vector<(unsigned short)>::difference_type j, 
            vectorGLushort v)
        """
        return _osg.vectorGLushort___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, std::vector<(unsigned short)>::difference_type i, std::vector<(unsigned short)>::difference_type j)"""
        return _osg.vectorGLushort___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(unsigned short)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGLushort___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGLushort
        __getitem__(self, std::vector<(unsigned short)>::difference_type i) -> std::vector<(unsigned short)>::value_type
        """
        return _osg.vectorGLushort___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGLushort v)
        __setitem__(self, std::vector<(unsigned short)>::difference_type i, std::vector<(unsigned short)>::value_type x)
        """
        return _osg.vectorGLushort___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(unsigned short)>::value_type x)"""
        return _osg.vectorGLushort_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGLushort_empty(self)

    def size(self):
        """size(self) -> std::vector<(unsigned short)>::size_type"""
        return _osg.vectorGLushort_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGLushort_clear(self)

    def swap(self, *args):
        """swap(self, vectorGLushort v)"""
        return _osg.vectorGLushort_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(unsigned short)>::allocator_type"""
        return _osg.vectorGLushort_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(unsigned short)>::const_iterator"""
        return _osg.vectorGLushort_begin(self)

    def end(self):
        """end(self) -> std::vector<(unsigned short)>::const_iterator"""
        return _osg.vectorGLushort_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(unsigned short)>::const_reverse_iterator"""
        return _osg.vectorGLushort_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(unsigned short)>::const_reverse_iterator"""
        return _osg.vectorGLushort_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGLushort_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(unsigned short)>::iterator pos) -> std::vector<(unsigned short)>::iterator
        erase(self, std::vector<(unsigned short)>::iterator first, std::vector<(unsigned short)>::iterator last) -> std::vector<(unsigned short)>::iterator
        """
        return _osg.vectorGLushort_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGLushort
        __init__(self, vectorGLushort arg0) -> vectorGLushort
        __init__(self, std::vector<(unsigned short)>::size_type size) -> vectorGLushort
        __init__(self, std::vector<(unsigned short)>::size_type size, std::vector<(unsigned short)>::value_type value) -> vectorGLushort
        """
        this = _osg.new_vectorGLushort(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(unsigned short)>::value_type x)"""
        return _osg.vectorGLushort_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(unsigned short)>::value_type"""
        return _osg.vectorGLushort_front(self)

    def back(self):
        """back(self) -> std::vector<(unsigned short)>::value_type"""
        return _osg.vectorGLushort_back(self)

    def assign(self, *args):
        """assign(self, std::vector<(unsigned short)>::size_type n, std::vector<(unsigned short)>::value_type x)"""
        return _osg.vectorGLushort_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(unsigned short)>::size_type new_size)
        resize(self, std::vector<(unsigned short)>::size_type new_size, 
            std::vector<(unsigned short)>::value_type x)
        """
        return _osg.vectorGLushort_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(unsigned short)>::iterator pos, std::vector<(unsigned short)>::value_type x) -> std::vector<(unsigned short)>::iterator
        insert(self, std::vector<(unsigned short)>::iterator pos, std::vector<(unsigned short)>::size_type n, 
            std::vector<(unsigned short)>::value_type x)
        """
        return _osg.vectorGLushort_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(unsigned short)>::size_type n)"""
        return _osg.vectorGLushort_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(unsigned short)>::size_type"""
        return _osg.vectorGLushort_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLushort
    __del__ = lambda self : None;
vectorGLushort_swigregister = _osg.vectorGLushort_swigregister
vectorGLushort_swigregister(vectorGLushort)

class vectorGLuint(_object):
    """Proxy of C++ std::vector<(GLuint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLuint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLuint, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGLuint_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGLuint___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGLuint___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(unsigned int)>::size_type"""
        return _osg.vectorGLuint___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(unsigned int)>::value_type"""
        return _osg.vectorGLuint_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, std::vector<(unsigned int)>::difference_type i, std::vector<(unsigned int)>::difference_type j) -> vectorGLuint"""
        return _osg.vectorGLuint___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(unsigned int)>::difference_type i, std::vector<(unsigned int)>::difference_type j, 
            vectorGLuint v)
        """
        return _osg.vectorGLuint___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, std::vector<(unsigned int)>::difference_type i, std::vector<(unsigned int)>::difference_type j)"""
        return _osg.vectorGLuint___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(unsigned int)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGLuint___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGLuint
        __getitem__(self, std::vector<(unsigned int)>::difference_type i) -> std::vector<(unsigned int)>::value_type
        """
        return _osg.vectorGLuint___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGLuint v)
        __setitem__(self, std::vector<(unsigned int)>::difference_type i, std::vector<(unsigned int)>::value_type x)
        """
        return _osg.vectorGLuint___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(unsigned int)>::value_type x)"""
        return _osg.vectorGLuint_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGLuint_empty(self)

    def size(self):
        """size(self) -> std::vector<(unsigned int)>::size_type"""
        return _osg.vectorGLuint_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGLuint_clear(self)

    def swap(self, *args):
        """swap(self, vectorGLuint v)"""
        return _osg.vectorGLuint_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(unsigned int)>::allocator_type"""
        return _osg.vectorGLuint_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(unsigned int)>::const_iterator"""
        return _osg.vectorGLuint_begin(self)

    def end(self):
        """end(self) -> std::vector<(unsigned int)>::const_iterator"""
        return _osg.vectorGLuint_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(unsigned int)>::const_reverse_iterator"""
        return _osg.vectorGLuint_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(unsigned int)>::const_reverse_iterator"""
        return _osg.vectorGLuint_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGLuint_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(unsigned int)>::iterator pos) -> std::vector<(unsigned int)>::iterator
        erase(self, std::vector<(unsigned int)>::iterator first, std::vector<(unsigned int)>::iterator last) -> std::vector<(unsigned int)>::iterator
        """
        return _osg.vectorGLuint_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGLuint
        __init__(self, vectorGLuint arg0) -> vectorGLuint
        __init__(self, std::vector<(unsigned int)>::size_type size) -> vectorGLuint
        __init__(self, std::vector<(unsigned int)>::size_type size, std::vector<(unsigned int)>::value_type value) -> vectorGLuint
        """
        this = _osg.new_vectorGLuint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::vector<(unsigned int)>::value_type x)"""
        return _osg.vectorGLuint_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(unsigned int)>::value_type"""
        return _osg.vectorGLuint_front(self)

    def back(self):
        """back(self) -> std::vector<(unsigned int)>::value_type"""
        return _osg.vectorGLuint_back(self)

    def assign(self, *args):
        """assign(self, std::vector<(unsigned int)>::size_type n, std::vector<(unsigned int)>::value_type x)"""
        return _osg.vectorGLuint_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(unsigned int)>::size_type new_size)
        resize(self, std::vector<(unsigned int)>::size_type new_size, std::vector<(unsigned int)>::value_type x)
        """
        return _osg.vectorGLuint_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(unsigned int)>::iterator pos, std::vector<(unsigned int)>::value_type x) -> std::vector<(unsigned int)>::iterator
        insert(self, std::vector<(unsigned int)>::iterator pos, std::vector<(unsigned int)>::size_type n, 
            std::vector<(unsigned int)>::value_type x)
        """
        return _osg.vectorGLuint_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(unsigned int)>::size_type n)"""
        return _osg.vectorGLuint_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(unsigned int)>::size_type"""
        return _osg.vectorGLuint_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLuint
    __del__ = lambda self : None;
vectorGLuint_swigregister = _osg.vectorGLuint_swigregister
vectorGLuint_swigregister(vectorGLuint)

class vectorGLfloat(_object):
    """Proxy of C++ std::vector<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGLfloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGLfloat, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGLfloat_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGLfloat___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGLfloat___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorGLfloat___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorGLfloat_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorGLfloat"""
        return _osg.vectorGLfloat___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorGLfloat v)"""
        return _osg.vectorGLfloat___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorGLfloat___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGLfloat___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGLfloat
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorGLfloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGLfloat v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorGLfloat___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorGLfloat_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGLfloat_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorGLfloat_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGLfloat_clear(self)

    def swap(self, *args):
        """swap(self, vectorGLfloat v)"""
        return _osg.vectorGLfloat_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorGLfloat_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorGLfloat_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorGLfloat_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorGLfloat_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorGLfloat_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGLfloat_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorGLfloat_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGLfloat
        __init__(self, vectorGLfloat arg0) -> vectorGLfloat
        __init__(self, size_type size) -> vectorGLfloat
        __init__(self, size_type size, value_type value) -> vectorGLfloat
        """
        this = _osg.new_vectorGLfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorGLfloat_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorGLfloat_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorGLfloat_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorGLfloat_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorGLfloat_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorGLfloat_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorGLfloat_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorGLfloat_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGLfloat
    __del__ = lambda self : None;
vectorGLfloat_swigregister = _osg.vectorGLfloat_swigregister
vectorGLfloat_swigregister(vectorGLfloat)

class vectorVec2(_object):
    """Proxy of C++ std::vector<(osg::Vec2f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec2, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorVec2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorVec2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorVec2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorVec2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorVec2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorVec2"""
        return _osg.vectorVec2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorVec2 v)"""
        return _osg.vectorVec2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorVec2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorVec2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorVec2
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorVec2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorVec2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorVec2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorVec2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorVec2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorVec2_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorVec2_clear(self)

    def swap(self, *args):
        """swap(self, vectorVec2 v)"""
        return _osg.vectorVec2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorVec2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorVec2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorVec2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorVec2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorVec2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorVec2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorVec2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorVec2
        __init__(self, vectorVec2 arg0) -> vectorVec2
        __init__(self, size_type size) -> vectorVec2
        __init__(self, size_type size, value_type value) -> vectorVec2
        """
        this = _osg.new_vectorVec2(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorVec2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorVec2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorVec2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorVec2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorVec2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorVec2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorVec2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorVec2_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec2
    __del__ = lambda self : None;
vectorVec2_swigregister = _osg.vectorVec2_swigregister
vectorVec2_swigregister(vectorVec2)

class vectorVec3(_object):
    """Proxy of C++ std::vector<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec3, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorVec3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorVec3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorVec3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorVec3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorVec3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorVec3"""
        return _osg.vectorVec3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorVec3 v)"""
        return _osg.vectorVec3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorVec3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorVec3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorVec3
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorVec3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorVec3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorVec3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorVec3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorVec3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorVec3_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorVec3_clear(self)

    def swap(self, *args):
        """swap(self, vectorVec3 v)"""
        return _osg.vectorVec3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorVec3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorVec3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorVec3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorVec3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorVec3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorVec3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorVec3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorVec3
        __init__(self, vectorVec3 arg0) -> vectorVec3
        __init__(self, size_type size) -> vectorVec3
        __init__(self, size_type size, value_type value) -> vectorVec3
        """
        this = _osg.new_vectorVec3(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorVec3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorVec3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorVec3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorVec3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorVec3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorVec3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorVec3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorVec3_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec3
    __del__ = lambda self : None;
vectorVec3_swigregister = _osg.vectorVec3_swigregister
vectorVec3_swigregister(vectorVec3)

class vectorVec4(_object):
    """Proxy of C++ std::vector<(osg::Vec4f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec4, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorVec4_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorVec4___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorVec4___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorVec4___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorVec4_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorVec4"""
        return _osg.vectorVec4___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorVec4 v)"""
        return _osg.vectorVec4___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorVec4___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorVec4___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorVec4
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorVec4___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorVec4 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorVec4___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorVec4_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorVec4_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorVec4_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorVec4_clear(self)

    def swap(self, *args):
        """swap(self, vectorVec4 v)"""
        return _osg.vectorVec4_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorVec4_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorVec4_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorVec4_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorVec4_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorVec4_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorVec4_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorVec4_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorVec4
        __init__(self, vectorVec4 arg0) -> vectorVec4
        __init__(self, size_type size) -> vectorVec4
        __init__(self, size_type size, value_type value) -> vectorVec4
        """
        this = _osg.new_vectorVec4(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorVec4_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorVec4_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorVec4_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorVec4_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorVec4_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorVec4_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorVec4_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorVec4_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec4
    __del__ = lambda self : None;
vectorVec4_swigregister = _osg.vectorVec4_swigregister
vectorVec4_swigregister(vectorVec4)

class vectorVec2d(_object):
    """Proxy of C++ std::vector<(osg::Vec2d)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec2d, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorVec2d_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorVec2d___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorVec2d___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorVec2d___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorVec2d_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorVec2d"""
        return _osg.vectorVec2d___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorVec2d v)"""
        return _osg.vectorVec2d___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorVec2d___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorVec2d___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorVec2d
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorVec2d___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorVec2d v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorVec2d___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorVec2d_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorVec2d_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorVec2d_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorVec2d_clear(self)

    def swap(self, *args):
        """swap(self, vectorVec2d v)"""
        return _osg.vectorVec2d_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorVec2d_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorVec2d_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorVec2d_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorVec2d_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorVec2d_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorVec2d_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorVec2d_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorVec2d
        __init__(self, vectorVec2d arg0) -> vectorVec2d
        __init__(self, size_type size) -> vectorVec2d
        __init__(self, size_type size, value_type value) -> vectorVec2d
        """
        this = _osg.new_vectorVec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorVec2d_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorVec2d_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorVec2d_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorVec2d_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorVec2d_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorVec2d_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorVec2d_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorVec2d_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec2d
    __del__ = lambda self : None;
vectorVec2d_swigregister = _osg.vectorVec2d_swigregister
vectorVec2d_swigregister(vectorVec2d)

class vectorVec3d(_object):
    """Proxy of C++ std::vector<(osg::Vec3d)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec3d, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorVec3d_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorVec3d___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorVec3d___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorVec3d___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorVec3d_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorVec3d"""
        return _osg.vectorVec3d___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorVec3d v)"""
        return _osg.vectorVec3d___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorVec3d___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorVec3d___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorVec3d
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorVec3d___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorVec3d v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorVec3d___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorVec3d_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorVec3d_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorVec3d_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorVec3d_clear(self)

    def swap(self, *args):
        """swap(self, vectorVec3d v)"""
        return _osg.vectorVec3d_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorVec3d_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorVec3d_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorVec3d_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorVec3d_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorVec3d_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorVec3d_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorVec3d_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorVec3d
        __init__(self, vectorVec3d arg0) -> vectorVec3d
        __init__(self, size_type size) -> vectorVec3d
        __init__(self, size_type size, value_type value) -> vectorVec3d
        """
        this = _osg.new_vectorVec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorVec3d_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorVec3d_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorVec3d_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorVec3d_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorVec3d_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorVec3d_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorVec3d_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorVec3d_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec3d
    __del__ = lambda self : None;
vectorVec3d_swigregister = _osg.vectorVec3d_swigregister
vectorVec3d_swigregister(vectorVec3d)

class vectorVec4d(_object):
    """Proxy of C++ std::vector<(osg::Vec4d)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorVec4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorVec4d, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorVec4d_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorVec4d___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorVec4d___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorVec4d___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorVec4d_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorVec4d"""
        return _osg.vectorVec4d___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorVec4d v)"""
        return _osg.vectorVec4d___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorVec4d___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorVec4d___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorVec4d
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorVec4d___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorVec4d v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorVec4d___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorVec4d_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorVec4d_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorVec4d_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorVec4d_clear(self)

    def swap(self, *args):
        """swap(self, vectorVec4d v)"""
        return _osg.vectorVec4d_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorVec4d_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorVec4d_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorVec4d_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorVec4d_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorVec4d_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorVec4d_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorVec4d_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorVec4d
        __init__(self, vectorVec4d arg0) -> vectorVec4d
        __init__(self, size_type size) -> vectorVec4d
        __init__(self, size_type size, value_type value) -> vectorVec4d
        """
        this = _osg.new_vectorVec4d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorVec4d_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorVec4d_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorVec4d_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorVec4d_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorVec4d_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorVec4d_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorVec4d_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorVec4d_capacity(self)

    __swig_destroy__ = _osg.delete_vectorVec4d
    __del__ = lambda self : None;
vectorVec4d_swigregister = _osg.vectorVec4d_swigregister
vectorVec4d_swigregister(vectorVec4d)

class ShortArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLshort,osg::Array::ShortArrayType,1,0x1402)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShortArray
        __init__(self, ShortArray ta, CopyOp copyop = SHALLOW_COPY) -> ShortArray
        __init__(self, ShortArray ta) -> ShortArray
        __init__(self, unsigned int no) -> ShortArray
        __init__(self, unsigned int no, short ptr) -> ShortArray
        """
        this = _osg.new_ShortArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ShortArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ShortArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.ShortArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.ShortArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.ShortArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.ShortArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.ShortArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.ShortArray_getNumElements(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.ShortArray_index(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLshort"""
        return _osg.ShortArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLshort el)"""
        return _osg.ShortArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.ShortArray_size(self)

ShortArray_swigregister = _osg.ShortArray_swigregister
ShortArray_swigregister(ShortArray)

class IntArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLint,osg::Array::IntArrayType,1,0x1404)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> IntArray
        __init__(self, IntArray ta, CopyOp copyop = SHALLOW_COPY) -> IntArray
        __init__(self, IntArray ta) -> IntArray
        __init__(self, unsigned int no) -> IntArray
        __init__(self, unsigned int no, int ptr) -> IntArray
        """
        this = _osg.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.IntArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.IntArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.IntArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.IntArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.IntArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.IntArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.IntArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.IntArray_getNumElements(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.IntArray_index(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLint"""
        return _osg.IntArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLint el)"""
        return _osg.IntArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.IntArray_size(self)

IntArray_swigregister = _osg.IntArray_swigregister
IntArray_swigregister(IntArray)

class UByteArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLubyte,osg::Array::UByteArrayType,1,0x1401)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UByteArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UByteArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UByteArray
        __init__(self, UByteArray ta, CopyOp copyop = SHALLOW_COPY) -> UByteArray
        __init__(self, UByteArray ta) -> UByteArray
        __init__(self, unsigned int no) -> UByteArray
        __init__(self, unsigned int no, unsigned char ptr) -> UByteArray
        """
        this = _osg.new_UByteArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.UByteArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.UByteArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.UByteArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.UByteArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.UByteArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.UByteArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.UByteArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.UByteArray_getNumElements(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.UByteArray_index(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLubyte"""
        return _osg.UByteArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLubyte el)"""
        return _osg.UByteArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.UByteArray_size(self)

UByteArray_swigregister = _osg.UByteArray_swigregister
UByteArray_swigregister(UByteArray)

class UShortArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLushort,osg::Array::UShortArrayType,1,0x1403)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UShortArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UShortArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UShortArray
        __init__(self, UShortArray ta, CopyOp copyop = SHALLOW_COPY) -> UShortArray
        __init__(self, UShortArray ta) -> UShortArray
        __init__(self, unsigned int no) -> UShortArray
        __init__(self, unsigned int no, unsigned short ptr) -> UShortArray
        """
        this = _osg.new_UShortArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.UShortArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.UShortArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.UShortArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.UShortArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.UShortArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.UShortArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.UShortArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.UShortArray_getNumElements(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.UShortArray_index(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLushort"""
        return _osg.UShortArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLushort el)"""
        return _osg.UShortArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.UShortArray_size(self)

UShortArray_swigregister = _osg.UShortArray_swigregister
UShortArray_swigregister(UShortArray)

class UIntArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(GLuint,osg::Array::UIntArrayType,1,0x1405)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UIntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> UIntArray
        __init__(self, UIntArray ta, CopyOp copyop = SHALLOW_COPY) -> UIntArray
        __init__(self, UIntArray ta) -> UIntArray
        __init__(self, unsigned int no) -> UIntArray
        __init__(self, unsigned int no, unsigned int ptr) -> UIntArray
        """
        this = _osg.new_UIntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.UIntArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.UIntArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.UIntArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.UIntArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.UIntArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.UIntArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.UIntArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.UIntArray_getNumElements(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.UIntArray_index(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLuint"""
        return _osg.UIntArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLuint el)"""
        return _osg.UIntArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.UIntArray_size(self)

UIntArray_swigregister = _osg.UIntArray_swigregister
UIntArray_swigregister(UIntArray)

class FloatArray(IndexArray):
    """Proxy of C++ osg::TemplateIndexArray<(float,osg::Array::FloatArrayType,1,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [IndexArray]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatArray, name, value)
    __swig_getmethods__ = {}
    for _s in [IndexArray]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> FloatArray
        __init__(self, FloatArray ta, CopyOp copyop = SHALLOW_COPY) -> FloatArray
        __init__(self, FloatArray ta) -> FloatArray
        __init__(self, unsigned int no) -> FloatArray
        __init__(self, unsigned int no, float ptr) -> FloatArray
        """
        this = _osg.new_FloatArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.FloatArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.FloatArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.FloatArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.FloatArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.FloatArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.FloatArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.FloatArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.FloatArray_getNumElements(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.FloatArray_index(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLfloat"""
        return _osg.FloatArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, float el)"""
        return _osg.FloatArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.FloatArray_size(self)

FloatArray_swigregister = _osg.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

class Vec2Array(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec2,osg::Array::Vec2ArrayType,2,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Vec2Array
        __init__(self, Vec2Array ta, CopyOp copyop = SHALLOW_COPY) -> Vec2Array
        __init__(self, Vec2Array ta) -> Vec2Array
        __init__(self, unsigned int no) -> Vec2Array
        __init__(self, unsigned int no, Vec2f ptr) -> Vec2Array
        """
        this = _osg.new_Vec2Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Vec2Array_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Vec2Array_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec2Array_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec2Array_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.Vec2Array_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Vec2Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Vec2Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Vec2Array_getNumElements(self)

    def asVector(self):
        """asVector(self) -> std::vector<(osg::Vec2,std::allocator<(osg::Vec2)>)>"""
        return _osg.Vec2Array_asVector(self)

    def push_back(self, *args):
        """push_back(self, Vec2 el)"""
        return _osg.Vec2Array_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.Vec2Array_size(self)

Vec2Array_swigregister = _osg.Vec2Array_swigregister
Vec2Array_swigregister(Vec2Array)

class Vec3Array(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec3,osg::Array::Vec3ArrayType,3,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Vec3Array
        __init__(self, Vec3Array ta, CopyOp copyop = SHALLOW_COPY) -> Vec3Array
        __init__(self, Vec3Array ta) -> Vec3Array
        __init__(self, unsigned int no) -> Vec3Array
        __init__(self, unsigned int no, Vec3f ptr) -> Vec3Array
        """
        this = _osg.new_Vec3Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Vec3Array_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Vec3Array_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec3Array_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec3Array_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.Vec3Array_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Vec3Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Vec3Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Vec3Array_getNumElements(self)

    def asVector(self):
        """asVector(self) -> std::vector<(osg::Vec3,std::allocator<(osg::Vec3)>)>"""
        return _osg.Vec3Array_asVector(self)

    def push_back(self, *args):
        """push_back(self, Vec3 el)"""
        return _osg.Vec3Array_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.Vec3Array_size(self)

Vec3Array_swigregister = _osg.Vec3Array_swigregister
Vec3Array_swigregister(Vec3Array)

class Vec4Array(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec4,osg::Array::Vec4ArrayType,4,0x1406)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4Array
        __init__(self, Vec4Array ta, CopyOp copyop = SHALLOW_COPY) -> Vec4Array
        __init__(self, Vec4Array ta) -> Vec4Array
        __init__(self, unsigned int no) -> Vec4Array
        __init__(self, unsigned int no, Vec4f ptr) -> Vec4Array
        """
        this = _osg.new_Vec4Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Vec4Array_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Vec4Array_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec4Array_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec4Array_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.Vec4Array_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Vec4Array_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Vec4Array_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Vec4Array_getNumElements(self)

    def asVector(self):
        """asVector(self) -> std::vector<(osg::Vec4,std::allocator<(osg::Vec4)>)>"""
        return _osg.Vec4Array_asVector(self)

    def push_back(self, *args):
        """push_back(self, Vec4 el)"""
        return _osg.Vec4Array_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.Vec4Array_size(self)

Vec4Array_swigregister = _osg.Vec4Array_swigregister
Vec4Array_swigregister(Vec4Array)

class Vec2dArray(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec2d,osg::Array::Vec2dArrayType,2,0x140A)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2dArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Vec2dArray
        __init__(self, Vec2dArray ta, CopyOp copyop = SHALLOW_COPY) -> Vec2dArray
        __init__(self, Vec2dArray ta) -> Vec2dArray
        __init__(self, unsigned int no) -> Vec2dArray
        __init__(self, unsigned int no, Vec2d ptr) -> Vec2dArray
        """
        this = _osg.new_Vec2dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Vec2dArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Vec2dArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec2dArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec2dArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.Vec2dArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Vec2dArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Vec2dArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Vec2dArray_getNumElements(self)

    def asVector(self):
        """asVector(self) -> vectorVec2d"""
        return _osg.Vec2dArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, Vec2d el)"""
        return _osg.Vec2dArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.Vec2dArray_size(self)

Vec2dArray_swigregister = _osg.Vec2dArray_swigregister
Vec2dArray_swigregister(Vec2dArray)

class Vec3dArray(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec3d,osg::Array::Vec3dArrayType,3,0x140A)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3dArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Vec3dArray
        __init__(self, Vec3dArray ta, CopyOp copyop = SHALLOW_COPY) -> Vec3dArray
        __init__(self, Vec3dArray ta) -> Vec3dArray
        __init__(self, unsigned int no) -> Vec3dArray
        __init__(self, unsigned int no, Vec3d ptr) -> Vec3dArray
        """
        this = _osg.new_Vec3dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Vec3dArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Vec3dArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec3dArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec3dArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.Vec3dArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Vec3dArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Vec3dArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Vec3dArray_getNumElements(self)

    def asVector(self):
        """asVector(self) -> vectorVec3d"""
        return _osg.Vec3dArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, Vec3d el)"""
        return _osg.Vec3dArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.Vec3dArray_size(self)

Vec3dArray_swigregister = _osg.Vec3dArray_swigregister
Vec3dArray_swigregister(Vec3dArray)

class Vec4dArray(Array):
    """Proxy of C++ osg::TemplateArray<(osg::Vec4d,osg::Array::Vec4dArrayType,4,0x140A)> class"""
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec4dArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec4dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Vec4dArray
        __init__(self, Vec4dArray ta, CopyOp copyop = SHALLOW_COPY) -> Vec4dArray
        __init__(self, Vec4dArray ta) -> Vec4dArray
        __init__(self, unsigned int no) -> Vec4dArray
        __init__(self, unsigned int no, Vec4d ptr) -> Vec4dArray
        """
        this = _osg.new_Vec4dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Vec4dArray_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Vec4dArray_clone(self, *args)

    def accept(self, *args):
        """
        accept(self, ArrayVisitor av)
        accept(self, ConstArrayVisitor av)
        accept(self, unsigned int index, ValueVisitor vv)
        accept(self, unsigned int index, ConstValueVisitor vv)
        """
        return _osg.Vec4dArray_accept(self, *args)

    def compare(self, *args):
        """compare(self, unsigned int lhs, unsigned int rhs) -> int"""
        return _osg.Vec4dArray_compare(self, *args)

    def trim(self):
        """trim(self)"""
        return _osg.Vec4dArray_trim(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.Vec4dArray_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.Vec4dArray_getTotalDataSize(self)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Vec4dArray_getNumElements(self)

    def asVector(self):
        """asVector(self) -> vectorVec4d"""
        return _osg.Vec4dArray_asVector(self)

    def push_back(self, *args):
        """push_back(self, Vec4d el)"""
        return _osg.Vec4dArray_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.Vec4dArray_size(self)

Vec4dArray_swigregister = _osg.Vec4dArray_swigregister
Vec4dArray_swigregister(Vec4dArray)

OSG_GEOMETRY = _osg.OSG_GEOMETRY
class Geometry(Drawable):
    """Proxy of C++ osg::Geometry class"""
    __swig_setmethods__ = {}
    for _s in [Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Geometry
        __init__(self, Geometry geometry, CopyOp copyop = SHALLOW_COPY) -> Geometry
        __init__(self, Geometry geometry) -> Geometry
        """
        this = _osg.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Geometry_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Geometry_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Geometry_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Geometry_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Geometry_className(self)

    def asGeometry(self, *args):
        """
        asGeometry(self) -> Geometry
        asGeometry(self) -> Geometry
        """
        return _osg.Geometry_asGeometry(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.Geometry_empty(self)

    BIND_OFF = _osg.Geometry_BIND_OFF
    BIND_OVERALL = _osg.Geometry_BIND_OVERALL
    BIND_PER_PRIMITIVE_SET = _osg.Geometry_BIND_PER_PRIMITIVE_SET
    BIND_PER_PRIMITIVE = _osg.Geometry_BIND_PER_PRIMITIVE
    BIND_PER_VERTEX = _osg.Geometry_BIND_PER_VERTEX
    def setVertexArray(self, *args):
        """setVertexArray(self, Array array)"""
        return _osg.Geometry_setVertexArray(self, *args)

    def getVertexArray(self, *args):
        """
        getVertexArray(self) -> Array
        getVertexArray(self) -> Array
        """
        return _osg.Geometry_getVertexArray(self, *args)

    def setNormalBinding(self, *args):
        """setNormalBinding(self, AttributeBinding ab)"""
        return _osg.Geometry_setNormalBinding(self, *args)

    def getNormalBinding(self):
        """getNormalBinding(self) -> AttributeBinding"""
        return _osg.Geometry_getNormalBinding(self)

    def setNormalArray(self, *args):
        """setNormalArray(self, Array array)"""
        return _osg.Geometry_setNormalArray(self, *args)

    def getNormalArray(self, *args):
        """
        getNormalArray(self) -> Array
        getNormalArray(self) -> Array
        """
        return _osg.Geometry_getNormalArray(self, *args)

    def setColorBinding(self, *args):
        """setColorBinding(self, AttributeBinding ab)"""
        return _osg.Geometry_setColorBinding(self, *args)

    def getColorBinding(self):
        """getColorBinding(self) -> AttributeBinding"""
        return _osg.Geometry_getColorBinding(self)

    def setColorArray(self, *args):
        """setColorArray(self, Array array)"""
        return _osg.Geometry_setColorArray(self, *args)

    def getColorArray(self, *args):
        """
        getColorArray(self) -> Array
        getColorArray(self) -> Array
        """
        return _osg.Geometry_getColorArray(self, *args)

    def setSecondaryColorBinding(self, *args):
        """setSecondaryColorBinding(self, AttributeBinding ab)"""
        return _osg.Geometry_setSecondaryColorBinding(self, *args)

    def getSecondaryColorBinding(self):
        """getSecondaryColorBinding(self) -> AttributeBinding"""
        return _osg.Geometry_getSecondaryColorBinding(self)

    def setSecondaryColorArray(self, *args):
        """setSecondaryColorArray(self, Array array)"""
        return _osg.Geometry_setSecondaryColorArray(self, *args)

    def getSecondaryColorArray(self, *args):
        """
        getSecondaryColorArray(self) -> Array
        getSecondaryColorArray(self) -> Array
        """
        return _osg.Geometry_getSecondaryColorArray(self, *args)

    def setFogCoordBinding(self, *args):
        """setFogCoordBinding(self, AttributeBinding ab)"""
        return _osg.Geometry_setFogCoordBinding(self, *args)

    def getFogCoordBinding(self):
        """getFogCoordBinding(self) -> AttributeBinding"""
        return _osg.Geometry_getFogCoordBinding(self)

    def setFogCoordArray(self, *args):
        """setFogCoordArray(self, Array array)"""
        return _osg.Geometry_setFogCoordArray(self, *args)

    def getFogCoordArray(self, *args):
        """
        getFogCoordArray(self) -> Array
        getFogCoordArray(self) -> Array
        """
        return _osg.Geometry_getFogCoordArray(self, *args)

    def setTexCoordArray(self, *args):
        """setTexCoordArray(self, unsigned int unit, Array arg1)"""
        return _osg.Geometry_setTexCoordArray(self, *args)

    def getTexCoordArray(self, *args):
        """
        getTexCoordArray(self, unsigned int unit) -> Array
        getTexCoordArray(self, unsigned int unit) -> Array
        """
        return _osg.Geometry_getTexCoordArray(self, *args)

    def getNumTexCoordArrays(self):
        """getNumTexCoordArrays(self) -> unsigned int"""
        return _osg.Geometry_getNumTexCoordArrays(self)

    def getTexCoordArrayList(self, *args):
        """
        getTexCoordArrayList(self) -> ArrayDataList
        getTexCoordArrayList(self) -> ArrayDataList
        """
        return _osg.Geometry_getTexCoordArrayList(self, *args)

    def setVertexAttribArray(self, *args):
        """setVertexAttribArray(self, unsigned int index, Array array)"""
        return _osg.Geometry_setVertexAttribArray(self, *args)

    def getVertexAttribArray(self, *args):
        """
        getVertexAttribArray(self, unsigned int index) -> Array
        getVertexAttribArray(self, unsigned int index) -> Array
        """
        return _osg.Geometry_getVertexAttribArray(self, *args)

    def setVertexAttribBinding(self, *args):
        """setVertexAttribBinding(self, unsigned int index, AttributeBinding ab)"""
        return _osg.Geometry_setVertexAttribBinding(self, *args)

    def getVertexAttribBinding(self, *args):
        """getVertexAttribBinding(self, unsigned int index) -> AttributeBinding"""
        return _osg.Geometry_getVertexAttribBinding(self, *args)

    def setVertexAttribNormalize(self, *args):
        """setVertexAttribNormalize(self, unsigned int index, GLboolean norm)"""
        return _osg.Geometry_setVertexAttribNormalize(self, *args)

    def getVertexAttribNormalize(self, *args):
        """getVertexAttribNormalize(self, unsigned int index) -> GLboolean"""
        return _osg.Geometry_getVertexAttribNormalize(self, *args)

    def getNumVertexAttribArrays(self):
        """getNumVertexAttribArrays(self) -> unsigned int"""
        return _osg.Geometry_getNumVertexAttribArrays(self)

    def getVertexAttribArrayList(self, *args):
        """
        getVertexAttribArrayList(self) -> ArrayDataList
        getVertexAttribArrayList(self) -> ArrayDataList
        """
        return _osg.Geometry_getVertexAttribArrayList(self, *args)

    def setPrimitiveSetList(self, *args):
        """setPrimitiveSetList(self, PrimitiveSetList primitives)"""
        return _osg.Geometry_setPrimitiveSetList(self, *args)

    def getPrimitiveSetList(self, *args):
        """
        getPrimitiveSetList(self) -> PrimitiveSetList
        getPrimitiveSetList(self) -> PrimitiveSetList
        """
        return _osg.Geometry_getPrimitiveSetList(self, *args)

    def getNumPrimitiveSets(self):
        """getNumPrimitiveSets(self) -> unsigned int"""
        return _osg.Geometry_getNumPrimitiveSets(self)

    def getPrimitiveSet(self, *args):
        """
        getPrimitiveSet(self, unsigned int pos) -> PrimitiveSet
        getPrimitiveSet(self, unsigned int pos) -> PrimitiveSet
        """
        return _osg.Geometry_getPrimitiveSet(self, *args)

    def addPrimitiveSet(self, *args):
        """addPrimitiveSet(self, PrimitiveSet primitiveset) -> bool"""
        return _osg.Geometry_addPrimitiveSet(self, *args)

    def setPrimitiveSet(self, *args):
        """setPrimitiveSet(self, unsigned int i, PrimitiveSet primitiveset) -> bool"""
        return _osg.Geometry_setPrimitiveSet(self, *args)

    def insertPrimitiveSet(self, *args):
        """insertPrimitiveSet(self, unsigned int i, PrimitiveSet primitiveset) -> bool"""
        return _osg.Geometry_insertPrimitiveSet(self, *args)

    def removePrimitiveSet(self, *args):
        """
        removePrimitiveSet(self, unsigned int i, unsigned int numElementsToRemove = 1) -> bool
        removePrimitiveSet(self, unsigned int i) -> bool
        """
        return _osg.Geometry_removePrimitiveSet(self, *args)

    def getPrimitiveSetIndex(self, *args):
        """getPrimitiveSetIndex(self, PrimitiveSet primitiveset) -> unsigned int"""
        return _osg.Geometry_getPrimitiveSetIndex(self, *args)

    def setColorIndices(self, *args):
        """setColorIndices(self, IndexArray array)"""
        return _osg.Geometry_setColorIndices(self, *args)

    def getColorIndices(self, *args):
        """
        getColorIndices(self) -> IndexArray
        getColorIndices(self) -> IndexArray
        """
        return _osg.Geometry_getColorIndices(self, *args)

    def setUseVertexBufferObjects(self, *args):
        """setUseVertexBufferObjects(self, bool flag)"""
        return _osg.Geometry_setUseVertexBufferObjects(self, *args)

    def dirtyDisplayList(self):
        """dirtyDisplayList(self)"""
        return _osg.Geometry_dirtyDisplayList(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Geometry_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.Geometry_releaseGLObjects(self, state)

    def getArrayList(self, *args):
        """getArrayList(self, ArrayList arrayList) -> bool"""
        return _osg.Geometry_getArrayList(self, *args)

    def getDrawElementsList(self, *args):
        """getDrawElementsList(self, DrawElementsList drawElementsList) -> bool"""
        return _osg.Geometry_getDrawElementsList(self, *args)

    def getOrCreateVertexBufferObject(self):
        """getOrCreateVertexBufferObject(self) -> VertexBufferObject"""
        return _osg.Geometry_getOrCreateVertexBufferObject(self)

    def getOrCreateElementBufferObject(self):
        """getOrCreateElementBufferObject(self) -> ElementBufferObject"""
        return _osg.Geometry_getOrCreateElementBufferObject(self)

    def setFastPathHint(self, *args):
        """setFastPathHint(self, bool on)"""
        return _osg.Geometry_setFastPathHint(self, *args)

    def getFastPathHint(self):
        """getFastPathHint(self) -> bool"""
        return _osg.Geometry_getFastPathHint(self)

    def areFastPathsUsed(self):
        """areFastPathsUsed(self) -> bool"""
        return _osg.Geometry_areFastPathsUsed(self)

    def computeFastPathsUsed(self):
        """computeFastPathsUsed(self) -> bool"""
        return _osg.Geometry_computeFastPathsUsed(self)

    def verifyBindings(self):
        """verifyBindings(self) -> bool"""
        return _osg.Geometry_verifyBindings(self)

    def computeCorrectBindingsAndArraySizes(self):
        """computeCorrectBindingsAndArraySizes(self)"""
        return _osg.Geometry_computeCorrectBindingsAndArraySizes(self)

    def verifyArrays(self, *args):
        """verifyArrays(self, std::ostream out) -> bool"""
        return _osg.Geometry_verifyArrays(self, *args)

    def suitableForOptimization(self):
        """suitableForOptimization(self) -> bool"""
        return _osg.Geometry_suitableForOptimization(self)

    def copyToAndOptimize(self, *args):
        """copyToAndOptimize(self, Geometry target)"""
        return _osg.Geometry_copyToAndOptimize(self, *args)

    def containsSharedArrays(self):
        """containsSharedArrays(self) -> bool"""
        return _osg.Geometry_containsSharedArrays(self)

    def duplicateSharedArrays(self):
        """duplicateSharedArrays(self)"""
        return _osg.Geometry_duplicateSharedArrays(self)

    def computeInternalOptimizedGeometry(self):
        """computeInternalOptimizedGeometry(self)"""
        return _osg.Geometry_computeInternalOptimizedGeometry(self)

    def removeInternalOptimizedGeometry(self):
        """removeInternalOptimizedGeometry(self)"""
        return _osg.Geometry_removeInternalOptimizedGeometry(self)

    def setInternalOptimizedGeometry(self, *args):
        """setInternalOptimizedGeometry(self, Geometry geometry)"""
        return _osg.Geometry_setInternalOptimizedGeometry(self, *args)

    def getInternalOptimizedGeometry(self, *args):
        """
        getInternalOptimizedGeometry(self) -> Geometry
        getInternalOptimizedGeometry(self) -> Geometry
        """
        return _osg.Geometry_getInternalOptimizedGeometry(self, *args)

    def getGLObjectSizeHint(self):
        """getGLObjectSizeHint(self) -> unsigned int"""
        return _osg.Geometry_getGLObjectSizeHint(self)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, RenderInfo renderInfo)"""
        return _osg.Geometry_compileGLObjects(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osg.Geometry_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(self,  af)
        accept(self,  af)
        accept(self, PrimitiveFunctor pf)
        accept(self, PrimitiveIndexFunctor pf)
        """
        return _osg.Geometry_accept(self, *args)

Geometry_swigregister = _osg.Geometry_swigregister
Geometry_swigregister(Geometry)

def asVector(*args):
  """
    asVector(DrawElementsUByte base) -> vectorGLubyte
    asVector(DrawElementsUShort base) -> vectorGLushort
    asVector(DrawElementsUInt base) -> vectorGLuint
    asVector(osg::MixinVector<(short)> base) -> vectorGLshort
    asVector(osg::MixinVector<(int)> base) -> vectorGLint
    asVector(osg::MixinVector<(unsigned char)> base) -> vectorGLubyte
    asVector(osg::MixinVector<(unsigned short)> base) -> vectorGLushort
    asVector(osg::MixinVector<(unsigned int)> base) -> vectorGLuint
    asVector(osg::MixinVector<(float)> base) -> vectorGLfloat
    asVector(osg::MixinVector<(osg::Vec2f)> base) -> vectorVec2
    asVector(osg::MixinVector<(osg::Vec3f)> base) -> vectorVec3
    asVector(osg::MixinVector<(osg::Vec4f)> base) -> vectorVec4
    asVector(osg::MixinVector<(osg::Vec2d)> base) -> vectorVec2d
    asVector(osg::MixinVector<(osg::Vec3d)> base) -> vectorVec3d
    asVector(osg::MixinVector<(osg::Vec4d)> base) -> vectorVec4d
    """
  return _osg.asVector(*args)

OSG_SHAPE = _osg.OSG_SHAPE
class Shape(Object):
    """Proxy of C++ osg::Shape class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Shape_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osg.Shape_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Shape_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Shape_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Shape_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor arg0)
        accept(self, ConstShapeVisitor arg0)
        """
        return _osg.Shape_accept(self, *args)

Shape_swigregister = _osg.Shape_swigregister
Shape_swigregister(Shape)

def createTexturedQuadGeometry(*args):
  """
    createTexturedQuadGeometry(Vec3 corner, Vec3 widthVec, Vec3 heightVec, float l, 
        float b, float r, float t) -> Geometry
    createTexturedQuadGeometry(Vec3 corner, Vec3 widthVec, Vec3 heightVec, float s = 1.0, 
        float t = 1.0) -> Geometry
    createTexturedQuadGeometry(Vec3 corner, Vec3 widthVec, Vec3 heightVec, float s = 1.0) -> Geometry
    createTexturedQuadGeometry(Vec3 corner, Vec3 widthVec, Vec3 heightVec) -> Geometry
    """
  return _osg.createTexturedQuadGeometry(*args)

class ShapeVisitor(_object):
    """Proxy of C++ osg::ShapeVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ShapeVisitor"""
        this = _osg.new_ShapeVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ShapeVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, Shape arg0)
        apply(self, Sphere arg0)
        apply(self, Box arg0)
        apply(self, Cone arg0)
        apply(self, Cylinder arg0)
        apply(self, Capsule arg0)
        apply(self, InfinitePlane arg0)
        apply(self, TriangleMesh arg0)
        apply(self, ConvexHull arg0)
        apply(self, HeightField arg0)
        apply(self, CompositeShape arg0)
        """
        return _osg.ShapeVisitor_apply(self, *args)

ShapeVisitor_swigregister = _osg.ShapeVisitor_swigregister
ShapeVisitor_swigregister(ShapeVisitor)

class ConstShapeVisitor(_object):
    """Proxy of C++ osg::ConstShapeVisitor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstShapeVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstShapeVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ConstShapeVisitor"""
        this = _osg.new_ConstShapeVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ConstShapeVisitor
    __del__ = lambda self : None;
    def apply(self, *args):
        """
        apply(self, Shape arg0)
        apply(self, Sphere arg0)
        apply(self, Box arg0)
        apply(self, Cone arg0)
        apply(self, Cylinder arg0)
        apply(self, Capsule arg0)
        apply(self, InfinitePlane arg0)
        apply(self, TriangleMesh arg0)
        apply(self, ConvexHull arg0)
        apply(self, HeightField arg0)
        apply(self, CompositeShape arg0)
        """
        return _osg.ConstShapeVisitor_apply(self, *args)

ConstShapeVisitor_swigregister = _osg.ConstShapeVisitor_swigregister
ConstShapeVisitor_swigregister(ConstShapeVisitor)

class Sphere(Shape):
    """Proxy of C++ osg::Sphere class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sphere, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Sphere
        __init__(self, Vec3 center, float radius) -> Sphere
        __init__(self, Sphere sphere, CopyOp copyop = SHALLOW_COPY) -> Sphere
        __init__(self, Sphere sphere) -> Sphere
        """
        this = _osg.new_Sphere(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Sphere_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Sphere_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Sphere_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Sphere_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Sphere_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.Sphere_accept(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Sphere_valid(self)

    def set(self, *args):
        """set(self, Vec3 center, float radius)"""
        return _osg.Sphere_set(self, *args)

    def setCenter(self, *args):
        """setCenter(self, Vec3 center)"""
        return _osg.Sphere_setCenter(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3"""
        return _osg.Sphere_getCenter(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.Sphere_setRadius(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.Sphere_getRadius(self)

Sphere_swigregister = _osg.Sphere_swigregister
Sphere_swigregister(Sphere)

class Box(Shape):
    """Proxy of C++ osg::Box class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Box
        __init__(self, Vec3 center, float width) -> Box
        __init__(self, Vec3 center, float lengthX, float lengthY, float lengthZ) -> Box
        __init__(self, Box box, CopyOp copyop = SHALLOW_COPY) -> Box
        __init__(self, Box box) -> Box
        """
        this = _osg.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Box_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Box_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Box_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Box_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Box_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.Box_accept(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Box_valid(self)

    def set(self, *args):
        """set(self, Vec3 center, Vec3 halfLengths)"""
        return _osg.Box_set(self, *args)

    def setCenter(self, *args):
        """setCenter(self, Vec3 center)"""
        return _osg.Box_setCenter(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3"""
        return _osg.Box_getCenter(self)

    def setHalfLengths(self, *args):
        """setHalfLengths(self, Vec3 halfLengths)"""
        return _osg.Box_setHalfLengths(self, *args)

    def getHalfLengths(self):
        """getHalfLengths(self) -> Vec3"""
        return _osg.Box_getHalfLengths(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.Box_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.Box_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(self) -> Matrix"""
        return _osg.Box_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(self) -> bool"""
        return _osg.Box_zeroRotation(self)

Box_swigregister = _osg.Box_swigregister
Box_swigregister(Box)

class Cone(Shape):
    """Proxy of C++ osg::Cone class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cone, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Cone
        __init__(self, Vec3 center, float radius, float height) -> Cone
        __init__(self, Cone cone, CopyOp copyop = SHALLOW_COPY) -> Cone
        __init__(self, Cone cone) -> Cone
        """
        this = _osg.new_Cone(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Cone_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Cone_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Cone_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Cone_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Cone_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.Cone_accept(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Cone_valid(self)

    def set(self, *args):
        """set(self, Vec3 center, float radius, float height)"""
        return _osg.Cone_set(self, *args)

    def setCenter(self, *args):
        """setCenter(self, Vec3 center)"""
        return _osg.Cone_setCenter(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3"""
        return _osg.Cone_getCenter(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.Cone_setRadius(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.Cone_getRadius(self)

    def setHeight(self, *args):
        """setHeight(self, float height)"""
        return _osg.Cone_setHeight(self, *args)

    def getHeight(self):
        """getHeight(self) -> float"""
        return _osg.Cone_getHeight(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.Cone_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.Cone_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(self) -> Matrix"""
        return _osg.Cone_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(self) -> bool"""
        return _osg.Cone_zeroRotation(self)

    def getBaseOffsetFactor(self):
        """getBaseOffsetFactor(self) -> float"""
        return _osg.Cone_getBaseOffsetFactor(self)

    def getBaseOffset(self):
        """getBaseOffset(self) -> float"""
        return _osg.Cone_getBaseOffset(self)

Cone_swigregister = _osg.Cone_swigregister
Cone_swigregister(Cone)

class Cylinder(Shape):
    """Proxy of C++ osg::Cylinder class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Cylinder
        __init__(self, Vec3 center, float radius, float height) -> Cylinder
        __init__(self, Cylinder cylinder, CopyOp copyop = SHALLOW_COPY) -> Cylinder
        __init__(self, Cylinder cylinder) -> Cylinder
        """
        this = _osg.new_Cylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Cylinder_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Cylinder_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Cylinder_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Cylinder_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Cylinder_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.Cylinder_accept(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Cylinder_valid(self)

    def set(self, *args):
        """set(self, Vec3 center, float radius, float height)"""
        return _osg.Cylinder_set(self, *args)

    def setCenter(self, *args):
        """setCenter(self, Vec3 center)"""
        return _osg.Cylinder_setCenter(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3"""
        return _osg.Cylinder_getCenter(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.Cylinder_setRadius(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.Cylinder_getRadius(self)

    def setHeight(self, *args):
        """setHeight(self, float height)"""
        return _osg.Cylinder_setHeight(self, *args)

    def getHeight(self):
        """getHeight(self) -> float"""
        return _osg.Cylinder_getHeight(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.Cylinder_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.Cylinder_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(self) -> Matrix"""
        return _osg.Cylinder_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(self) -> bool"""
        return _osg.Cylinder_zeroRotation(self)

Cylinder_swigregister = _osg.Cylinder_swigregister
Cylinder_swigregister(Cylinder)

class Capsule(Shape):
    """Proxy of C++ osg::Capsule class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Capsule, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Capsule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Capsule
        __init__(self, Vec3 center, float radius, float height) -> Capsule
        __init__(self, Capsule capsule, CopyOp copyop = SHALLOW_COPY) -> Capsule
        __init__(self, Capsule capsule) -> Capsule
        """
        this = _osg.new_Capsule(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Capsule_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Capsule_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Capsule_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Capsule_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Capsule_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.Capsule_accept(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.Capsule_valid(self)

    def set(self, *args):
        """set(self, Vec3 center, float radius, float height)"""
        return _osg.Capsule_set(self, *args)

    def setCenter(self, *args):
        """setCenter(self, Vec3 center)"""
        return _osg.Capsule_setCenter(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3"""
        return _osg.Capsule_getCenter(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.Capsule_setRadius(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.Capsule_getRadius(self)

    def setHeight(self, *args):
        """setHeight(self, float height)"""
        return _osg.Capsule_setHeight(self, *args)

    def getHeight(self):
        """getHeight(self) -> float"""
        return _osg.Capsule_getHeight(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.Capsule_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.Capsule_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(self) -> Matrix"""
        return _osg.Capsule_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(self) -> bool"""
        return _osg.Capsule_zeroRotation(self)

Capsule_swigregister = _osg.Capsule_swigregister
Capsule_swigregister(Capsule)

class InfinitePlane(Shape,Plane):
    """Proxy of C++ osg::InfinitePlane class"""
    __swig_setmethods__ = {}
    for _s in [Shape,Plane]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfinitePlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape,Plane]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfinitePlane, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InfinitePlane
        __init__(self, InfinitePlane plane, CopyOp copyop = SHALLOW_COPY) -> InfinitePlane
        __init__(self, InfinitePlane plane) -> InfinitePlane
        """
        this = _osg.new_InfinitePlane(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.InfinitePlane_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.InfinitePlane_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.InfinitePlane_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.InfinitePlane_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.InfinitePlane_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.InfinitePlane_accept(self, *args)

InfinitePlane_swigregister = _osg.InfinitePlane_swigregister
InfinitePlane_swigregister(InfinitePlane)

class TriangleMesh(Shape):
    """Proxy of C++ osg::TriangleMesh class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TriangleMesh
        __init__(self, TriangleMesh mesh, CopyOp copyop = SHALLOW_COPY) -> TriangleMesh
        __init__(self, TriangleMesh mesh) -> TriangleMesh
        """
        this = _osg.new_TriangleMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TriangleMesh_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TriangleMesh_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TriangleMesh_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TriangleMesh_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TriangleMesh_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.TriangleMesh_accept(self, *args)

TriangleMesh_swigregister = _osg.TriangleMesh_swigregister
TriangleMesh_swigregister(TriangleMesh)

class ConvexHull(TriangleMesh):
    """Proxy of C++ osg::ConvexHull class"""
    __swig_setmethods__ = {}
    for _s in [TriangleMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexHull, name, value)
    __swig_getmethods__ = {}
    for _s in [TriangleMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexHull, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ConvexHull
        __init__(self, ConvexHull hull, CopyOp copyop = SHALLOW_COPY) -> ConvexHull
        __init__(self, ConvexHull hull) -> ConvexHull
        """
        this = _osg.new_ConvexHull(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ConvexHull_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ConvexHull_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ConvexHull_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ConvexHull_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ConvexHull_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.ConvexHull_accept(self, *args)

ConvexHull_swigregister = _osg.ConvexHull_swigregister
ConvexHull_swigregister(ConvexHull)

class HeightField(Shape):
    """Proxy of C++ osg::HeightField class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeightField, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeightField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> HeightField
        __init__(self, HeightField mesh, CopyOp copyop = SHALLOW_COPY) -> HeightField
        __init__(self, HeightField mesh) -> HeightField
        """
        this = _osg.new_HeightField(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.HeightField_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.HeightField_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.HeightField_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.HeightField_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.HeightField_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.HeightField_accept(self, *args)

    def allocate(self, *args):
        """allocate(self, unsigned int numColumns, unsigned int numRows)"""
        return _osg.HeightField_allocate(self, *args)

    def getNumColumns(self):
        """getNumColumns(self) -> unsigned int"""
        return _osg.HeightField_getNumColumns(self)

    def getNumRows(self):
        """getNumRows(self) -> unsigned int"""
        return _osg.HeightField_getNumRows(self)

    def setOrigin(self, *args):
        """setOrigin(self, Vec3 origin)"""
        return _osg.HeightField_setOrigin(self, *args)

    def getOrigin(self):
        """getOrigin(self) -> Vec3"""
        return _osg.HeightField_getOrigin(self)

    def setXInterval(self, *args):
        """setXInterval(self, float dx)"""
        return _osg.HeightField_setXInterval(self, *args)

    def getXInterval(self):
        """getXInterval(self) -> float"""
        return _osg.HeightField_getXInterval(self)

    def setYInterval(self, *args):
        """setYInterval(self, float dy)"""
        return _osg.HeightField_setYInterval(self, *args)

    def getYInterval(self):
        """getYInterval(self) -> float"""
        return _osg.HeightField_getYInterval(self)

    def getFloatArray(self, *args):
        """
        getFloatArray(self) -> FloatArray
        getFloatArray(self) -> FloatArray
        """
        return _osg.HeightField_getFloatArray(self, *args)

    def getHeightList(self, *args):
        """
        getHeightList(self) -> HeightList
        getHeightList(self) -> HeightList
        """
        return _osg.HeightField_getHeightList(self, *args)

    def setSkirtHeight(self, *args):
        """setSkirtHeight(self, float skirtHeight)"""
        return _osg.HeightField_setSkirtHeight(self, *args)

    def getSkirtHeight(self):
        """getSkirtHeight(self) -> float"""
        return _osg.HeightField_getSkirtHeight(self)

    def setBorderWidth(self, *args):
        """setBorderWidth(self, unsigned int borderWidth)"""
        return _osg.HeightField_setBorderWidth(self, *args)

    def getBorderWidth(self):
        """getBorderWidth(self) -> unsigned int"""
        return _osg.HeightField_getBorderWidth(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.HeightField_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.HeightField_getRotation(self)

    def computeRotationMatrix(self):
        """computeRotationMatrix(self) -> Matrix"""
        return _osg.HeightField_computeRotationMatrix(self)

    def zeroRotation(self):
        """zeroRotation(self) -> bool"""
        return _osg.HeightField_zeroRotation(self)

    def setHeight(self, *args):
        """setHeight(self, unsigned int c, unsigned int r, float value)"""
        return _osg.HeightField_setHeight(self, *args)

    def getHeight(self, *args):
        """
        getHeight(self, unsigned int c, unsigned int r) -> float
        getHeight(self, unsigned int c, unsigned int r) -> float
        """
        return _osg.HeightField_getHeight(self, *args)

    def getVertex(self, *args):
        """getVertex(self, unsigned int c, unsigned int r) -> Vec3"""
        return _osg.HeightField_getVertex(self, *args)

    def getNormal(self, *args):
        """getNormal(self, unsigned int c, unsigned int r) -> Vec3"""
        return _osg.HeightField_getNormal(self, *args)

    def getHeightDelta(self, *args):
        """getHeightDelta(self, unsigned int c, unsigned int r) -> Vec2"""
        return _osg.HeightField_getHeightDelta(self, *args)

HeightField_swigregister = _osg.HeightField_swigregister
HeightField_swigregister(HeightField)

class CompositeShape(Shape):
    """Proxy of C++ osg::CompositeShape class"""
    __swig_setmethods__ = {}
    for _s in [Shape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeShape, name, value)
    __swig_getmethods__ = {}
    for _s in [Shape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CompositeShape
        __init__(self, CompositeShape cs, CopyOp copyop = SHALLOW_COPY) -> CompositeShape
        __init__(self, CompositeShape cs) -> CompositeShape
        """
        this = _osg.new_CompositeShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.CompositeShape_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.CompositeShape_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.CompositeShape_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.CompositeShape_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.CompositeShape_className(self)

    def accept(self, *args):
        """
        accept(self, ShapeVisitor sv)
        accept(self, ConstShapeVisitor csv)
        """
        return _osg.CompositeShape_accept(self, *args)

    def setShape(self, *args):
        """setShape(self, Shape shape)"""
        return _osg.CompositeShape_setShape(self, *args)

    def getShape(self, *args):
        """
        getShape(self) -> Shape
        getShape(self) -> Shape
        """
        return _osg.CompositeShape_getShape(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.CompositeShape_getNumChildren(self)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Shape
        getChild(self, unsigned int i) -> Shape
        """
        return _osg.CompositeShape_getChild(self, *args)

    def addChild(self, *args):
        """addChild(self, Shape shape)"""
        return _osg.CompositeShape_addChild(self, *args)

    def removeChild(self, *args):
        """removeChild(self, unsigned int i)"""
        return _osg.CompositeShape_removeChild(self, *args)

    def findChildNo(self, *args):
        """findChildNo(self, Shape shape) -> unsigned int"""
        return _osg.CompositeShape_findChildNo(self, *args)

CompositeShape_swigregister = _osg.CompositeShape_swigregister
CompositeShape_swigregister(CompositeShape)

OSG_SHAPEDRAWABLE = _osg.OSG_SHAPEDRAWABLE
class TessellationHints(Object):
    """Proxy of C++ osg::TessellationHints class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TessellationHints, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TessellationHints, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TessellationHints
        __init__(self, TessellationHints tess, CopyOp copyop = SHALLOW_COPY) -> TessellationHints
        __init__(self, TessellationHints tess) -> TessellationHints
        """
        this = _osg.new_TessellationHints(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TessellationHints_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TessellationHints_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TessellationHints_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TessellationHints_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TessellationHints_className(self)

    USE_SHAPE_DEFAULTS = _osg.TessellationHints_USE_SHAPE_DEFAULTS
    USE_TARGET_NUM_FACES = _osg.TessellationHints_USE_TARGET_NUM_FACES
    def setTessellationMode(self, *args):
        """setTessellationMode(self, TessellationMode mode)"""
        return _osg.TessellationHints_setTessellationMode(self, *args)

    def getTessellationMode(self):
        """getTessellationMode(self) -> TessellationMode"""
        return _osg.TessellationHints_getTessellationMode(self)

    def setDetailRatio(self, *args):
        """setDetailRatio(self, float ratio)"""
        return _osg.TessellationHints_setDetailRatio(self, *args)

    def getDetailRatio(self):
        """getDetailRatio(self) -> float"""
        return _osg.TessellationHints_getDetailRatio(self)

    def setTargetNumFaces(self, *args):
        """setTargetNumFaces(self, unsigned int target)"""
        return _osg.TessellationHints_setTargetNumFaces(self, *args)

    def getTargetNumFaces(self):
        """getTargetNumFaces(self) -> unsigned int"""
        return _osg.TessellationHints_getTargetNumFaces(self)

    def setCreateFrontFace(self, *args):
        """setCreateFrontFace(self, bool on)"""
        return _osg.TessellationHints_setCreateFrontFace(self, *args)

    def getCreateFrontFace(self):
        """getCreateFrontFace(self) -> bool"""
        return _osg.TessellationHints_getCreateFrontFace(self)

    def setCreateBackFace(self, *args):
        """setCreateBackFace(self, bool on)"""
        return _osg.TessellationHints_setCreateBackFace(self, *args)

    def getCreateBackFace(self):
        """getCreateBackFace(self) -> bool"""
        return _osg.TessellationHints_getCreateBackFace(self)

    def setCreateNormals(self, *args):
        """setCreateNormals(self, bool on)"""
        return _osg.TessellationHints_setCreateNormals(self, *args)

    def getCreateNormals(self):
        """getCreateNormals(self) -> bool"""
        return _osg.TessellationHints_getCreateNormals(self)

    def setCreateTextureCoords(self, *args):
        """setCreateTextureCoords(self, bool on)"""
        return _osg.TessellationHints_setCreateTextureCoords(self, *args)

    def getCreateTextureCoords(self):
        """getCreateTextureCoords(self) -> bool"""
        return _osg.TessellationHints_getCreateTextureCoords(self)

    def setCreateTop(self, *args):
        """setCreateTop(self, bool on)"""
        return _osg.TessellationHints_setCreateTop(self, *args)

    def getCreateTop(self):
        """getCreateTop(self) -> bool"""
        return _osg.TessellationHints_getCreateTop(self)

    def setCreateBody(self, *args):
        """setCreateBody(self, bool on)"""
        return _osg.TessellationHints_setCreateBody(self, *args)

    def getCreateBody(self):
        """getCreateBody(self) -> bool"""
        return _osg.TessellationHints_getCreateBody(self)

    def setCreateBottom(self, *args):
        """setCreateBottom(self, bool on)"""
        return _osg.TessellationHints_setCreateBottom(self, *args)

    def getCreateBottom(self):
        """getCreateBottom(self) -> bool"""
        return _osg.TessellationHints_getCreateBottom(self)

TessellationHints_swigregister = _osg.TessellationHints_swigregister
TessellationHints_swigregister(TessellationHints)

class ShapeDrawable(Drawable):
    """Proxy of C++ osg::ShapeDrawable class"""
    __swig_setmethods__ = {}
    for _s in [Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeDrawable, name, value)
    __swig_getmethods__ = {}
    for _s in [Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeDrawable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShapeDrawable
        __init__(self, Shape shape, TessellationHints hints = None) -> ShapeDrawable
        __init__(self, Shape shape) -> ShapeDrawable
        __init__(self, ShapeDrawable pg, CopyOp copyop = SHALLOW_COPY) -> ShapeDrawable
        __init__(self, ShapeDrawable pg) -> ShapeDrawable
        """
        this = _osg.new_ShapeDrawable(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ShapeDrawable_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ShapeDrawable_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ShapeDrawable_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ShapeDrawable_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ShapeDrawable_className(self)

    def setColor(self, *args):
        """setColor(self, Vec4 color)"""
        return _osg.ShapeDrawable_setColor(self, *args)

    def getColor(self):
        """getColor(self) -> Vec4"""
        return _osg.ShapeDrawable_getColor(self)

    def setTessellationHints(self, *args):
        """setTessellationHints(self, TessellationHints hints)"""
        return _osg.ShapeDrawable_setTessellationHints(self, *args)

    def getTessellationHints(self, *args):
        """
        getTessellationHints(self) -> TessellationHints
        getTessellationHints(self) -> TessellationHints
        """
        return _osg.ShapeDrawable_getTessellationHints(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osg.ShapeDrawable_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(self,  arg0)
        accept(self,  arg0)
        accept(self, PrimitiveIndexFunctor arg0)
        accept(self,  af)
        accept(self, PrimitiveFunctor pf)
        """
        return _osg.ShapeDrawable_accept(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingBox"""
        return _osg.ShapeDrawable_computeBound(self)

ShapeDrawable_swigregister = _osg.ShapeDrawable_swigregister
ShapeDrawable_swigregister(ShapeDrawable)

class vectorNode(_object):
    """Proxy of C++ std::vector<(p.osg::Node)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorNode, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorNode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorNode___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorNode___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorNode___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorNode_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorNode"""
        return _osg.vectorNode___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorNode v)"""
        return _osg.vectorNode___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorNode___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorNode___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorNode
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorNode___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorNode v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorNode___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorNode_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorNode_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorNode_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorNode_clear(self)

    def swap(self, *args):
        """swap(self, vectorNode v)"""
        return _osg.vectorNode_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorNode_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorNode_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorNode_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorNode_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorNode_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorNode_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorNode_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorNode
        __init__(self, vectorNode arg0) -> vectorNode
        __init__(self, size_type size) -> vectorNode
        __init__(self, size_type size, value_type value) -> vectorNode
        """
        this = _osg.new_vectorNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorNode_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorNode_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorNode_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorNode_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorNode_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorNode_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorNode_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorNode_capacity(self)

    __swig_destroy__ = _osg.delete_vectorNode
    __del__ = lambda self : None;
vectorNode_swigregister = _osg.vectorNode_swigregister
vectorNode_swigregister(vectorNode)

class vectorGroup(_object):
    """Proxy of C++ std::vector<(p.osg::Group)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorGroup, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osg.vectorGroup_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osg.vectorGroup___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osg.vectorGroup___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osg.vectorGroup___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osg.vectorGroup_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorGroup"""
        return _osg.vectorGroup___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorGroup v)"""
        return _osg.vectorGroup___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osg.vectorGroup___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osg.vectorGroup___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorGroup
        __getitem__(self, difference_type i) -> value_type
        """
        return _osg.vectorGroup___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorGroup v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osg.vectorGroup___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osg.vectorGroup_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.vectorGroup_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osg.vectorGroup_size(self)

    def clear(self):
        """clear(self)"""
        return _osg.vectorGroup_clear(self)

    def swap(self, *args):
        """swap(self, vectorGroup v)"""
        return _osg.vectorGroup_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osg.vectorGroup_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osg.vectorGroup_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osg.vectorGroup_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osg.vectorGroup_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osg.vectorGroup_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osg.vectorGroup_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osg.vectorGroup_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorGroup
        __init__(self, vectorGroup arg0) -> vectorGroup
        __init__(self, size_type size) -> vectorGroup
        __init__(self, size_type size, value_type value) -> vectorGroup
        """
        this = _osg.new_vectorGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osg.vectorGroup_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osg.vectorGroup_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osg.vectorGroup_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osg.vectorGroup_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osg.vectorGroup_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osg.vectorGroup_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osg.vectorGroup_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osg.vectorGroup_capacity(self)

    __swig_destroy__ = _osg.delete_vectorGroup
    __del__ = lambda self : None;
vectorGroup_swigregister = _osg.vectorGroup_swigregister
vectorGroup_swigregister(vectorGroup)

OSG_BOUNDINGBOX = _osg.OSG_BOUNDINGBOX
OSG_NODE = _osg.OSG_NODE
class Node(Object):
    """Proxy of C++ osg::Node class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Node
        __init__(self, Node arg0, CopyOp copyop = SHALLOW_COPY) -> Node
        __init__(self, Node arg0) -> Node
        """
        this = _osg.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Node_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Node_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Node_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Node_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Node_className(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.Node_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.Node_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.Node_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.Node_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.Node_asTerrain(self, *args)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Node_accept(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.Node_ascend(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor arg0)"""
        return _osg.Node_traverse(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.Node_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.Node_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.Node_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.Node_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.Node_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.Node_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.Node_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.Node_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.Node_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.Node_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.Node_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.Node_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.Node_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.Node_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.Node_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.Node_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.Node_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.Node_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.Node_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.Node_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.Node_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.Node_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.Node_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.Node_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.Node_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.Node_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.Node_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.Node_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.Node_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.Node_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.Node_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.Node_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.Node_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.Node_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.Node_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.Node_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.Node_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.Node_getBound(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.Node_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Node_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osg.Node_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.Node_releaseGLObjects(self, arg0)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.Node_asLOD(self)

Node_swigregister = _osg.Node_swigregister
Node_swigregister(Node)

OSG_GEODE = _osg.OSG_GEODE
class Geode(Node):
    """Proxy of C++ osg::Geode class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Geode
        __init__(self, Geode arg0, CopyOp copyop = SHALLOW_COPY) -> Geode
        __init__(self, Geode arg0) -> Geode
        """
        this = _osg.new_Geode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Geode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Geode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Geode_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Geode_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Geode_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Geode_accept(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.Geode_asGeode(self, *args)

    def addDrawable(self, *args):
        """addDrawable(self, Drawable drawable) -> bool"""
        return _osg.Geode_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(self, Drawable drawable) -> bool"""
        return _osg.Geode_removeDrawable(self, *args)

    def removeDrawables(self, *args):
        """
        removeDrawables(self, unsigned int i, unsigned int numDrawablesToRemove = 1) -> bool
        removeDrawables(self, unsigned int i) -> bool
        """
        return _osg.Geode_removeDrawables(self, *args)

    def replaceDrawable(self, *args):
        """replaceDrawable(self, Drawable origDraw, Drawable newDraw) -> bool"""
        return _osg.Geode_replaceDrawable(self, *args)

    def setDrawable(self, *args):
        """setDrawable(self, unsigned int i, Drawable drawable) -> bool"""
        return _osg.Geode_setDrawable(self, *args)

    def getNumDrawables(self):
        """getNumDrawables(self) -> unsigned int"""
        return _osg.Geode_getNumDrawables(self)

    def getDrawable(self, *args):
        """
        getDrawable(self, unsigned int i) -> Drawable
        getDrawable(self, unsigned int i) -> Drawable
        """
        return _osg.Geode_getDrawable(self, *args)

    def containsDrawable(self, *args):
        """containsDrawable(self, Drawable gset) -> bool"""
        return _osg.Geode_containsDrawable(self, *args)

    def getDrawableIndex(self, *args):
        """getDrawableIndex(self, Drawable drawable) -> unsigned int"""
        return _osg.Geode_getDrawableIndex(self, *args)

    def getDrawableList(self):
        """getDrawableList(self) -> DrawableList"""
        return _osg.Geode_getDrawableList(self)

    def compileDrawables(self, *args):
        """compileDrawables(self, RenderInfo renderInfo)"""
        return _osg.Geode_compileDrawables(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(self) -> BoundingBox"""
        return _osg.Geode_getBoundingBox(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.Geode_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Geode_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Geode_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.Geode_releaseGLObjects(self, arg0)

Geode_swigregister = _osg.Geode_swigregister
Geode_swigregister(Geode)

OSG_BILLBOARD = _osg.OSG_BILLBOARD
class Billboard(Geode):
    """Proxy of C++ osg::Billboard class"""
    __swig_setmethods__ = {}
    for _s in [Geode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Billboard, name, value)
    __swig_getmethods__ = {}
    for _s in [Geode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Billboard, name)
    __repr__ = _swig_repr
    POINT_ROT_EYE = _osg.Billboard_POINT_ROT_EYE
    POINT_ROT_WORLD = _osg.Billboard_POINT_ROT_WORLD
    AXIAL_ROT = _osg.Billboard_AXIAL_ROT
    def __init__(self, *args): 
        """
        __init__(self) -> Billboard
        __init__(self, Billboard arg0, CopyOp copyop = SHALLOW_COPY) -> Billboard
        __init__(self, Billboard arg0) -> Billboard
        """
        this = _osg.new_Billboard(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Billboard_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Billboard_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Billboard_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Billboard_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Billboard_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Billboard_accept(self, *args)

    def setMode(self, *args):
        """setMode(self, Mode mode)"""
        return _osg.Billboard_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> Mode"""
        return _osg.Billboard_getMode(self)

    def setAxis(self, *args):
        """setAxis(self, Vec3 axis)"""
        return _osg.Billboard_setAxis(self, *args)

    def getAxis(self):
        """getAxis(self) -> Vec3"""
        return _osg.Billboard_getAxis(self)

    def setNormal(self, *args):
        """setNormal(self, Vec3 normal)"""
        return _osg.Billboard_setNormal(self, *args)

    def getNormal(self):
        """getNormal(self) -> Vec3"""
        return _osg.Billboard_getNormal(self)

    def setPosition(self, *args):
        """setPosition(self, unsigned int i, Vec3 pos)"""
        return _osg.Billboard_setPosition(self, *args)

    def getPosition(self, *args):
        """getPosition(self, unsigned int i) -> Vec3"""
        return _osg.Billboard_getPosition(self, *args)

    def setPositionList(self, *args):
        """setPositionList(self, PositionList pl)"""
        return _osg.Billboard_setPositionList(self, *args)

    def getPositionList(self, *args):
        """
        getPositionList(self) -> PositionList
        getPositionList(self) -> PositionList
        """
        return _osg.Billboard_getPositionList(self, *args)

    def addDrawable(self, *args):
        """
        addDrawable(self, Drawable gset) -> bool
        addDrawable(self, Drawable gset, Vec3 pos) -> bool
        """
        return _osg.Billboard_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(self, Drawable gset) -> bool"""
        return _osg.Billboard_removeDrawable(self, *args)

    def computeMatrix(self, *args):
        """computeMatrix(self, Matrix modelview, Vec3 eye_local, Vec3 pos_local) -> bool"""
        return _osg.Billboard_computeMatrix(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.Billboard_computeBound(self)

Billboard_swigregister = _osg.Billboard_swigregister
Billboard_swigregister(Billboard)

OSG_GROUP = _osg.OSG_GROUP
class Group(Node):
    """Proxy of C++ osg::Group class"""
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Group
        __init__(self, Group arg0, CopyOp copyop = SHALLOW_COPY) -> Group
        __init__(self, Group arg0) -> Group
        """
        if self.__class__ == Group:
            _self = None
        else:
            _self = self
        this = _osg.new_Group(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Group_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Group_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Group_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Group_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Group_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Group_accept(self, *args)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.Group_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.Group_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.Group_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.Group_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.Group_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.Group_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.Group_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.Group_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.Group_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.Group_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.Group_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.Group_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.Group_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Group_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.Group_releaseGLObjects(self, arg0)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.Group_computeBound(self)

    def childRemoved(self, *args):
        """childRemoved(self, unsigned int arg0, unsigned int arg1)"""
        return _osg.Group_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(self, unsigned int arg0)"""
        return _osg.Group_childInserted(self, *args)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.Group_asProxyNode(self)

    def __disown__(self):
        self.this.disown()
        _osg.disown_Group(self)
        return weakref_proxy(self)
Group_swigregister = _osg.Group_swigregister
Group_swigregister(Group)

OSG_SEQUENCE = _osg.OSG_SEQUENCE
class Sequence(Group):
    """Proxy of C++ osg::Sequence class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Sequence
        __init__(self, Sequence arg0, CopyOp copyop = SHALLOW_COPY) -> Sequence
        __init__(self, Sequence arg0) -> Sequence
        """
        this = _osg.new_Sequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Sequence_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Sequence_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Sequence_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Sequence_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Sequence_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Sequence_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.Sequence_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, double t) -> bool
        """
        return _osg.Sequence_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(self, unsigned int index, Node child) -> bool
        insertChild(self, unsigned int index, Node child, double t) -> bool
        """
        return _osg.Sequence_insertChild(self, *args)

    def removeChild(self, *args):
        """removeChild(self, Node child) -> bool"""
        return _osg.Sequence_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.Sequence_removeChildren(self, *args)

    def setValue(self, *args):
        """setValue(self, int value)"""
        return _osg.Sequence_setValue(self, *args)

    def getValue(self):
        """getValue(self) -> int"""
        return _osg.Sequence_getValue(self)

    def setTime(self, *args):
        """setTime(self, unsigned int frame, double t)"""
        return _osg.Sequence_setTime(self, *args)

    def getTime(self, *args):
        """getTime(self, unsigned int frame) -> double"""
        return _osg.Sequence_getTime(self, *args)

    def setTimeList(self, *args):
        """setTimeList(self, std::vector<(double,std::allocator<(double)>)> timeList)"""
        return _osg.Sequence_setTimeList(self, *args)

    def getTimeList(self):
        """getTimeList(self) -> std::vector<(double,std::allocator<(double)>)>"""
        return _osg.Sequence_getTimeList(self)

    def setDefaultTime(self, *args):
        """setDefaultTime(self, double t)"""
        return _osg.Sequence_setDefaultTime(self, *args)

    def getDefaultTime(self):
        """getDefaultTime(self) -> double"""
        return _osg.Sequence_getDefaultTime(self)

    def setLastFrameTime(self, *args):
        """setLastFrameTime(self, double t)"""
        return _osg.Sequence_setLastFrameTime(self, *args)

    def getLastFrameTime(self):
        """getLastFrameTime(self) -> double"""
        return _osg.Sequence_getLastFrameTime(self)

    def getNumFrames(self):
        """getNumFrames(self) -> unsigned int"""
        return _osg.Sequence_getNumFrames(self)

    LOOP = _osg.Sequence_LOOP
    SWING = _osg.Sequence_SWING
    def setLoopMode(self, *args):
        """setLoopMode(self, LoopMode mode)"""
        return _osg.Sequence_setLoopMode(self, *args)

    def getLoopMode(self):
        """getLoopMode(self) -> LoopMode"""
        return _osg.Sequence_getLoopMode(self)

    def setBegin(self, *args):
        """setBegin(self, int begin)"""
        return _osg.Sequence_setBegin(self, *args)

    def getBegin(self):
        """getBegin(self) -> int"""
        return _osg.Sequence_getBegin(self)

    def setEnd(self, *args):
        """setEnd(self, int end)"""
        return _osg.Sequence_setEnd(self, *args)

    def getEnd(self):
        """getEnd(self) -> int"""
        return _osg.Sequence_getEnd(self)

    def setInterval(self, *args):
        """setInterval(self, LoopMode mode, int begin, int end)"""
        return _osg.Sequence_setInterval(self, *args)

    def getInterval(self, *args):
        """getInterval(self, LoopMode mode, int begin, int end)"""
        return _osg.Sequence_getInterval(self, *args)

    def setSpeed(self, *args):
        """setSpeed(self, float speed)"""
        return _osg.Sequence_setSpeed(self, *args)

    def getSpeed(self):
        """getSpeed(self) -> float"""
        return _osg.Sequence_getSpeed(self)

    def setNumRepeats(self, *args):
        """setNumRepeats(self, int nreps)"""
        return _osg.Sequence_setNumRepeats(self, *args)

    def getNumRepeats(self):
        """getNumRepeats(self) -> int"""
        return _osg.Sequence_getNumRepeats(self)

    def setDuration(self, *args):
        """
        setDuration(self, float speed, int nreps = -1)
        setDuration(self, float speed)
        """
        return _osg.Sequence_setDuration(self, *args)

    def getDuration(self, *args):
        """getDuration(self, float speed, int nreps)"""
        return _osg.Sequence_getDuration(self, *args)

    START = _osg.Sequence_START
    STOP = _osg.Sequence_STOP
    PAUSE = _osg.Sequence_PAUSE
    RESUME = _osg.Sequence_RESUME
    def setMode(self, *args):
        """setMode(self, SequenceMode mode)"""
        return _osg.Sequence_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> SequenceMode"""
        return _osg.Sequence_getMode(self)

    def setSync(self, *args):
        """setSync(self, bool sync)"""
        return _osg.Sequence_setSync(self, *args)

    def getSync(self):
        """getSync(self) -> bool"""
        return _osg.Sequence_getSync(self)

    def setClearOnStop(self, *args):
        """setClearOnStop(self, bool clearOnStop)"""
        return _osg.Sequence_setClearOnStop(self, *args)

    def getClearOnStop(self):
        """getClearOnStop(self) -> bool"""
        return _osg.Sequence_getClearOnStop(self)

Sequence_swigregister = _osg.Sequence_swigregister
Sequence_swigregister(Sequence)

OSG_SWITCH = _osg.OSG_SWITCH
class Switch(Group):
    """Proxy of C++ osg::Switch class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Switch
        __init__(self, Switch arg0, CopyOp copyop = SHALLOW_COPY) -> Switch
        __init__(self, Switch arg0) -> Switch
        """
        this = _osg.new_Switch(*args)
        try: self.this.append(this)
        except: self.this = this
    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.Switch_asSwitch(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Switch_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Switch_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Switch_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Switch_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Switch_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Switch_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.Switch_traverse(self, *args)

    def setNewChildDefaultValue(self, *args):
        """setNewChildDefaultValue(self, bool value)"""
        return _osg.Switch_setNewChildDefaultValue(self, *args)

    def getNewChildDefaultValue(self):
        """getNewChildDefaultValue(self) -> bool"""
        return _osg.Switch_getNewChildDefaultValue(self)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, bool value) -> bool
        """
        return _osg.Switch_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(self, unsigned int index, Node child) -> bool
        insertChild(self, unsigned int index, Node child, bool value) -> bool
        """
        return _osg.Switch_insertChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.Switch_removeChildren(self, *args)

    def setValue(self, *args):
        """setValue(self, unsigned int pos, bool value)"""
        return _osg.Switch_setValue(self, *args)

    def getValue(self, *args):
        """getValue(self, unsigned int pos) -> bool"""
        return _osg.Switch_getValue(self, *args)

    def setChildValue(self, *args):
        """setChildValue(self, Node child, bool value)"""
        return _osg.Switch_setChildValue(self, *args)

    def getChildValue(self, *args):
        """getChildValue(self, Node child) -> bool"""
        return _osg.Switch_getChildValue(self, *args)

    def setAllChildrenOff(self):
        """setAllChildrenOff(self) -> bool"""
        return _osg.Switch_setAllChildrenOff(self)

    def setAllChildrenOn(self):
        """setAllChildrenOn(self) -> bool"""
        return _osg.Switch_setAllChildrenOn(self)

    def setSingleChildOn(self, *args):
        """setSingleChildOn(self, unsigned int pos) -> bool"""
        return _osg.Switch_setSingleChildOn(self, *args)

    def setValueList(self, *args):
        """setValueList(self, ValueList values)"""
        return _osg.Switch_setValueList(self, *args)

    def getValueList(self):
        """getValueList(self) -> ValueList"""
        return _osg.Switch_getValueList(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.Switch_computeBound(self)

Switch_swigregister = _osg.Switch_swigregister
Switch_swigregister(Switch)

OSG_LOD = _osg.OSG_LOD
class LOD(Group):
    """Proxy of C++ osg::LOD class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LOD, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LOD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LOD
        __init__(self, LOD arg0, CopyOp copyop = SHALLOW_COPY) -> LOD
        __init__(self, LOD arg0) -> LOD
        """
        this = _osg.new_LOD(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LOD_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LOD_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LOD_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.LOD_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LOD_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.LOD_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.LOD_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, float min, float max) -> bool
        """
        return _osg.LOD_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChildren(self, unsigned int pos) -> bool
        """
        return _osg.LOD_removeChildren(self, *args)

    USE_BOUNDING_SPHERE_CENTER = _osg.LOD_USE_BOUNDING_SPHERE_CENTER
    USER_DEFINED_CENTER = _osg.LOD_USER_DEFINED_CENTER
    def setCenterMode(self, *args):
        """setCenterMode(self, CenterMode mode)"""
        return _osg.LOD_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(self) -> CenterMode"""
        return _osg.LOD_getCenterMode(self)

    DISTANCE_FROM_EYE_POINT = _osg.LOD_DISTANCE_FROM_EYE_POINT
    PIXEL_SIZE_ON_SCREEN = _osg.LOD_PIXEL_SIZE_ON_SCREEN
    def setRangeMode(self, *args):
        """setRangeMode(self, RangeMode mode)"""
        return _osg.LOD_setRangeMode(self, *args)

    def getRangeMode(self):
        """getRangeMode(self) -> RangeMode"""
        return _osg.LOD_getRangeMode(self)

    def setRange(self, *args):
        """setRange(self, unsigned int childNo, float min, float max)"""
        return _osg.LOD_setRange(self, *args)

    def getMinRange(self, *args):
        """getMinRange(self, unsigned int childNo) -> float"""
        return _osg.LOD_getMinRange(self, *args)

    def getMaxRange(self, *args):
        """getMaxRange(self, unsigned int childNo) -> float"""
        return _osg.LOD_getMaxRange(self, *args)

    def getNumRanges(self):
        """getNumRanges(self) -> unsigned int"""
        return _osg.LOD_getNumRanges(self)

    def setRangeList(self, *args):
        """setRangeList(self, RangeList rangeList)"""
        return _osg.LOD_setRangeList(self, *args)

    def getRangeList(self):
        """getRangeList(self) -> RangeList"""
        return _osg.LOD_getRangeList(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.LOD_computeBound(self)

    def getCenter(self):
        """getCenter(self) -> Vec3f"""
        return _osg.LOD_getCenter(self)

    def setCenter(self, *args):
        """setCenter(self, Vec3f center)"""
        return _osg.LOD_setCenter(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.LOD_getRadius(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.LOD_setRadius(self, *args)

    def asPagedLOD(self):
        """asPagedLOD(self) -> PagedLOD"""
        return _osg.LOD_asPagedLOD(self)

LOD_swigregister = _osg.LOD_swigregister
LOD_swigregister(LOD)

OSG_PagedLOD = _osg.OSG_PagedLOD
class PagedLOD(LOD):
    """Proxy of C++ osg::PagedLOD class"""
    __swig_setmethods__ = {}
    for _s in [LOD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagedLOD, name, value)
    __swig_getmethods__ = {}
    for _s in [LOD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PagedLOD, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PagedLOD
        __init__(self, PagedLOD arg0, CopyOp copyop = SHALLOW_COPY) -> PagedLOD
        __init__(self, PagedLOD arg0) -> PagedLOD
        """
        this = _osg.new_PagedLOD(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PagedLOD_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PagedLOD_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PagedLOD_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.PagedLOD_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PagedLOD_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.PagedLOD_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.PagedLOD_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, float min, float max) -> bool
        addChild(self, Node child, float min, float max, string filename, 
            float priorityOffset = 0.0, float priorityScale = 1.0) -> bool
        addChild(self, Node child, float min, float max, string filename, 
            float priorityOffset = 0.0) -> bool
        addChild(self, Node child, float min, float max, string filename) -> bool
        """
        return _osg.PagedLOD_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChildren(self, unsigned int pos) -> bool
        """
        return _osg.PagedLOD_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(self, Referenced options)"""
        return _osg.PagedLOD_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(self) -> Referenced
        getDatabaseOptions(self) -> Referenced
        """
        return _osg.PagedLOD_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(self, string path)"""
        return _osg.PagedLOD_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(self) -> string"""
        return _osg.PagedLOD_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(self, unsigned int childNo, string filename)"""
        return _osg.PagedLOD_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(self, unsigned int childNo) -> string"""
        return _osg.PagedLOD_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(self) -> unsigned int"""
        return _osg.PagedLOD_getNumFileNames(self)

    def setPriorityOffset(self, *args):
        """setPriorityOffset(self, unsigned int childNo, float priorityOffset)"""
        return _osg.PagedLOD_setPriorityOffset(self, *args)

    def getPriorityOffset(self, *args):
        """getPriorityOffset(self, unsigned int childNo) -> float"""
        return _osg.PagedLOD_getPriorityOffset(self, *args)

    def getNumPriorityOffsets(self):
        """getNumPriorityOffsets(self) -> unsigned int"""
        return _osg.PagedLOD_getNumPriorityOffsets(self)

    def setPriorityScale(self, *args):
        """setPriorityScale(self, unsigned int childNo, float priorityScale)"""
        return _osg.PagedLOD_setPriorityScale(self, *args)

    def getPriorityScale(self, *args):
        """getPriorityScale(self, unsigned int childNo) -> float"""
        return _osg.PagedLOD_getPriorityScale(self, *args)

    def getNumPriorityScales(self):
        """getNumPriorityScales(self) -> unsigned int"""
        return _osg.PagedLOD_getNumPriorityScales(self)

    def setTimeStamp(self, *args):
        """setTimeStamp(self, unsigned int childNo, double timeStamp)"""
        return _osg.PagedLOD_setTimeStamp(self, *args)

    def getTimeStamp(self, *args):
        """getTimeStamp(self, unsigned int childNo) -> double"""
        return _osg.PagedLOD_getTimeStamp(self, *args)

    def getNumTimeStamps(self):
        """getNumTimeStamps(self) -> unsigned int"""
        return _osg.PagedLOD_getNumTimeStamps(self)

    def setFrameNumber(self, *args):
        """setFrameNumber(self, unsigned int childNo, unsigned int frameNumber)"""
        return _osg.PagedLOD_setFrameNumber(self, *args)

    def getFrameNumber(self, *args):
        """getFrameNumber(self, unsigned int childNo) -> unsigned int"""
        return _osg.PagedLOD_getFrameNumber(self, *args)

    def getNumFrameNumbers(self):
        """getNumFrameNumbers(self) -> unsigned int"""
        return _osg.PagedLOD_getNumFrameNumbers(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        """
        return _osg.PagedLOD_getDatabaseRequest(self, *args)

    def setFrameNumberOfLastTraversal(self, *args):
        """setFrameNumberOfLastTraversal(self, unsigned int frameNumber)"""
        return _osg.PagedLOD_setFrameNumberOfLastTraversal(self, *args)

    def getFrameNumberOfLastTraversal(self):
        """getFrameNumberOfLastTraversal(self) -> unsigned int"""
        return _osg.PagedLOD_getFrameNumberOfLastTraversal(self)

    def setNumChildrenThatCannotBeExpired(self, *args):
        """setNumChildrenThatCannotBeExpired(self, unsigned int num)"""
        return _osg.PagedLOD_setNumChildrenThatCannotBeExpired(self, *args)

    def getNumChildrenThatCannotBeExpired(self):
        """getNumChildrenThatCannotBeExpired(self) -> unsigned int"""
        return _osg.PagedLOD_getNumChildrenThatCannotBeExpired(self)

    def setDisableExternalChildrenPaging(self, *args):
        """setDisableExternalChildrenPaging(self, bool flag)"""
        return _osg.PagedLOD_setDisableExternalChildrenPaging(self, *args)

    def getDisableExternalChildrenPaging(self):
        """getDisableExternalChildrenPaging(self) -> bool"""
        return _osg.PagedLOD_getDisableExternalChildrenPaging(self)

    def removeExpiredChildren(self, *args):
        """removeExpiredChildren(self, double expiryTime, unsigned int expiryFrame, NodeList removedChildren) -> bool"""
        return _osg.PagedLOD_removeExpiredChildren(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3f"""
        return _osg.PagedLOD_getCenter(self)

    def setCenter(self, *args):
        """setCenter(self, Vec3f center)"""
        return _osg.PagedLOD_setCenter(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.PagedLOD_getRadius(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.PagedLOD_setRadius(self, *args)

PagedLOD_swigregister = _osg.PagedLOD_swigregister
PagedLOD_swigregister(PagedLOD)

OSG_ProxyNode = _osg.OSG_ProxyNode
class ProxyNode(Group):
    """Proxy of C++ osg::ProxyNode class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ProxyNode
        __init__(self, ProxyNode arg0, CopyOp copyop = SHALLOW_COPY) -> ProxyNode
        __init__(self, ProxyNode arg0) -> ProxyNode
        """
        this = _osg.new_ProxyNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ProxyNode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ProxyNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ProxyNode_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.ProxyNode_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ProxyNode_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.ProxyNode_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.ProxyNode_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, string filename) -> bool
        """
        return _osg.ProxyNode_addChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.ProxyNode_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(self, Referenced options)"""
        return _osg.ProxyNode_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(self) -> Referenced
        getDatabaseOptions(self) -> Referenced
        """
        return _osg.ProxyNode_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(self, string path)"""
        return _osg.ProxyNode_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(self) -> string"""
        return _osg.ProxyNode_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(self, unsigned int childNo, string filename)"""
        return _osg.ProxyNode_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(self, unsigned int childNo) -> string"""
        return _osg.ProxyNode_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(self) -> unsigned int"""
        return _osg.ProxyNode_getNumFileNames(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        """
        return _osg.ProxyNode_getDatabaseRequest(self, *args)

    USE_BOUNDING_SPHERE_CENTER = _osg.ProxyNode_USE_BOUNDING_SPHERE_CENTER
    USER_DEFINED_CENTER = _osg.ProxyNode_USER_DEFINED_CENTER
    def setCenterMode(self, *args):
        """setCenterMode(self, CenterMode mode)"""
        return _osg.ProxyNode_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(self) -> CenterMode"""
        return _osg.ProxyNode_getCenterMode(self)

    LOAD_IMMEDIATELY = _osg.ProxyNode_LOAD_IMMEDIATELY
    DEFER_LOADING_TO_DATABASE_PAGER = _osg.ProxyNode_DEFER_LOADING_TO_DATABASE_PAGER
    NO_AUTOMATIC_LOADING = _osg.ProxyNode_NO_AUTOMATIC_LOADING
    def setLoadingExternalReferenceMode(self, *args):
        """setLoadingExternalReferenceMode(self, LoadingExternalReferenceMode mode)"""
        return _osg.ProxyNode_setLoadingExternalReferenceMode(self, *args)

    def getLoadingExternalReferenceMode(self):
        """getLoadingExternalReferenceMode(self) -> LoadingExternalReferenceMode"""
        return _osg.ProxyNode_getLoadingExternalReferenceMode(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.ProxyNode_computeBound(self)

    def getCenter(self):
        """getCenter(self) -> Vec3f"""
        return _osg.ProxyNode_getCenter(self)

    def setCenter(self, *args):
        """setCenter(self, Vec3f center)"""
        return _osg.ProxyNode_setCenter(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.ProxyNode_getRadius(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.ProxyNode_setRadius(self, *args)

ProxyNode_swigregister = _osg.ProxyNode_swigregister
ProxyNode_swigregister(ProxyNode)

OSG_NODEVISITOR = _osg.OSG_NODEVISITOR
class NodeVisitor(Referenced):
    """Proxy of C++ osg::NodeVisitor class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVisitor, name)
    __repr__ = _swig_repr
    TRAVERSE_NONE = _osg.NodeVisitor_TRAVERSE_NONE
    TRAVERSE_PARENTS = _osg.NodeVisitor_TRAVERSE_PARENTS
    TRAVERSE_ALL_CHILDREN = _osg.NodeVisitor_TRAVERSE_ALL_CHILDREN
    TRAVERSE_ACTIVE_CHILDREN = _osg.NodeVisitor_TRAVERSE_ACTIVE_CHILDREN
    NODE_VISITOR = _osg.NodeVisitor_NODE_VISITOR
    UPDATE_VISITOR = _osg.NodeVisitor_UPDATE_VISITOR
    EVENT_VISITOR = _osg.NodeVisitor_EVENT_VISITOR
    COLLECT_OCCLUDER_VISITOR = _osg.NodeVisitor_COLLECT_OCCLUDER_VISITOR
    CULL_VISITOR = _osg.NodeVisitor_CULL_VISITOR
    def __init__(self, *args): 
        """
        __init__(self, TraversalMode tm = TRAVERSE_NONE) -> NodeVisitor
        __init__(self) -> NodeVisitor
        __init__(self, VisitorType type, TraversalMode tm = TRAVERSE_NONE) -> NodeVisitor
        __init__(self, VisitorType type) -> NodeVisitor
        """
        if self.__class__ == NodeVisitor:
            _self = None
        else:
            _self = self
        this = _osg.new_NodeVisitor(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_NodeVisitor
    __del__ = lambda self : None;
    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.NodeVisitor_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.NodeVisitor_className(self)

    def reset(self):
        """reset(self)"""
        return _osg.NodeVisitor_reset(self)

    def setVisitorType(self, *args):
        """setVisitorType(self, VisitorType type)"""
        return _osg.NodeVisitor_setVisitorType(self, *args)

    def getVisitorType(self):
        """getVisitorType(self) -> VisitorType"""
        return _osg.NodeVisitor_getVisitorType(self)

    def setTraversalNumber(self, *args):
        """setTraversalNumber(self, unsigned int fn)"""
        return _osg.NodeVisitor_setTraversalNumber(self, *args)

    def getTraversalNumber(self):
        """getTraversalNumber(self) -> unsigned int"""
        return _osg.NodeVisitor_getTraversalNumber(self)

    def setFrameStamp(self, *args):
        """setFrameStamp(self, FrameStamp fs)"""
        return _osg.NodeVisitor_setFrameStamp(self, *args)

    def getFrameStamp(self):
        """getFrameStamp(self) -> FrameStamp"""
        return _osg.NodeVisitor_getFrameStamp(self)

    def setTraversalMask(self, *args):
        """setTraversalMask(self, NodeMask mask)"""
        return _osg.NodeVisitor_setTraversalMask(self, *args)

    def getTraversalMask(self):
        """getTraversalMask(self) -> NodeMask"""
        return _osg.NodeVisitor_getTraversalMask(self)

    def setNodeMaskOverride(self, *args):
        """setNodeMaskOverride(self, NodeMask mask)"""
        return _osg.NodeVisitor_setNodeMaskOverride(self, *args)

    def getNodeMaskOverride(self):
        """getNodeMaskOverride(self) -> NodeMask"""
        return _osg.NodeVisitor_getNodeMaskOverride(self)

    def validNodeMask(self, *args):
        """validNodeMask(self, Node node) -> bool"""
        return _osg.NodeVisitor_validNodeMask(self, *args)

    def setTraversalMode(self, *args):
        """setTraversalMode(self, TraversalMode mode)"""
        return _osg.NodeVisitor_setTraversalMode(self, *args)

    def getTraversalMode(self):
        """getTraversalMode(self) -> TraversalMode"""
        return _osg.NodeVisitor_getTraversalMode(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.NodeVisitor_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.NodeVisitor_getUserData(self, *args)

    def traverse(self, *args):
        """traverse(self, Node node)"""
        return _osg.NodeVisitor_traverse(self, *args)

    def pushOntoNodePath(self, *args):
        """pushOntoNodePath(self, Node node)"""
        return _osg.NodeVisitor_pushOntoNodePath(self, *args)

    def popFromNodePath(self):
        """popFromNodePath(self)"""
        return _osg.NodeVisitor_popFromNodePath(self)

    def getNodePath(self, *args):
        """
        getNodePath(self) -> NodePath
        getNodePath(self) -> NodePath
        """
        return _osg.NodeVisitor_getNodePath(self, *args)

    def getEyePoint(self):
        """getEyePoint(self) -> Vec3"""
        return _osg.NodeVisitor_getEyePoint(self)

    def getViewPoint(self):
        """getViewPoint(self) -> Vec3"""
        return _osg.NodeVisitor_getViewPoint(self)

    def getDistanceToEyePoint(self, *args):
        """getDistanceToEyePoint(self, Vec3 arg0, bool arg1) -> float"""
        return _osg.NodeVisitor_getDistanceToEyePoint(self, *args)

    def getDistanceFromEyePoint(self, *args):
        """getDistanceFromEyePoint(self, Vec3 arg0, bool arg1) -> float"""
        return _osg.NodeVisitor_getDistanceFromEyePoint(self, *args)

    def getDistanceToViewPoint(self, *args):
        """getDistanceToViewPoint(self, Vec3 arg0, bool arg1) -> float"""
        return _osg.NodeVisitor_getDistanceToViewPoint(self, *args)

    def apply_Node(self, *args):
        """apply_Node(self, Node node)"""
        return _osg.NodeVisitor_apply_Node(self, *args)

    def apply_Geode(self, *args):
        """apply_Geode(self, Geode node)"""
        return _osg.NodeVisitor_apply_Geode(self, *args)

    def apply_Billboard(self, *args):
        """apply_Billboard(self, Billboard node)"""
        return _osg.NodeVisitor_apply_Billboard(self, *args)

    def apply_Group(self, *args):
        """apply_Group(self, Group node)"""
        return _osg.NodeVisitor_apply_Group(self, *args)

    def apply_ProxyNode(self, *args):
        """apply_ProxyNode(self, ProxyNode node)"""
        return _osg.NodeVisitor_apply_ProxyNode(self, *args)

    def apply_Projection(self, *args):
        """apply_Projection(self, Projection node)"""
        return _osg.NodeVisitor_apply_Projection(self, *args)

    def apply_CoordinateSystemNode(self, *args):
        """apply_CoordinateSystemNode(self, CoordinateSystemNode node)"""
        return _osg.NodeVisitor_apply_CoordinateSystemNode(self, *args)

    def apply_ClipNode(self, *args):
        """apply_ClipNode(self, ClipNode node)"""
        return _osg.NodeVisitor_apply_ClipNode(self, *args)

    def apply_TexGenNode(self, *args):
        """apply_TexGenNode(self, TexGenNode node)"""
        return _osg.NodeVisitor_apply_TexGenNode(self, *args)

    def apply_LightSource(self, *args):
        """apply_LightSource(self, LightSource node)"""
        return _osg.NodeVisitor_apply_LightSource(self, *args)

    def apply_Transform(self, *args):
        """apply_Transform(self, Transform node)"""
        return _osg.NodeVisitor_apply_Transform(self, *args)

    def apply_Camera(self, *args):
        """apply_Camera(self, Camera node)"""
        return _osg.NodeVisitor_apply_Camera(self, *args)

    def apply_CameraView(self, *args):
        """apply_CameraView(self, CameraView node)"""
        return _osg.NodeVisitor_apply_CameraView(self, *args)

    def apply_MatrixTransform(self, *args):
        """apply_MatrixTransform(self, MatrixTransform node)"""
        return _osg.NodeVisitor_apply_MatrixTransform(self, *args)

    def apply_PositionAttitudeTransform(self, *args):
        """apply_PositionAttitudeTransform(self, PositionAttitudeTransform node)"""
        return _osg.NodeVisitor_apply_PositionAttitudeTransform(self, *args)

    def apply_Switch(self, *args):
        """apply_Switch(self, Switch node)"""
        return _osg.NodeVisitor_apply_Switch(self, *args)

    def apply_Sequence(self, *args):
        """apply_Sequence(self, Sequence node)"""
        return _osg.NodeVisitor_apply_Sequence(self, *args)

    def apply_LOD(self, *args):
        """apply_LOD(self, LOD node)"""
        return _osg.NodeVisitor_apply_LOD(self, *args)

    def apply_PagedLOD(self, *args):
        """apply_PagedLOD(self, PagedLOD node)"""
        return _osg.NodeVisitor_apply_PagedLOD(self, *args)

    def apply_ClearNode(self, *args):
        """apply_ClearNode(self, ClearNode node)"""
        return _osg.NodeVisitor_apply_ClearNode(self, *args)

    def apply_OccluderNode(self, *args):
        """apply_OccluderNode(self, OccluderNode node)"""
        return _osg.NodeVisitor_apply_OccluderNode(self, *args)

    def apply_OcclusionQueryNode(self, *args):
        """apply_OcclusionQueryNode(self, OcclusionQueryNode node)"""
        return _osg.NodeVisitor_apply_OcclusionQueryNode(self, *args)

    def __disown__(self):
        self.this.disown()
        _osg.disown_NodeVisitor(self)
        return weakref_proxy(self)
NodeVisitor_swigregister = _osg.NodeVisitor_swigregister
NodeVisitor_swigregister(NodeVisitor)
UNINITIALIZED_FRAME_NUMBER = cvar.UNINITIALIZED_FRAME_NUMBER

class NodeAcceptOp(_object):
    """Proxy of C++ osg::NodeAcceptOp class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeAcceptOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeAcceptOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, NodeVisitor nv) -> NodeAcceptOp
        __init__(self, NodeAcceptOp naop) -> NodeAcceptOp
        """
        this = _osg.new_NodeAcceptOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args):
        """
        __call__(self, Node node)
        __call__(self, NodeRef node)
        """
        return _osg.NodeAcceptOp___call__(self, *args)

    __swig_destroy__ = _osg.delete_NodeAcceptOp
    __del__ = lambda self : None;
NodeAcceptOp_swigregister = _osg.NodeAcceptOp_swigregister
NodeAcceptOp_swigregister(NodeAcceptOp)

OSG_PROJECTION = _osg.OSG_PROJECTION
class Projection(Group):
    """Proxy of C++ osg::Projection class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Projection, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Projection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Projection
        __init__(self, Projection arg0, CopyOp copyop = SHALLOW_COPY) -> Projection
        __init__(self, Projection arg0) -> Projection
        __init__(self, Matrix matix) -> Projection
        """
        this = _osg.new_Projection(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Projection_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Projection_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Projection_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Projection_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Projection_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Projection_accept(self, *args)

    def setMatrix(self, *args):
        """setMatrix(self, Matrix mat)"""
        return _osg.Projection_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(self) -> Matrix"""
        return _osg.Projection_getMatrix(self)

    def preMult(self, *args):
        """preMult(self, Matrix mat)"""
        return _osg.Projection_preMult(self, *args)

    def postMult(self, *args):
        """postMult(self, Matrix mat)"""
        return _osg.Projection_postMult(self, *args)

Projection_swigregister = _osg.Projection_swigregister
Projection_swigregister(Projection)

OSG_TRANSFORM = _osg.OSG_TRANSFORM
class Transform(Group):
    """Proxy of C++ osg::Transform class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Transform
        __init__(self, Transform arg0, CopyOp copyop = SHALLOW_COPY) -> Transform
        __init__(self, Transform arg0) -> Transform
        """
        if self.__class__ == Transform:
            _self = None
        else:
            _self = self
        this = _osg.new_Transform(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Transform_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Transform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Transform_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Transform_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Transform_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Transform_accept(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.Transform_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.Transform_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.Transform_asPositionAttitudeTransform(self, *args)

    RELATIVE_RF = _osg.Transform_RELATIVE_RF
    ABSOLUTE_RF = _osg.Transform_ABSOLUTE_RF
    ABSOLUTE_RF_INHERIT_VIEWPOINT = _osg.Transform_ABSOLUTE_RF_INHERIT_VIEWPOINT
    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.Transform_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.Transform_getReferenceFrame(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.Transform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.Transform_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.Transform_computeBound(self)

    def __disown__(self):
        self.this.disown()
        _osg.disown_Transform(self)
        return weakref_proxy(self)
    def childRemoved(self, *args):
        """childRemoved(self, unsigned int arg0, unsigned int arg1)"""
        return _osg.Transform_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(self, unsigned int arg0)"""
        return _osg.Transform_childInserted(self, *args)

Transform_swigregister = _osg.Transform_swigregister
Transform_swigregister(Transform)

def computeLocalToWorld(*args):
  """
    computeLocalToWorld(NodePath nodePath, bool ignoreCameras = True) -> Matrix
    computeLocalToWorld(NodePath nodePath) -> Matrix
    """
  return _osg.computeLocalToWorld(*args)

def computeWorldToLocal(*args):
  """
    computeWorldToLocal(NodePath nodePath, bool ignoreCameras = True) -> Matrix
    computeWorldToLocal(NodePath nodePath) -> Matrix
    """
  return _osg.computeWorldToLocal(*args)

def computeLocalToEye(*args):
  """
    computeLocalToEye(Matrix modelview, NodePath nodePath, bool ignoreCameras = True) -> Matrix
    computeLocalToEye(Matrix modelview, NodePath nodePath) -> Matrix
    """
  return _osg.computeLocalToEye(*args)

def computeEyeToLocal(*args):
  """
    computeEyeToLocal(Matrix modelview, NodePath nodePath, bool ignoreCameras = True) -> Matrix
    computeEyeToLocal(Matrix modelview, NodePath nodePath) -> Matrix
    """
  return _osg.computeEyeToLocal(*args)

OSG_POSITIONATTITUDETRANSFORM = _osg.OSG_POSITIONATTITUDETRANSFORM
class PositionAttitudeTransform(Transform):
    """Proxy of C++ osg::PositionAttitudeTransform class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionAttitudeTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionAttitudeTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PositionAttitudeTransform
        __init__(self, PositionAttitudeTransform pat, CopyOp copyop = SHALLOW_COPY) -> PositionAttitudeTransform
        __init__(self, PositionAttitudeTransform pat) -> PositionAttitudeTransform
        """
        if self.__class__ == PositionAttitudeTransform:
            _self = None
        else:
            _self = self
        this = _osg.new_PositionAttitudeTransform(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PositionAttitudeTransform_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PositionAttitudeTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PositionAttitudeTransform_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.PositionAttitudeTransform_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PositionAttitudeTransform_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.PositionAttitudeTransform_accept(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.PositionAttitudeTransform_asPositionAttitudeTransform(self, *args)

    def setPosition(self, *args):
        """setPosition(self, Vec3d pos)"""
        return _osg.PositionAttitudeTransform_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec3d"""
        return _osg.PositionAttitudeTransform_getPosition(self)

    def setAttitude(self, *args):
        """setAttitude(self, Quat quat)"""
        return _osg.PositionAttitudeTransform_setAttitude(self, *args)

    def getAttitude(self):
        """getAttitude(self) -> Quat"""
        return _osg.PositionAttitudeTransform_getAttitude(self)

    def setScale(self, *args):
        """setScale(self, Vec3d scale)"""
        return _osg.PositionAttitudeTransform_setScale(self, *args)

    def getScale(self):
        """getScale(self) -> Vec3d"""
        return _osg.PositionAttitudeTransform_getScale(self)

    def setPivotPoint(self, *args):
        """setPivotPoint(self, Vec3d pivot)"""
        return _osg.PositionAttitudeTransform_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(self) -> Vec3d"""
        return _osg.PositionAttitudeTransform_getPivotPoint(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.PositionAttitudeTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.PositionAttitudeTransform_computeWorldToLocalMatrix(self, *args)

    def __disown__(self):
        self.this.disown()
        _osg.disown_PositionAttitudeTransform(self)
        return weakref_proxy(self)
    def childRemoved(self, *args):
        """childRemoved(self, unsigned int arg0, unsigned int arg1)"""
        return _osg.PositionAttitudeTransform_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(self, unsigned int arg0)"""
        return _osg.PositionAttitudeTransform_childInserted(self, *args)

PositionAttitudeTransform_swigregister = _osg.PositionAttitudeTransform_swigregister
PositionAttitudeTransform_swigregister(PositionAttitudeTransform)

OSG_TexGenNode = _osg.OSG_TexGenNode
class TexGenNode(Group):
    """Proxy of C++ osg::TexGenNode class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexGenNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexGenNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TexGenNode
        __init__(self, TexGen texgen) -> TexGenNode
        __init__(self, TexGenNode tgb, CopyOp copyop = SHALLOW_COPY) -> TexGenNode
        __init__(self, TexGenNode tgb) -> TexGenNode
        """
        this = _osg.new_TexGenNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TexGenNode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TexGenNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TexGenNode_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.TexGenNode_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TexGenNode_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.TexGenNode_accept(self, *args)

    RELATIVE_RF = _osg.TexGenNode_RELATIVE_RF
    ABSOLUTE_RF = _osg.TexGenNode_ABSOLUTE_RF
    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.TexGenNode_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.TexGenNode_getReferenceFrame(self)

    def setTextureUnit(self, *args):
        """setTextureUnit(self, unsigned int textureUnit)"""
        return _osg.TexGenNode_setTextureUnit(self, *args)

    def getTextureUnit(self):
        """getTextureUnit(self) -> unsigned int"""
        return _osg.TexGenNode_getTextureUnit(self)

    def setTexGen(self, *args):
        """setTexGen(self, TexGen texgen)"""
        return _osg.TexGenNode_setTexGen(self, *args)

    def getTexGen(self, *args):
        """
        getTexGen(self) -> TexGen
        getTexGen(self) -> TexGen
        """
        return _osg.TexGenNode_getTexGen(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.TexGenNode_setThreadSafeRefUnref(self, *args)

TexGenNode_swigregister = _osg.TexGenNode_swigregister
TexGenNode_swigregister(TexGenNode)

OSG_CLIPNODE = _osg.OSG_CLIPNODE
class ClipNode(Group):
    """Proxy of C++ osg::ClipNode class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClipNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClipNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ClipNode
        __init__(self, ClipNode es, CopyOp copyop = SHALLOW_COPY) -> ClipNode
        __init__(self, ClipNode es) -> ClipNode
        """
        this = _osg.new_ClipNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ClipNode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ClipNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ClipNode_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.ClipNode_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ClipNode_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.ClipNode_accept(self, *args)

    RELATIVE_RF = _osg.ClipNode_RELATIVE_RF
    ABSOLUTE_RF = _osg.ClipNode_ABSOLUTE_RF
    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.ClipNode_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.ClipNode_getReferenceFrame(self)

    def createClipBox(self, *args):
        """
        createClipBox(self, BoundingBox bb, unsigned int clipPlaneNumberBase = 0)
        createClipBox(self, BoundingBox bb)
        """
        return _osg.ClipNode_createClipBox(self, *args)

    def addClipPlane(self, *args):
        """addClipPlane(self, ClipPlane clipplane) -> bool"""
        return _osg.ClipNode_addClipPlane(self, *args)

    def removeClipPlane(self, *args):
        """
        removeClipPlane(self, ClipPlane clipplane) -> bool
        removeClipPlane(self, unsigned int pos) -> bool
        """
        return _osg.ClipNode_removeClipPlane(self, *args)

    def getNumClipPlanes(self):
        """getNumClipPlanes(self) -> unsigned int"""
        return _osg.ClipNode_getNumClipPlanes(self)

    def getClipPlane(self, *args):
        """
        getClipPlane(self, unsigned int pos) -> ClipPlane
        getClipPlane(self, unsigned int pos) -> ClipPlane
        """
        return _osg.ClipNode_getClipPlane(self, *args)

    def setClipPlaneList(self, *args):
        """setClipPlaneList(self, ClipPlaneList cpl)"""
        return _osg.ClipNode_setClipPlaneList(self, *args)

    def getClipPlaneList(self, *args):
        """
        getClipPlaneList(self) -> ClipPlaneList
        getClipPlaneList(self) -> ClipPlaneList
        """
        return _osg.ClipNode_getClipPlaneList(self, *args)

    def setStateSetModes(self, *args):
        """setStateSetModes(self, StateSet arg0, GLModeValue arg1)"""
        return _osg.ClipNode_setStateSetModes(self, *args)

    def setLocalStateSetModes(self, *args):
        """
        setLocalStateSetModes(self, GLModeValue arg0 = ON)
        setLocalStateSetModes(self)
        """
        return _osg.ClipNode_setLocalStateSetModes(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.ClipNode_computeBound(self)

ClipNode_swigregister = _osg.ClipNode_swigregister
ClipNode_swigregister(ClipNode)

OSG_ANIMATIONPATH = _osg.OSG_ANIMATIONPATH
class AnimationPath(Object):
    """Proxy of C++ osg::AnimationPath class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPath, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPath, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AnimationPath
        __init__(self, AnimationPath ap, CopyOp copyop = SHALLOW_COPY) -> AnimationPath
        __init__(self, AnimationPath ap) -> AnimationPath
        """
        this = _osg.new_AnimationPath(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.AnimationPath_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.AnimationPath_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.AnimationPath_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.AnimationPath_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.AnimationPath_className(self)

    def getMatrix(self, *args):
        """
        getMatrix(self, double time, Matrixf matrix) -> bool
        getMatrix(self, double time, Matrixd matrix) -> bool
        """
        return _osg.AnimationPath_getMatrix(self, *args)

    def getInverse(self, *args):
        """
        getInverse(self, double time, Matrixf matrix) -> bool
        getInverse(self, double time, Matrixd matrix) -> bool
        """
        return _osg.AnimationPath_getInverse(self, *args)

    def getInterpolatedControlPoint(self, *args):
        """getInterpolatedControlPoint(self, double time, ControlPoint controlPoint) -> bool"""
        return _osg.AnimationPath_getInterpolatedControlPoint(self, *args)

    def insert(self, *args):
        """insert(self, double time, ControlPoint controlPoint)"""
        return _osg.AnimationPath_insert(self, *args)

    def getFirstTime(self):
        """getFirstTime(self) -> double"""
        return _osg.AnimationPath_getFirstTime(self)

    def getLastTime(self):
        """getLastTime(self) -> double"""
        return _osg.AnimationPath_getLastTime(self)

    def getPeriod(self):
        """getPeriod(self) -> double"""
        return _osg.AnimationPath_getPeriod(self)

    SWING = _osg.AnimationPath_SWING
    LOOP = _osg.AnimationPath_LOOP
    NO_LOOPING = _osg.AnimationPath_NO_LOOPING
    def setLoopMode(self, *args):
        """setLoopMode(self, LoopMode lm)"""
        return _osg.AnimationPath_setLoopMode(self, *args)

    def getLoopMode(self):
        """getLoopMode(self) -> LoopMode"""
        return _osg.AnimationPath_getLoopMode(self)

    def setTimeControlPointMap(self, *args):
        """setTimeControlPointMap(self, TimeControlPointMap tcpm)"""
        return _osg.AnimationPath_setTimeControlPointMap(self, *args)

    def getTimeControlPointMap(self, *args):
        """
        getTimeControlPointMap(self) -> TimeControlPointMap
        getTimeControlPointMap(self) -> TimeControlPointMap
        """
        return _osg.AnimationPath_getTimeControlPointMap(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osg.AnimationPath_empty(self)

    def clear(self):
        """clear(self)"""
        return _osg.AnimationPath_clear(self)

    def read(self, *args):
        """read(self, std::istream _in)"""
        return _osg.AnimationPath_read(self, *args)

    def write(self, *args):
        """
        write(self, std::ostream out)
        write(self, osg::AnimationPath::TimeControlPointMap::const_iterator itr, 
            std::ostream out)
        """
        return _osg.AnimationPath_write(self, *args)

AnimationPath_swigregister = _osg.AnimationPath_swigregister
AnimationPath_swigregister(AnimationPath)

class AnimationPathCallback(NodeCallback):
    """Proxy of C++ osg::AnimationPathCallback class"""
    __swig_setmethods__ = {}
    for _s in [NodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPathCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPathCallback, name)
    __repr__ = _swig_repr
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.AnimationPathCallback_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.AnimationPathCallback_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.AnimationPathCallback_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.AnimationPathCallback_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.AnimationPathCallback_className(self)

    def __init__(self, *args): 
        """
        __init__(self) -> AnimationPathCallback
        __init__(self, AnimationPathCallback apc, CopyOp copyop) -> AnimationPathCallback
        __init__(self, AnimationPath ap, double timeOffset = 0.0, double timeMultiplier = 1.0) -> AnimationPathCallback
        __init__(self, AnimationPath ap, double timeOffset = 0.0) -> AnimationPathCallback
        __init__(self, AnimationPath ap) -> AnimationPathCallback
        __init__(self, Vec3d pivot, Vec3d axis, float angularVelocity) -> AnimationPathCallback
        """
        this = _osg.new_AnimationPathCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAnimationPath(self, *args):
        """setAnimationPath(self, AnimationPath path)"""
        return _osg.AnimationPathCallback_setAnimationPath(self, *args)

    def getAnimationPath(self, *args):
        """
        getAnimationPath(self) -> AnimationPath
        getAnimationPath(self) -> AnimationPath
        """
        return _osg.AnimationPathCallback_getAnimationPath(self, *args)

    def setPivotPoint(self, *args):
        """setPivotPoint(self, Vec3d pivot)"""
        return _osg.AnimationPathCallback_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(self) -> Vec3d"""
        return _osg.AnimationPathCallback_getPivotPoint(self)

    def setUseInverseMatrix(self, *args):
        """setUseInverseMatrix(self, bool useInverseMatrix)"""
        return _osg.AnimationPathCallback_setUseInverseMatrix(self, *args)

    def getUseInverseMatrix(self):
        """getUseInverseMatrix(self) -> bool"""
        return _osg.AnimationPathCallback_getUseInverseMatrix(self)

    def setTimeOffset(self, *args):
        """setTimeOffset(self, double offset)"""
        return _osg.AnimationPathCallback_setTimeOffset(self, *args)

    def getTimeOffset(self):
        """getTimeOffset(self) -> double"""
        return _osg.AnimationPathCallback_getTimeOffset(self)

    def setTimeMultiplier(self, *args):
        """setTimeMultiplier(self, double multiplier)"""
        return _osg.AnimationPathCallback_setTimeMultiplier(self, *args)

    def getTimeMultiplier(self):
        """getTimeMultiplier(self) -> double"""
        return _osg.AnimationPathCallback_getTimeMultiplier(self)

    def reset(self):
        """reset(self)"""
        return _osg.AnimationPathCallback_reset(self)

    def setPause(self, *args):
        """setPause(self, bool pause)"""
        return _osg.AnimationPathCallback_setPause(self, *args)

    def getPause(self):
        """getPause(self) -> bool"""
        return _osg.AnimationPathCallback_getPause(self)

    def getAnimationTime(self):
        """getAnimationTime(self) -> double"""
        return _osg.AnimationPathCallback_getAnimationTime(self)

    def __call__(self, *args):
        """__call__(self, Node node, NodeVisitor nv)"""
        return _osg.AnimationPathCallback___call__(self, *args)

    def update(self, *args):
        """update(self, Node node)"""
        return _osg.AnimationPathCallback_update(self, *args)

    __swig_setmethods__["_animationPath"] = _osg.AnimationPathCallback__animationPath_set
    __swig_getmethods__["_animationPath"] = _osg.AnimationPathCallback__animationPath_get
    if _newclass:_animationPath = _swig_property(_osg.AnimationPathCallback__animationPath_get, _osg.AnimationPathCallback__animationPath_set)
    __swig_setmethods__["_pivotPoint"] = _osg.AnimationPathCallback__pivotPoint_set
    __swig_getmethods__["_pivotPoint"] = _osg.AnimationPathCallback__pivotPoint_get
    if _newclass:_pivotPoint = _swig_property(_osg.AnimationPathCallback__pivotPoint_get, _osg.AnimationPathCallback__pivotPoint_set)
    __swig_setmethods__["_useInverseMatrix"] = _osg.AnimationPathCallback__useInverseMatrix_set
    __swig_getmethods__["_useInverseMatrix"] = _osg.AnimationPathCallback__useInverseMatrix_get
    if _newclass:_useInverseMatrix = _swig_property(_osg.AnimationPathCallback__useInverseMatrix_get, _osg.AnimationPathCallback__useInverseMatrix_set)
    __swig_setmethods__["_timeOffset"] = _osg.AnimationPathCallback__timeOffset_set
    __swig_getmethods__["_timeOffset"] = _osg.AnimationPathCallback__timeOffset_get
    if _newclass:_timeOffset = _swig_property(_osg.AnimationPathCallback__timeOffset_get, _osg.AnimationPathCallback__timeOffset_set)
    __swig_setmethods__["_timeMultiplier"] = _osg.AnimationPathCallback__timeMultiplier_set
    __swig_getmethods__["_timeMultiplier"] = _osg.AnimationPathCallback__timeMultiplier_get
    if _newclass:_timeMultiplier = _swig_property(_osg.AnimationPathCallback__timeMultiplier_get, _osg.AnimationPathCallback__timeMultiplier_set)
    __swig_setmethods__["_firstTime"] = _osg.AnimationPathCallback__firstTime_set
    __swig_getmethods__["_firstTime"] = _osg.AnimationPathCallback__firstTime_get
    if _newclass:_firstTime = _swig_property(_osg.AnimationPathCallback__firstTime_get, _osg.AnimationPathCallback__firstTime_set)
    __swig_setmethods__["_latestTime"] = _osg.AnimationPathCallback__latestTime_set
    __swig_getmethods__["_latestTime"] = _osg.AnimationPathCallback__latestTime_get
    if _newclass:_latestTime = _swig_property(_osg.AnimationPathCallback__latestTime_get, _osg.AnimationPathCallback__latestTime_set)
    __swig_setmethods__["_pause"] = _osg.AnimationPathCallback__pause_set
    __swig_getmethods__["_pause"] = _osg.AnimationPathCallback__pause_get
    if _newclass:_pause = _swig_property(_osg.AnimationPathCallback__pause_get, _osg.AnimationPathCallback__pause_set)
    __swig_setmethods__["_pauseTime"] = _osg.AnimationPathCallback__pauseTime_set
    __swig_getmethods__["_pauseTime"] = _osg.AnimationPathCallback__pauseTime_get
    if _newclass:_pauseTime = _swig_property(_osg.AnimationPathCallback__pauseTime_get, _osg.AnimationPathCallback__pauseTime_set)
AnimationPathCallback_swigregister = _osg.AnimationPathCallback_swigregister
AnimationPathCallback_swigregister(AnimationPathCallback)

OSG_APPLICATIONUSAGE = _osg.OSG_APPLICATIONUSAGE
class ApplicationUsage(Referenced):
    """Proxy of C++ osg::ApplicationUsage class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationUsage, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationUsage, name)
    __repr__ = _swig_repr
    def instance():
        """instance() -> ApplicationUsage"""
        return _osg.ApplicationUsage_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def __init__(self, *args): 
        """
        __init__(self) -> ApplicationUsage
        __init__(self, string commandLineUsage) -> ApplicationUsage
        """
        this = _osg.new_ApplicationUsage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setApplicationName(self, *args):
        """setApplicationName(self, string name)"""
        return _osg.ApplicationUsage_setApplicationName(self, *args)

    def getApplicationName(self):
        """getApplicationName(self) -> string"""
        return _osg.ApplicationUsage_getApplicationName(self)

    def setDescription(self, *args):
        """setDescription(self, string desc)"""
        return _osg.ApplicationUsage_setDescription(self, *args)

    def getDescription(self):
        """getDescription(self) -> string"""
        return _osg.ApplicationUsage_getDescription(self)

    NO_HELP = _osg.ApplicationUsage_NO_HELP
    COMMAND_LINE_OPTION = _osg.ApplicationUsage_COMMAND_LINE_OPTION
    ENVIRONMENTAL_VARIABLE = _osg.ApplicationUsage_ENVIRONMENTAL_VARIABLE
    KEYBOARD_MOUSE_BINDING = _osg.ApplicationUsage_KEYBOARD_MOUSE_BINDING
    HELP_ALL = _osg.ApplicationUsage_HELP_ALL
    def addUsageExplanation(self, *args):
        """addUsageExplanation(self, Type type, string option, string explanation)"""
        return _osg.ApplicationUsage_addUsageExplanation(self, *args)

    def setCommandLineUsage(self, *args):
        """setCommandLineUsage(self, string explanation)"""
        return _osg.ApplicationUsage_setCommandLineUsage(self, *args)

    def getCommandLineUsage(self):
        """getCommandLineUsage(self) -> string"""
        return _osg.ApplicationUsage_getCommandLineUsage(self)

    def addCommandLineOption(self, *args):
        """
        addCommandLineOption(self, string option, string explanation, string defaultValue = "")
        addCommandLineOption(self, string option, string explanation)
        """
        return _osg.ApplicationUsage_addCommandLineOption(self, *args)

    def setCommandLineOptions(self, *args):
        """setCommandLineOptions(self, UsageMap usageMap)"""
        return _osg.ApplicationUsage_setCommandLineOptions(self, *args)

    def getCommandLineOptions(self):
        """getCommandLineOptions(self) -> UsageMap"""
        return _osg.ApplicationUsage_getCommandLineOptions(self)

    def setCommandLineOptionsDefaults(self, *args):
        """setCommandLineOptionsDefaults(self, UsageMap usageMap)"""
        return _osg.ApplicationUsage_setCommandLineOptionsDefaults(self, *args)

    def getCommandLineOptionsDefaults(self):
        """getCommandLineOptionsDefaults(self) -> UsageMap"""
        return _osg.ApplicationUsage_getCommandLineOptionsDefaults(self)

    def addEnvironmentalVariable(self, *args):
        """
        addEnvironmentalVariable(self, string option, string explanation, string defaultValue = "")
        addEnvironmentalVariable(self, string option, string explanation)
        """
        return _osg.ApplicationUsage_addEnvironmentalVariable(self, *args)

    def setEnvironmentalVariables(self, *args):
        """setEnvironmentalVariables(self, UsageMap usageMap)"""
        return _osg.ApplicationUsage_setEnvironmentalVariables(self, *args)

    def getEnvironmentalVariables(self):
        """getEnvironmentalVariables(self) -> UsageMap"""
        return _osg.ApplicationUsage_getEnvironmentalVariables(self)

    def setEnvironmentalVariablesDefaults(self, *args):
        """setEnvironmentalVariablesDefaults(self, UsageMap usageMap)"""
        return _osg.ApplicationUsage_setEnvironmentalVariablesDefaults(self, *args)

    def getEnvironmentalVariablesDefaults(self):
        """getEnvironmentalVariablesDefaults(self) -> UsageMap"""
        return _osg.ApplicationUsage_getEnvironmentalVariablesDefaults(self)

    def addKeyboardMouseBinding(self, *args):
        """addKeyboardMouseBinding(self, string option, string explanation)"""
        return _osg.ApplicationUsage_addKeyboardMouseBinding(self, *args)

    def setKeyboardMouseBindings(self, *args):
        """setKeyboardMouseBindings(self, UsageMap usageMap)"""
        return _osg.ApplicationUsage_setKeyboardMouseBindings(self, *args)

    def getKeyboardMouseBindings(self):
        """getKeyboardMouseBindings(self) -> UsageMap"""
        return _osg.ApplicationUsage_getKeyboardMouseBindings(self)

    def getFormattedString(self, *args):
        """
        getFormattedString(self, string str, UsageMap um, unsigned int widthOfOutput = 80, 
            bool showDefaults = False, UsageMap ud = osg::ApplicationUsage::UsageMap())
        getFormattedString(self, string str, UsageMap um, unsigned int widthOfOutput = 80, 
            bool showDefaults = False)
        getFormattedString(self, string str, UsageMap um, unsigned int widthOfOutput = 80)
        getFormattedString(self, string str, UsageMap um)
        """
        return _osg.ApplicationUsage_getFormattedString(self, *args)

    def write(self, *args):
        """
        write(self, std::ostream output, UsageMap um, unsigned int widthOfOutput = 80, 
            bool showDefaults = False, UsageMap ud = osg::ApplicationUsage::UsageMap())
        write(self, std::ostream output, UsageMap um, unsigned int widthOfOutput = 80, 
            bool showDefaults = False)
        write(self, std::ostream output, UsageMap um, unsigned int widthOfOutput = 80)
        write(self, std::ostream output, UsageMap um)
        write(self, std::ostream output, unsigned int type = COMMAND_LINE_OPTION, 
            unsigned int widthOfOutput = 80, bool showDefaults = False)
        write(self, std::ostream output, unsigned int type = COMMAND_LINE_OPTION, 
            unsigned int widthOfOutput = 80)
        write(self, std::ostream output, unsigned int type = COMMAND_LINE_OPTION)
        write(self, std::ostream output)
        """
        return _osg.ApplicationUsage_write(self, *args)

    def writeEnvironmentSettings(self, *args):
        """writeEnvironmentSettings(self, std::ostream output)"""
        return _osg.ApplicationUsage_writeEnvironmentSettings(self, *args)

ApplicationUsage_swigregister = _osg.ApplicationUsage_swigregister
ApplicationUsage_swigregister(ApplicationUsage)

def ApplicationUsage_instance():
  """ApplicationUsage_instance() -> ApplicationUsage"""
  return _osg.ApplicationUsage_instance()

class ApplicationUsageProxy(_object):
    """Proxy of C++ osg::ApplicationUsageProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplicationUsageProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApplicationUsageProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Type type, string option, string explanation) -> ApplicationUsageProxy"""
        this = _osg.new_ApplicationUsageProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ApplicationUsageProxy
    __del__ = lambda self : None;
ApplicationUsageProxy_swigregister = _osg.ApplicationUsageProxy_swigregister
ApplicationUsageProxy_swigregister(ApplicationUsageProxy)

OSG_ARGUMENTPARSER = _osg.OSG_ARGUMENTPARSER
class ArgumentParser(_object):
    """Proxy of C++ osg::ArgumentParser class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArgumentParser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArgumentParser, name)
    __repr__ = _swig_repr
    def isBool(*args):
        """isBool(char str) -> bool"""
        return _osg.ArgumentParser_isBool(*args)

    if _newclass:isBool = staticmethod(isBool)
    __swig_getmethods__["isBool"] = lambda x: isBool
    def __init__(self, *args): 
        """__init__(self, int argc, char argv) -> ArgumentParser"""
        this = _osg.new_ArgumentParser(*args)
        try: self.this.append(this)
        except: self.this = this
    def setApplicationUsage(self, *args):
        """setApplicationUsage(self, ApplicationUsage usage)"""
        return _osg.ArgumentParser_setApplicationUsage(self, *args)

    def getApplicationUsage(self, *args):
        """
        getApplicationUsage(self) -> ApplicationUsage
        getApplicationUsage(self) -> ApplicationUsage
        """
        return _osg.ArgumentParser_getApplicationUsage(self, *args)

    def argc(self):
        """argc(self) -> int"""
        return _osg.ArgumentParser_argc(self)

    def argv(self):
        """argv(self) -> char"""
        return _osg.ArgumentParser_argv(self)

    def getApplicationName(self):
        """getApplicationName(self) -> string"""
        return _osg.ArgumentParser_getApplicationName(self)

    def find(self, *args):
        """find(self, string str) -> int"""
        return _osg.ArgumentParser_find(self, *args)

    def isOption(self, *args):
        """
        isOption(self, char str) -> bool
        isOption(self, int pos) -> bool
        """
        return _osg.ArgumentParser_isOption(self, *args)

    def isString(self, *args):
        """
        isString(self, char str) -> bool
        isString(self, int pos) -> bool
        """
        return _osg.ArgumentParser_isString(self, *args)

    def isNumber(self, *args):
        """
        isNumber(self, char str) -> bool
        isNumber(self, int pos) -> bool
        """
        return _osg.ArgumentParser_isNumber(self, *args)

    def containsOptions(self):
        """containsOptions(self) -> bool"""
        return _osg.ArgumentParser_containsOptions(self)

    def remove(self, *args):
        """
        remove(self, int pos, int num = 1)
        remove(self, int pos)
        """
        return _osg.ArgumentParser_remove(self, *args)

    def match(self, *args):
        """match(self, int pos, string str) -> bool"""
        return _osg.ArgumentParser_match(self, *args)

    BENIGN = _osg.ArgumentParser_BENIGN
    CRITICAL = _osg.ArgumentParser_CRITICAL
    def errors(self, *args):
        """
        errors(self, ErrorSeverity severity = BENIGN) -> bool
        errors(self) -> bool
        """
        return _osg.ArgumentParser_errors(self, *args)

    def reportError(self, *args):
        """
        reportError(self, string message, ErrorSeverity severity = CRITICAL)
        reportError(self, string message)
        """
        return _osg.ArgumentParser_reportError(self, *args)

    def reportRemainingOptionsAsUnrecognized(self, *args):
        """
        reportRemainingOptionsAsUnrecognized(self, ErrorSeverity severity = BENIGN)
        reportRemainingOptionsAsUnrecognized(self)
        """
        return _osg.ArgumentParser_reportRemainingOptionsAsUnrecognized(self, *args)

    def getErrorMessageMap(self, *args):
        """
        getErrorMessageMap(self) -> ErrorMessageMap
        getErrorMessageMap(self) -> ErrorMessageMap
        """
        return _osg.ArgumentParser_getErrorMessageMap(self, *args)

    def writeErrorMessages(self, *args):
        """
        writeErrorMessages(self, std::ostream output, ErrorSeverity sevrity = BENIGN)
        writeErrorMessages(self, std::ostream output)
        """
        return _osg.ArgumentParser_writeErrorMessages(self, *args)

    def readHelpType(self):
        """readHelpType(self) -> Type"""
        return _osg.ArgumentParser_readHelpType(self)

    __swig_destroy__ = _osg.delete_ArgumentParser
    __del__ = lambda self : None;
ArgumentParser_swigregister = _osg.ArgumentParser_swigregister
ArgumentParser_swigregister(ArgumentParser)

def ArgumentParser_isBool(*args):
  """ArgumentParser_isBool(char str) -> bool"""
  return _osg.ArgumentParser_isBool(*args)

OSG_PRIMITIVESET = _osg.OSG_PRIMITIVESET
class PrimitiveFunctor(_object):
    """Proxy of C++ osg::PrimitiveFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_PrimitiveFunctor
    __del__ = lambda self : None;
    def setVertexArray(self, *args):
        """
        setVertexArray(self, unsigned int count, Vec2 vertices)
        setVertexArray(self, unsigned int count, Vec3 vertices)
        setVertexArray(self, unsigned int count, Vec4 vertices)
        setVertexArray(self, unsigned int count, Vec2d vertices)
        setVertexArray(self, unsigned int count, Vec3d vertices)
        setVertexArray(self, unsigned int count, Vec4d vertices)
        """
        return _osg.PrimitiveFunctor_setVertexArray(self, *args)

    def drawArrays(self, *args):
        """drawArrays(self, GLenum mode, GLint first, GLsizei count)"""
        return _osg.PrimitiveFunctor_drawArrays(self, *args)

    def drawElements(self, *args):
        """
        drawElements(self, GLenum mode, GLsizei count, GLubyte indices)
        drawElements(self, GLenum mode, GLsizei count, GLushort indices)
        drawElements(self, GLenum mode, GLsizei count, GLuint indices)
        """
        return _osg.PrimitiveFunctor_drawElements(self, *args)

    def begin(self, *args):
        """begin(self, GLenum mode)"""
        return _osg.PrimitiveFunctor_begin(self, *args)

    def vertex(self, *args):
        """
        vertex(self, Vec2 vert)
        vertex(self, Vec3 vert)
        vertex(self, Vec4 vert)
        vertex(self, float x, float y)
        vertex(self, float x, float y, float z)
        vertex(self, float x, float y, float z, float w)
        """
        return _osg.PrimitiveFunctor_vertex(self, *args)

    def end(self):
        """end(self)"""
        return _osg.PrimitiveFunctor_end(self)

PrimitiveFunctor_swigregister = _osg.PrimitiveFunctor_swigregister
PrimitiveFunctor_swigregister(PrimitiveFunctor)

class PrimitiveIndexFunctor(_object):
    """Proxy of C++ osg::PrimitiveIndexFunctor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveIndexFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveIndexFunctor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osg.delete_PrimitiveIndexFunctor
    __del__ = lambda self : None;
    def setVertexArray(self, *args):
        """
        setVertexArray(self, unsigned int count, Vec2 vertices)
        setVertexArray(self, unsigned int count, Vec3 vertices)
        setVertexArray(self, unsigned int count, Vec4 vertices)
        setVertexArray(self, unsigned int count, Vec2d vertices)
        setVertexArray(self, unsigned int count, Vec3d vertices)
        setVertexArray(self, unsigned int count, Vec4d vertices)
        """
        return _osg.PrimitiveIndexFunctor_setVertexArray(self, *args)

    def drawArrays(self, *args):
        """drawArrays(self, GLenum mode, GLint first, GLsizei count)"""
        return _osg.PrimitiveIndexFunctor_drawArrays(self, *args)

    def drawElements(self, *args):
        """
        drawElements(self, GLenum mode, GLsizei count, GLubyte indices)
        drawElements(self, GLenum mode, GLsizei count, GLushort indices)
        drawElements(self, GLenum mode, GLsizei count, GLuint indices)
        """
        return _osg.PrimitiveIndexFunctor_drawElements(self, *args)

    def begin(self, *args):
        """begin(self, GLenum mode)"""
        return _osg.PrimitiveIndexFunctor_begin(self, *args)

    def vertex(self, *args):
        """vertex(self, unsigned int pos)"""
        return _osg.PrimitiveIndexFunctor_vertex(self, *args)

    def end(self):
        """end(self)"""
        return _osg.PrimitiveIndexFunctor_end(self)

PrimitiveIndexFunctor_swigregister = _osg.PrimitiveIndexFunctor_swigregister
PrimitiveIndexFunctor_swigregister(PrimitiveIndexFunctor)

class PrimitiveSet(BufferData):
    """Proxy of C++ osg::PrimitiveSet class"""
    __swig_setmethods__ = {}
    for _s in [BufferData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveSet, name, value)
    __swig_getmethods__ = {}
    for _s in [BufferData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveSet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PrimitiveType = _osg.PrimitiveSet_PrimitiveType
    DrawArraysPrimitiveType = _osg.PrimitiveSet_DrawArraysPrimitiveType
    DrawArrayLengthsPrimitiveType = _osg.PrimitiveSet_DrawArrayLengthsPrimitiveType
    DrawElementsUBytePrimitiveType = _osg.PrimitiveSet_DrawElementsUBytePrimitiveType
    DrawElementsUShortPrimitiveType = _osg.PrimitiveSet_DrawElementsUShortPrimitiveType
    DrawElementsUIntPrimitiveType = _osg.PrimitiveSet_DrawElementsUIntPrimitiveType
    POINTS = _osg.PrimitiveSet_POINTS
    LINES = _osg.PrimitiveSet_LINES
    LINE_STRIP = _osg.PrimitiveSet_LINE_STRIP
    LINE_LOOP = _osg.PrimitiveSet_LINE_LOOP
    TRIANGLES = _osg.PrimitiveSet_TRIANGLES
    TRIANGLE_STRIP = _osg.PrimitiveSet_TRIANGLE_STRIP
    TRIANGLE_FAN = _osg.PrimitiveSet_TRIANGLE_FAN
    QUADS = _osg.PrimitiveSet_QUADS
    QUAD_STRIP = _osg.PrimitiveSet_QUAD_STRIP
    POLYGON = _osg.PrimitiveSet_POLYGON
    LINES_ADJACENCY = _osg.PrimitiveSet_LINES_ADJACENCY
    LINE_STRIP_ADJACENCY = _osg.PrimitiveSet_LINE_STRIP_ADJACENCY
    TRIANGLES_ADJACENCY = _osg.PrimitiveSet_TRIANGLES_ADJACENCY
    TRIANGLE_STRIP_ADJACENCY = _osg.PrimitiveSet_TRIANGLE_STRIP_ADJACENCY
    PATCHES = _osg.PrimitiveSet_PATCHES
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PrimitiveSet_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PrimitiveSet_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.PrimitiveSet_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.PrimitiveSet_getType(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.PrimitiveSet_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.PrimitiveSet_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(self) -> bool"""
        return _osg.PrimitiveSet_supportsBufferObject(self)

    def getDrawElements(self, *args):
        """
        getDrawElements(self) -> DrawElements
        getDrawElements(self) -> DrawElements
        """
        return _osg.PrimitiveSet_getDrawElements(self, *args)

    def setNumInstances(self, *args):
        """setNumInstances(self, int n)"""
        return _osg.PrimitiveSet_setNumInstances(self, *args)

    def getNumInstances(self):
        """getNumInstances(self) -> int"""
        return _osg.PrimitiveSet_getNumInstances(self)

    def setMode(self, *args):
        """setMode(self, GLenum mode)"""
        return _osg.PrimitiveSet_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> GLenum"""
        return _osg.PrimitiveSet_getMode(self)

    def draw(self, *args):
        """draw(self, State state, bool useVertexBufferObjects)"""
        return _osg.PrimitiveSet_draw(self, *args)

    def accept(self, *args):
        """
        accept(self, PrimitiveFunctor functor)
        accept(self, PrimitiveIndexFunctor functor)
        """
        return _osg.PrimitiveSet_accept(self, *args)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.PrimitiveSet_index(self, *args)

    def getNumIndices(self):
        """getNumIndices(self) -> unsigned int"""
        return _osg.PrimitiveSet_getNumIndices(self)

    def offsetIndices(self, *args):
        """offsetIndices(self, int offset)"""
        return _osg.PrimitiveSet_offsetIndices(self, *args)

    def getNumPrimitives(self):
        """getNumPrimitives(self) -> unsigned int"""
        return _osg.PrimitiveSet_getNumPrimitives(self)

    def computeRange(self):
        """computeRange(self)"""
        return _osg.PrimitiveSet_computeRange(self)

PrimitiveSet_swigregister = _osg.PrimitiveSet_swigregister
PrimitiveSet_swigregister(PrimitiveSet)

class DrawArrays(PrimitiveSet):
    """Proxy of C++ osg::DrawArrays class"""
    __swig_setmethods__ = {}
    for _s in [PrimitiveSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawArrays, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawArrays, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GLenum mode = 0) -> DrawArrays
        __init__(self) -> DrawArrays
        __init__(self, GLenum mode, GLint first, GLsizei count, int numInstances = 0) -> DrawArrays
        __init__(self, GLenum mode, GLint first, GLsizei count) -> DrawArrays
        __init__(self, DrawArrays da, CopyOp copyop = SHALLOW_COPY) -> DrawArrays
        __init__(self, DrawArrays da) -> DrawArrays
        """
        this = _osg.new_DrawArrays(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.DrawArrays_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.DrawArrays_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.DrawArrays_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.DrawArrays_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.DrawArrays_className(self)

    def set(self, *args):
        """set(self, GLenum mode, GLint first, GLsizei count)"""
        return _osg.DrawArrays_set(self, *args)

    def setFirst(self, *args):
        """setFirst(self, GLint first)"""
        return _osg.DrawArrays_setFirst(self, *args)

    def getFirst(self):
        """getFirst(self) -> GLint"""
        return _osg.DrawArrays_getFirst(self)

    def setCount(self, *args):
        """setCount(self, GLsizei count)"""
        return _osg.DrawArrays_setCount(self, *args)

    def getCount(self):
        """getCount(self) -> GLsizei"""
        return _osg.DrawArrays_getCount(self)

    def draw(self, *args):
        """draw(self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawArrays_draw(self, *args)

    def accept(self, *args):
        """
        accept(self, PrimitiveFunctor functor)
        accept(self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawArrays_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(self) -> unsigned int"""
        return _osg.DrawArrays_getNumIndices(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.DrawArrays_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(self, int offset)"""
        return _osg.DrawArrays_offsetIndices(self, *args)

DrawArrays_swigregister = _osg.DrawArrays_swigregister
DrawArrays_swigregister(DrawArrays)

class DrawArrayLengths(PrimitiveSet):
    """Proxy of C++ osg::DrawArrayLengths class"""
    __swig_setmethods__ = {}
    for _s in [PrimitiveSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawArrayLengths, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawArrayLengths, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GLenum mode = 0) -> DrawArrayLengths
        __init__(self) -> DrawArrayLengths
        __init__(self, DrawArrayLengths dal, CopyOp copyop = SHALLOW_COPY) -> DrawArrayLengths
        __init__(self, DrawArrayLengths dal) -> DrawArrayLengths
        __init__(self, GLenum mode, GLint first, unsigned int no, GLsizei ptr) -> DrawArrayLengths
        __init__(self, GLenum mode, GLint first, unsigned int no) -> DrawArrayLengths
        __init__(self, GLenum mode, GLint first) -> DrawArrayLengths
        """
        this = _osg.new_DrawArrayLengths(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.DrawArrayLengths_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.DrawArrayLengths_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.DrawArrayLengths_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.DrawArrayLengths_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.DrawArrayLengths_className(self)

    def setFirst(self, *args):
        """setFirst(self, GLint first)"""
        return _osg.DrawArrayLengths_setFirst(self, *args)

    def getFirst(self):
        """getFirst(self) -> GLint"""
        return _osg.DrawArrayLengths_getFirst(self)

    def draw(self, *args):
        """draw(self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawArrayLengths_draw(self, *args)

    def accept(self, *args):
        """
        accept(self, PrimitiveFunctor functor)
        accept(self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawArrayLengths_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(self) -> unsigned int"""
        return _osg.DrawArrayLengths_getNumIndices(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.DrawArrayLengths_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(self, int offset)"""
        return _osg.DrawArrayLengths_offsetIndices(self, *args)

    def getNumPrimitives(self):
        """getNumPrimitives(self) -> unsigned int"""
        return _osg.DrawArrayLengths_getNumPrimitives(self)

DrawArrayLengths_swigregister = _osg.DrawArrayLengths_swigregister
DrawArrayLengths_swigregister(DrawArrayLengths)

class DrawElements(PrimitiveSet):
    """Proxy of C++ osg::DrawElements class"""
    __swig_setmethods__ = {}
    for _s in [PrimitiveSet]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElements, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveSet]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElements, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getDrawElements(self, *args):
        """
        getDrawElements(self) -> DrawElements
        getDrawElements(self) -> DrawElements
        """
        return _osg.DrawElements_getDrawElements(self, *args)

    def setElementBufferObject(self, *args):
        """setElementBufferObject(self, ElementBufferObject ebo)"""
        return _osg.DrawElements_setElementBufferObject(self, *args)

    def getElementBufferObject(self, *args):
        """
        getElementBufferObject(self) -> ElementBufferObject
        getElementBufferObject(self) -> ElementBufferObject
        """
        return _osg.DrawElements_getElementBufferObject(self, *args)

    def reserveElements(self, *args):
        """reserveElements(self, unsigned int numIndices)"""
        return _osg.DrawElements_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(self, unsigned int arg0, unsigned int arg1)"""
        return _osg.DrawElements_setElement(self, *args)

    def getElement(self, *args):
        """getElement(self, unsigned int arg0) -> unsigned int"""
        return _osg.DrawElements_getElement(self, *args)

    def addElement(self, *args):
        """addElement(self, unsigned int arg0)"""
        return _osg.DrawElements_addElement(self, *args)

DrawElements_swigregister = _osg.DrawElements_swigregister
DrawElements_swigregister(DrawElements)

class DrawElementsUByte(DrawElements):
    """Proxy of C++ osg::DrawElementsUByte class"""
    __swig_setmethods__ = {}
    for _s in [DrawElements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElementsUByte, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawElements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElementsUByte, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GLenum mode = 0) -> DrawElementsUByte
        __init__(self) -> DrawElementsUByte
        __init__(self, DrawElementsUByte array, CopyOp copyop = SHALLOW_COPY) -> DrawElementsUByte
        __init__(self, DrawElementsUByte array) -> DrawElementsUByte
        __init__(self, GLenum mode, unsigned int no, GLubyte ptr, int numInstances = 0) -> DrawElementsUByte
        __init__(self, GLenum mode, unsigned int no, GLubyte ptr) -> DrawElementsUByte
        __init__(self, GLenum mode, unsigned int no) -> DrawElementsUByte
        """
        this = _osg.new_DrawElementsUByte(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.DrawElementsUByte_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.DrawElementsUByte_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.DrawElementsUByte_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.DrawElementsUByte_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.DrawElementsUByte_className(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.DrawElementsUByte_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.DrawElementsUByte_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(self) -> bool"""
        return _osg.DrawElementsUByte_supportsBufferObject(self)

    def draw(self, *args):
        """draw(self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawElementsUByte_draw(self, *args)

    def accept(self, *args):
        """
        accept(self, PrimitiveFunctor functor)
        accept(self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawElementsUByte_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(self) -> unsigned int"""
        return _osg.DrawElementsUByte_getNumIndices(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.DrawElementsUByte_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(self, int offset)"""
        return _osg.DrawElementsUByte_offsetIndices(self, *args)

    def reserveElements(self, *args):
        """reserveElements(self, unsigned int numIndices)"""
        return _osg.DrawElementsUByte_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(self, unsigned int i, unsigned int v)"""
        return _osg.DrawElementsUByte_setElement(self, *args)

    def getElement(self, *args):
        """getElement(self, unsigned int i) -> unsigned int"""
        return _osg.DrawElementsUByte_getElement(self, *args)

    def addElement(self, *args):
        """addElement(self, unsigned int v)"""
        return _osg.DrawElementsUByte_addElement(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLubyte"""
        return _osg.DrawElementsUByte_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLubyte el)"""
        return _osg.DrawElementsUByte_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.DrawElementsUByte_size(self)

DrawElementsUByte_swigregister = _osg.DrawElementsUByte_swigregister
DrawElementsUByte_swigregister(DrawElementsUByte)

class DrawElementsUShort(DrawElements):
    """Proxy of C++ osg::DrawElementsUShort class"""
    __swig_setmethods__ = {}
    for _s in [DrawElements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElementsUShort, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawElements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElementsUShort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GLenum mode = 0) -> DrawElementsUShort
        __init__(self) -> DrawElementsUShort
        __init__(self, DrawElementsUShort array, CopyOp copyop = SHALLOW_COPY) -> DrawElementsUShort
        __init__(self, DrawElementsUShort array) -> DrawElementsUShort
        __init__(self, GLenum mode, unsigned int no, GLushort ptr, int numInstances = 0) -> DrawElementsUShort
        __init__(self, GLenum mode, unsigned int no, GLushort ptr) -> DrawElementsUShort
        __init__(self, GLenum mode, unsigned int no) -> DrawElementsUShort
        """
        this = _osg.new_DrawElementsUShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.DrawElementsUShort_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.DrawElementsUShort_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.DrawElementsUShort_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.DrawElementsUShort_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.DrawElementsUShort_className(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.DrawElementsUShort_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.DrawElementsUShort_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(self) -> bool"""
        return _osg.DrawElementsUShort_supportsBufferObject(self)

    def draw(self, *args):
        """draw(self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawElementsUShort_draw(self, *args)

    def accept(self, *args):
        """
        accept(self, PrimitiveFunctor functor)
        accept(self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawElementsUShort_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(self) -> unsigned int"""
        return _osg.DrawElementsUShort_getNumIndices(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.DrawElementsUShort_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(self, int offset)"""
        return _osg.DrawElementsUShort_offsetIndices(self, *args)

    def reserveElements(self, *args):
        """reserveElements(self, unsigned int numIndices)"""
        return _osg.DrawElementsUShort_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(self, unsigned int i, unsigned int v)"""
        return _osg.DrawElementsUShort_setElement(self, *args)

    def getElement(self, *args):
        """getElement(self, unsigned int i) -> unsigned int"""
        return _osg.DrawElementsUShort_getElement(self, *args)

    def addElement(self, *args):
        """addElement(self, unsigned int v)"""
        return _osg.DrawElementsUShort_addElement(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLushort"""
        return _osg.DrawElementsUShort_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLushort el)"""
        return _osg.DrawElementsUShort_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.DrawElementsUShort_size(self)

DrawElementsUShort_swigregister = _osg.DrawElementsUShort_swigregister
DrawElementsUShort_swigregister(DrawElementsUShort)

class DrawElementsUInt(DrawElements):
    """Proxy of C++ osg::DrawElementsUInt class"""
    __swig_setmethods__ = {}
    for _s in [DrawElements]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawElementsUInt, name, value)
    __swig_getmethods__ = {}
    for _s in [DrawElements]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DrawElementsUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GLenum mode = 0) -> DrawElementsUInt
        __init__(self) -> DrawElementsUInt
        __init__(self, DrawElementsUInt array, CopyOp copyop = SHALLOW_COPY) -> DrawElementsUInt
        __init__(self, DrawElementsUInt array) -> DrawElementsUInt
        __init__(self, GLenum mode, unsigned int no, GLuint ptr, int numInstances = 0) -> DrawElementsUInt
        __init__(self, GLenum mode, unsigned int no, GLuint ptr) -> DrawElementsUInt
        __init__(self, GLenum mode, unsigned int no) -> DrawElementsUInt
        """
        this = _osg.new_DrawElementsUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.DrawElementsUInt_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.DrawElementsUInt_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.DrawElementsUInt_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.DrawElementsUInt_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.DrawElementsUInt_className(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.DrawElementsUInt_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.DrawElementsUInt_getTotalDataSize(self)

    def supportsBufferObject(self):
        """supportsBufferObject(self) -> bool"""
        return _osg.DrawElementsUInt_supportsBufferObject(self)

    def draw(self, *args):
        """draw(self, State state, bool useVertexBufferObjects)"""
        return _osg.DrawElementsUInt_draw(self, *args)

    def accept(self, *args):
        """
        accept(self, PrimitiveFunctor functor)
        accept(self, PrimitiveIndexFunctor functor)
        """
        return _osg.DrawElementsUInt_accept(self, *args)

    def getNumIndices(self):
        """getNumIndices(self) -> unsigned int"""
        return _osg.DrawElementsUInt_getNumIndices(self)

    def index(self, *args):
        """index(self, unsigned int pos) -> unsigned int"""
        return _osg.DrawElementsUInt_index(self, *args)

    def offsetIndices(self, *args):
        """offsetIndices(self, int offset)"""
        return _osg.DrawElementsUInt_offsetIndices(self, *args)

    def reserveElements(self, *args):
        """reserveElements(self, unsigned int numIndices)"""
        return _osg.DrawElementsUInt_reserveElements(self, *args)

    def setElement(self, *args):
        """setElement(self, unsigned int i, unsigned int v)"""
        return _osg.DrawElementsUInt_setElement(self, *args)

    def getElement(self, *args):
        """getElement(self, unsigned int i) -> unsigned int"""
        return _osg.DrawElementsUInt_getElement(self, *args)

    def addElement(self, *args):
        """addElement(self, unsigned int v)"""
        return _osg.DrawElementsUInt_addElement(self, *args)

    def asVector(self):
        """asVector(self) -> vectorGLuint"""
        return _osg.DrawElementsUInt_asVector(self)

    def push_back(self, *args):
        """push_back(self, GLuint el)"""
        return _osg.DrawElementsUInt_push_back(self, *args)

    def size(self):
        """size(self) -> int"""
        return _osg.DrawElementsUInt_size(self)

DrawElementsUInt_swigregister = _osg.DrawElementsUInt_swigregister
DrawElementsUInt_swigregister(DrawElementsUInt)

OSG_BOUNDSCHECKING = _osg.OSG_BOUNDSCHECKING
class ModifiedCallback(Object):
    """Proxy of C++ ModifiedCallback class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModifiedCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModifiedCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def modified(self, *args):
        """modified(self, BufferData arg0)"""
        return _osg.ModifiedCallback_modified(self, *args)

    __swig_destroy__ = _osg.delete_ModifiedCallback
    __del__ = lambda self : None;
ModifiedCallback_swigregister = _osg.ModifiedCallback_swigregister
ModifiedCallback_swigregister(ModifiedCallback)

OSG_MATRIXTRANSFORM = _osg.OSG_MATRIXTRANSFORM
class MatrixTransform(Transform):
    """Proxy of C++ osg::MatrixTransform class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MatrixTransform
        __init__(self, MatrixTransform arg0, CopyOp copyop = SHALLOW_COPY) -> MatrixTransform
        __init__(self, MatrixTransform arg0) -> MatrixTransform
        __init__(self, Matrix matix) -> MatrixTransform
        """
        if self.__class__ == MatrixTransform:
            _self = None
        else:
            _self = self
        this = _osg.new_MatrixTransform(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.MatrixTransform_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.MatrixTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.MatrixTransform_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.MatrixTransform_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.MatrixTransform_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.MatrixTransform_accept(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.MatrixTransform_asMatrixTransform(self, *args)

    def setMatrix(self, *args):
        """setMatrix(self, Matrix mat)"""
        return _osg.MatrixTransform_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(self) -> Matrix"""
        return _osg.MatrixTransform_getMatrix(self)

    def preMult(self, *args):
        """preMult(self, Matrix mat)"""
        return _osg.MatrixTransform_preMult(self, *args)

    def postMult(self, *args):
        """postMult(self, Matrix mat)"""
        return _osg.MatrixTransform_postMult(self, *args)

    def getInverseMatrix(self):
        """getInverseMatrix(self) -> Matrix"""
        return _osg.MatrixTransform_getInverseMatrix(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransform_computeWorldToLocalMatrix(self, *args)

    def __disown__(self):
        self.this.disown()
        _osg.disown_MatrixTransform(self)
        return weakref_proxy(self)
    def childRemoved(self, *args):
        """childRemoved(self, unsigned int arg0, unsigned int arg1)"""
        return _osg.MatrixTransform_childRemoved(self, *args)

    def childInserted(self, *args):
        """childInserted(self, unsigned int arg0)"""
        return _osg.MatrixTransform_childInserted(self, *args)

MatrixTransform_swigregister = _osg.MatrixTransform_swigregister
MatrixTransform_swigregister(MatrixTransform)

OSG_CULLSETTINGS = _osg.OSG_CULLSETTINGS
class CullSettings(_object):
    """Proxy of C++ osg::CullSettings class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CullSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CullSettings, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CullSettings
        __init__(self, ArgumentParser arguments) -> CullSettings
        __init__(self, CullSettings cs) -> CullSettings
        """
        this = _osg.new_CullSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CullSettings
    __del__ = lambda self : None;
    def setDefaults(self):
        """setDefaults(self)"""
        return _osg.CullSettings_setDefaults(self)

    COMPUTE_NEAR_FAR_MODE = _osg.CullSettings_COMPUTE_NEAR_FAR_MODE
    CULLING_MODE = _osg.CullSettings_CULLING_MODE
    LOD_SCALE = _osg.CullSettings_LOD_SCALE
    SMALL_FEATURE_CULLING_PIXEL_SIZE = _osg.CullSettings_SMALL_FEATURE_CULLING_PIXEL_SIZE
    CLAMP_PROJECTION_MATRIX_CALLBACK = _osg.CullSettings_CLAMP_PROJECTION_MATRIX_CALLBACK
    NEAR_FAR_RATIO = _osg.CullSettings_NEAR_FAR_RATIO
    IMPOSTOR_ACTIVE = _osg.CullSettings_IMPOSTOR_ACTIVE
    DEPTH_SORT_IMPOSTOR_SPRITES = _osg.CullSettings_DEPTH_SORT_IMPOSTOR_SPRITES
    IMPOSTOR_PIXEL_ERROR_THRESHOLD = _osg.CullSettings_IMPOSTOR_PIXEL_ERROR_THRESHOLD
    NUM_FRAMES_TO_KEEP_IMPOSTORS_SPRITES = _osg.CullSettings_NUM_FRAMES_TO_KEEP_IMPOSTORS_SPRITES
    CULL_MASK = _osg.CullSettings_CULL_MASK
    CULL_MASK_LEFT = _osg.CullSettings_CULL_MASK_LEFT
    CULL_MASK_RIGHT = _osg.CullSettings_CULL_MASK_RIGHT
    CLEAR_COLOR = _osg.CullSettings_CLEAR_COLOR
    CLEAR_MASK = _osg.CullSettings_CLEAR_MASK
    LIGHTING_MODE = _osg.CullSettings_LIGHTING_MODE
    LIGHT = _osg.CullSettings_LIGHT
    DRAW_BUFFER = _osg.CullSettings_DRAW_BUFFER
    READ_BUFFER = _osg.CullSettings_READ_BUFFER
    NO_VARIABLES = _osg.CullSettings_NO_VARIABLES
    ALL_VARIABLES = _osg.CullSettings_ALL_VARIABLES
    def setInheritanceMask(self, *args):
        """setInheritanceMask(self, InheritanceMask mask)"""
        return _osg.CullSettings_setInheritanceMask(self, *args)

    def getInheritanceMask(self):
        """getInheritanceMask(self) -> InheritanceMask"""
        return _osg.CullSettings_getInheritanceMask(self)

    def setCullSettings(self, *args):
        """setCullSettings(self, CullSettings settings)"""
        return _osg.CullSettings_setCullSettings(self, *args)

    def inheritCullSettings(self, *args):
        """
        inheritCullSettings(self, CullSettings settings)
        inheritCullSettings(self, CullSettings settings, unsigned int inheritanceMask)
        """
        return _osg.CullSettings_inheritCullSettings(self, *args)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(self)"""
        return _osg.CullSettings_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(self, ArgumentParser arguments)"""
        return _osg.CullSettings_readCommandLine(self, *args)

    DISABLE_ASSOCIATED_INHERITANCE_MASK_BIT = _osg.CullSettings_DISABLE_ASSOCIATED_INHERITANCE_MASK_BIT
    DO_NOT_MODIFY_INHERITANCE_MASK = _osg.CullSettings_DO_NOT_MODIFY_INHERITANCE_MASK
    def setInheritanceMaskActionOnAttributeSetting(self, *args):
        """setInheritanceMaskActionOnAttributeSetting(self, InheritanceMaskActionOnAttributeSetting action)"""
        return _osg.CullSettings_setInheritanceMaskActionOnAttributeSetting(self, *args)

    def getInheritanceMaskActionOnAttributeSetting(self):
        """getInheritanceMaskActionOnAttributeSetting(self) -> InheritanceMaskActionOnAttributeSetting"""
        return _osg.CullSettings_getInheritanceMaskActionOnAttributeSetting(self)

    def applyMaskAction(self, *args):
        """applyMaskAction(self, unsigned int maskBit)"""
        return _osg.CullSettings_applyMaskAction(self, *args)

    def setImpostorsActive(self, *args):
        """setImpostorsActive(self, bool active)"""
        return _osg.CullSettings_setImpostorsActive(self, *args)

    def getImpostorsActive(self):
        """getImpostorsActive(self) -> bool"""
        return _osg.CullSettings_getImpostorsActive(self)

    def setImpostorPixelErrorThreshold(self, *args):
        """setImpostorPixelErrorThreshold(self, float numPixels)"""
        return _osg.CullSettings_setImpostorPixelErrorThreshold(self, *args)

    def getImpostorPixelErrorThreshold(self):
        """getImpostorPixelErrorThreshold(self) -> float"""
        return _osg.CullSettings_getImpostorPixelErrorThreshold(self)

    def setDepthSortImpostorSprites(self, *args):
        """setDepthSortImpostorSprites(self, bool doDepthSort)"""
        return _osg.CullSettings_setDepthSortImpostorSprites(self, *args)

    def getDepthSortImpostorSprites(self):
        """getDepthSortImpostorSprites(self) -> bool"""
        return _osg.CullSettings_getDepthSortImpostorSprites(self)

    def setNumberOfFrameToKeepImpostorSprites(self, *args):
        """setNumberOfFrameToKeepImpostorSprites(self, int numFrames)"""
        return _osg.CullSettings_setNumberOfFrameToKeepImpostorSprites(self, *args)

    def getNumberOfFrameToKeepImpostorSprites(self):
        """getNumberOfFrameToKeepImpostorSprites(self) -> int"""
        return _osg.CullSettings_getNumberOfFrameToKeepImpostorSprites(self)

    DO_NOT_COMPUTE_NEAR_FAR = _osg.CullSettings_DO_NOT_COMPUTE_NEAR_FAR
    COMPUTE_NEAR_FAR_USING_BOUNDING_VOLUMES = _osg.CullSettings_COMPUTE_NEAR_FAR_USING_BOUNDING_VOLUMES
    COMPUTE_NEAR_FAR_USING_PRIMITIVES = _osg.CullSettings_COMPUTE_NEAR_FAR_USING_PRIMITIVES
    def setComputeNearFarMode(self, *args):
        """setComputeNearFarMode(self, ComputeNearFarMode cnfm)"""
        return _osg.CullSettings_setComputeNearFarMode(self, *args)

    def getComputeNearFarMode(self):
        """getComputeNearFarMode(self) -> ComputeNearFarMode"""
        return _osg.CullSettings_getComputeNearFarMode(self)

    def setNearFarRatio(self, *args):
        """setNearFarRatio(self, double ratio)"""
        return _osg.CullSettings_setNearFarRatio(self, *args)

    def getNearFarRatio(self):
        """getNearFarRatio(self) -> double"""
        return _osg.CullSettings_getNearFarRatio(self)

    NO_CULLING = _osg.CullSettings_NO_CULLING
    VIEW_FRUSTUM_SIDES_CULLING = _osg.CullSettings_VIEW_FRUSTUM_SIDES_CULLING
    NEAR_PLANE_CULLING = _osg.CullSettings_NEAR_PLANE_CULLING
    FAR_PLANE_CULLING = _osg.CullSettings_FAR_PLANE_CULLING
    VIEW_FRUSTUM_CULLING = _osg.CullSettings_VIEW_FRUSTUM_CULLING
    SMALL_FEATURE_CULLING = _osg.CullSettings_SMALL_FEATURE_CULLING
    SHADOW_OCCLUSION_CULLING = _osg.CullSettings_SHADOW_OCCLUSION_CULLING
    CLUSTER_CULLING = _osg.CullSettings_CLUSTER_CULLING
    DEFAULT_CULLING = _osg.CullSettings_DEFAULT_CULLING
    ENABLE_ALL_CULLING = _osg.CullSettings_ENABLE_ALL_CULLING
    def setCullingMode(self, *args):
        """setCullingMode(self, CullingMode mode)"""
        return _osg.CullSettings_setCullingMode(self, *args)

    def getCullingMode(self):
        """getCullingMode(self) -> CullingMode"""
        return _osg.CullSettings_getCullingMode(self)

    def setCullMask(self, *args):
        """setCullMask(self, NodeMask nm)"""
        return _osg.CullSettings_setCullMask(self, *args)

    def getCullMask(self):
        """getCullMask(self) -> NodeMask"""
        return _osg.CullSettings_getCullMask(self)

    def setCullMaskLeft(self, *args):
        """setCullMaskLeft(self, NodeMask nm)"""
        return _osg.CullSettings_setCullMaskLeft(self, *args)

    def getCullMaskLeft(self):
        """getCullMaskLeft(self) -> NodeMask"""
        return _osg.CullSettings_getCullMaskLeft(self)

    def setCullMaskRight(self, *args):
        """setCullMaskRight(self, NodeMask nm)"""
        return _osg.CullSettings_setCullMaskRight(self, *args)

    def getCullMaskRight(self):
        """getCullMaskRight(self) -> NodeMask"""
        return _osg.CullSettings_getCullMaskRight(self)

    def setLODScale(self, *args):
        """setLODScale(self, float scale)"""
        return _osg.CullSettings_setLODScale(self, *args)

    def getLODScale(self):
        """getLODScale(self) -> float"""
        return _osg.CullSettings_getLODScale(self)

    def setSmallFeatureCullingPixelSize(self, *args):
        """setSmallFeatureCullingPixelSize(self, float value)"""
        return _osg.CullSettings_setSmallFeatureCullingPixelSize(self, *args)

    def getSmallFeatureCullingPixelSize(self):
        """getSmallFeatureCullingPixelSize(self) -> float"""
        return _osg.CullSettings_getSmallFeatureCullingPixelSize(self)

    def write(self, *args):
        """write(self, std::ostream out)"""
        return _osg.CullSettings_write(self, *args)

CullSettings_swigregister = _osg.CullSettings_swigregister
CullSettings_swigregister(CullSettings)

OSG_CULLFACE = _osg.OSG_CULLFACE
class CullFace(StateAttribute):
    """Proxy of C++ osg::CullFace class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CullFace, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CullFace, name)
    __repr__ = _swig_repr
    FRONT = _osg.CullFace_FRONT
    BACK = _osg.CullFace_BACK
    FRONT_AND_BACK = _osg.CullFace_FRONT_AND_BACK
    def __init__(self, *args): 
        """
        __init__(self, Mode mode = BACK) -> CullFace
        __init__(self) -> CullFace
        __init__(self, CullFace cf, CopyOp copyop = SHALLOW_COPY) -> CullFace
        __init__(self, CullFace cf) -> CullFace
        """
        this = _osg.new_CullFace(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.CullFace_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.CullFace_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.CullFace_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.CullFace_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.CullFace_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.CullFace_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.CullFace_compare(self, *args)

    def setMode(self, *args):
        """setMode(self, Mode mode)"""
        return _osg.CullFace_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> Mode"""
        return _osg.CullFace_getMode(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.CullFace_apply(self, *args)

CullFace_swigregister = _osg.CullFace_swigregister
CullFace_swigregister(CullFace)

OSG_LIGHT = _osg.OSG_LIGHT
class Light(StateAttribute):
    """Proxy of C++ osg::Light class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Light, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Light, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Light
        __init__(self, unsigned int lightnum) -> Light
        __init__(self, Light light, CopyOp copyop = SHALLOW_COPY) -> Light
        __init__(self, Light light) -> Light
        """
        this = _osg.new_Light(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Light_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Light_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Light_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Light_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Light_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Light_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.Light_compare(self, *args)

    def getMember(self):
        """getMember(self) -> unsigned int"""
        return _osg.Light_getMember(self)

    def setLightNum(self, *args):
        """setLightNum(self, int num)"""
        return _osg.Light_setLightNum(self, *args)

    def getLightNum(self):
        """getLightNum(self) -> int"""
        return _osg.Light_getLightNum(self)

    def setAmbient(self, *args):
        """setAmbient(self, Vec4 ambient)"""
        return _osg.Light_setAmbient(self, *args)

    def getAmbient(self):
        """getAmbient(self) -> Vec4"""
        return _osg.Light_getAmbient(self)

    def setDiffuse(self, *args):
        """setDiffuse(self, Vec4 diffuse)"""
        return _osg.Light_setDiffuse(self, *args)

    def getDiffuse(self):
        """getDiffuse(self) -> Vec4"""
        return _osg.Light_getDiffuse(self)

    def setSpecular(self, *args):
        """setSpecular(self, Vec4 specular)"""
        return _osg.Light_setSpecular(self, *args)

    def getSpecular(self):
        """getSpecular(self) -> Vec4"""
        return _osg.Light_getSpecular(self)

    def setPosition(self, *args):
        """setPosition(self, Vec4 position)"""
        return _osg.Light_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec4"""
        return _osg.Light_getPosition(self)

    def setDirection(self, *args):
        """setDirection(self, Vec3 direction)"""
        return _osg.Light_setDirection(self, *args)

    def getDirection(self):
        """getDirection(self) -> Vec3"""
        return _osg.Light_getDirection(self)

    def setConstantAttenuation(self, *args):
        """setConstantAttenuation(self, float constant_attenuation)"""
        return _osg.Light_setConstantAttenuation(self, *args)

    def getConstantAttenuation(self):
        """getConstantAttenuation(self) -> float"""
        return _osg.Light_getConstantAttenuation(self)

    def setLinearAttenuation(self, *args):
        """setLinearAttenuation(self, float linear_attenuation)"""
        return _osg.Light_setLinearAttenuation(self, *args)

    def getLinearAttenuation(self):
        """getLinearAttenuation(self) -> float"""
        return _osg.Light_getLinearAttenuation(self)

    def setQuadraticAttenuation(self, *args):
        """setQuadraticAttenuation(self, float quadratic_attenuation)"""
        return _osg.Light_setQuadraticAttenuation(self, *args)

    def getQuadraticAttenuation(self):
        """getQuadraticAttenuation(self) -> float"""
        return _osg.Light_getQuadraticAttenuation(self)

    def setSpotExponent(self, *args):
        """setSpotExponent(self, float spot_exponent)"""
        return _osg.Light_setSpotExponent(self, *args)

    def getSpotExponent(self):
        """getSpotExponent(self) -> float"""
        return _osg.Light_getSpotExponent(self)

    def setSpotCutoff(self, *args):
        """setSpotCutoff(self, float spot_cutoff)"""
        return _osg.Light_setSpotCutoff(self, *args)

    def getSpotCutoff(self):
        """getSpotCutoff(self) -> float"""
        return _osg.Light_getSpotCutoff(self)

    def captureLightState(self):
        """captureLightState(self)"""
        return _osg.Light_captureLightState(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.Light_apply(self, *args)

Light_swigregister = _osg.Light_swigregister
Light_swigregister(Light)

OSG_LIGHTMODEL = _osg.OSG_LIGHTMODEL
class LightModel(StateAttribute):
    """Proxy of C++ osg::LightModel class"""
    __swig_setmethods__ = {}
    for _s in [StateAttribute]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightModel, name, value)
    __swig_getmethods__ = {}
    for _s in [StateAttribute]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightModel
        __init__(self, LightModel lw, CopyOp copyop = SHALLOW_COPY) -> LightModel
        __init__(self, LightModel lw) -> LightModel
        """
        this = _osg.new_LightModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LightModel_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LightModel_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LightModel_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LightModel_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.LightModel_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.LightModel_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.LightModel_compare(self, *args)

    def setAmbientIntensity(self, *args):
        """setAmbientIntensity(self, Vec4 ambient)"""
        return _osg.LightModel_setAmbientIntensity(self, *args)

    def getAmbientIntensity(self):
        """getAmbientIntensity(self) -> Vec4"""
        return _osg.LightModel_getAmbientIntensity(self)

    SEPARATE_SPECULAR_COLOR = _osg.LightModel_SEPARATE_SPECULAR_COLOR
    SINGLE_COLOR = _osg.LightModel_SINGLE_COLOR
    def setColorControl(self, *args):
        """setColorControl(self, ColorControl cc)"""
        return _osg.LightModel_setColorControl(self, *args)

    def getColorControl(self):
        """getColorControl(self) -> ColorControl"""
        return _osg.LightModel_getColorControl(self)

    def setLocalViewer(self, *args):
        """setLocalViewer(self, bool localViewer)"""
        return _osg.LightModel_setLocalViewer(self, *args)

    def getLocalViewer(self):
        """getLocalViewer(self) -> bool"""
        return _osg.LightModel_getLocalViewer(self)

    def setTwoSided(self, *args):
        """setTwoSided(self, bool twoSided)"""
        return _osg.LightModel_setTwoSided(self, *args)

    def getTwoSided(self):
        """getTwoSided(self) -> bool"""
        return _osg.LightModel_getTwoSided(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.LightModel_apply(self, *args)

LightModel_swigregister = _osg.LightModel_swigregister
LightModel_swigregister(LightModel)

OSG_LIGHTSOURCE = _osg.OSG_LIGHTSOURCE
class LightSource(Group):
    """Proxy of C++ osg::LightSource class"""
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSource, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightSource
        __init__(self, LightSource ls, CopyOp copyop = SHALLOW_COPY) -> LightSource
        __init__(self, LightSource ls) -> LightSource
        """
        this = _osg.new_LightSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LightSource_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LightSource_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LightSource_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.LightSource_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LightSource_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.LightSource_accept(self, *args)

    RELATIVE_RF = _osg.LightSource_RELATIVE_RF
    ABSOLUTE_RF = _osg.LightSource_ABSOLUTE_RF
    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.LightSource_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.LightSource_getReferenceFrame(self)

    def setLight(self, *args):
        """setLight(self, Light light)"""
        return _osg.LightSource_setLight(self, *args)

    def getLight(self, *args):
        """
        getLight(self) -> Light
        getLight(self) -> Light
        """
        return _osg.LightSource_getLight(self, *args)

    def setStateSetModes(self, *args):
        """setStateSetModes(self, StateSet arg0, GLModeValue arg1)"""
        return _osg.LightSource_setStateSetModes(self, *args)

    def setLocalStateSetModes(self, *args):
        """
        setLocalStateSetModes(self, GLModeValue value = ON)
        setLocalStateSetModes(self)
        """
        return _osg.LightSource_setLocalStateSetModes(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.LightSource_setThreadSafeRefUnref(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.LightSource_computeBound(self)

LightSource_swigregister = _osg.LightSource_swigregister
LightSource_swigregister(LightSource)

OSG_AUTOTRANSFORM = _osg.OSG_AUTOTRANSFORM
class AutoTransform(Transform):
    """Proxy of C++ osg::AutoTransform class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AutoTransform
        __init__(self, AutoTransform pat, CopyOp copyop = SHALLOW_COPY) -> AutoTransform
        __init__(self, AutoTransform pat) -> AutoTransform
        """
        this = _osg.new_AutoTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.AutoTransform_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.AutoTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.AutoTransform_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.AutoTransform_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.AutoTransform_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.AutoTransform_accept(self, *args)

    def asAutoTransform(self, *args):
        """
        asAutoTransform(self) -> AutoTransform
        asAutoTransform(self) -> AutoTransform
        """
        return _osg.AutoTransform_asAutoTransform(self, *args)

    def setPosition(self, *args):
        """setPosition(self, Vec3d pos)"""
        return _osg.AutoTransform_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec3d"""
        return _osg.AutoTransform_getPosition(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.AutoTransform_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.AutoTransform_getRotation(self)

    def setScale(self, *args):
        """
        setScale(self, double scale)
        setScale(self, Vec3d scale)
        """
        return _osg.AutoTransform_setScale(self, *args)

    def getScale(self):
        """getScale(self) -> Vec3d"""
        return _osg.AutoTransform_getScale(self)

    def setMinimumScale(self, *args):
        """setMinimumScale(self, double minimumScale)"""
        return _osg.AutoTransform_setMinimumScale(self, *args)

    def getMinimumScale(self):
        """getMinimumScale(self) -> double"""
        return _osg.AutoTransform_getMinimumScale(self)

    def setMaximumScale(self, *args):
        """setMaximumScale(self, double maximumScale)"""
        return _osg.AutoTransform_setMaximumScale(self, *args)

    def getMaximumScale(self):
        """getMaximumScale(self) -> double"""
        return _osg.AutoTransform_getMaximumScale(self)

    def setPivotPoint(self, *args):
        """setPivotPoint(self, Vec3d pivot)"""
        return _osg.AutoTransform_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(self) -> Vec3d"""
        return _osg.AutoTransform_getPivotPoint(self)

    def setAutoUpdateEyeMovementTolerance(self, *args):
        """setAutoUpdateEyeMovementTolerance(self, float tolerance)"""
        return _osg.AutoTransform_setAutoUpdateEyeMovementTolerance(self, *args)

    def getAutoUpdateEyeMovementTolerance(self):
        """getAutoUpdateEyeMovementTolerance(self) -> float"""
        return _osg.AutoTransform_getAutoUpdateEyeMovementTolerance(self)

    NO_ROTATION = _osg.AutoTransform_NO_ROTATION
    ROTATE_TO_SCREEN = _osg.AutoTransform_ROTATE_TO_SCREEN
    ROTATE_TO_CAMERA = _osg.AutoTransform_ROTATE_TO_CAMERA
    ROTATE_TO_AXIS = _osg.AutoTransform_ROTATE_TO_AXIS
    def setAutoRotateMode(self, *args):
        """setAutoRotateMode(self, AutoRotateMode mode)"""
        return _osg.AutoTransform_setAutoRotateMode(self, *args)

    def getAutoRotateMode(self):
        """getAutoRotateMode(self) -> AutoRotateMode"""
        return _osg.AutoTransform_getAutoRotateMode(self)

    def setAxis(self, *args):
        """setAxis(self, Vec3 axis)"""
        return _osg.AutoTransform_setAxis(self, *args)

    def getAxis(self):
        """getAxis(self) -> Vec3"""
        return _osg.AutoTransform_getAxis(self)

    def setNormal(self, *args):
        """setNormal(self, Vec3 normal)"""
        return _osg.AutoTransform_setNormal(self, *args)

    def getNormal(self):
        """getNormal(self) -> Vec3"""
        return _osg.AutoTransform_getNormal(self)

    def setAutoScaleToScreen(self, *args):
        """setAutoScaleToScreen(self, bool autoScaleToScreen)"""
        return _osg.AutoTransform_setAutoScaleToScreen(self, *args)

    def getAutoScaleToScreen(self):
        """getAutoScaleToScreen(self) -> bool"""
        return _osg.AutoTransform_getAutoScaleToScreen(self)

    def setAutoScaleTransitionWidthRatio(self, *args):
        """setAutoScaleTransitionWidthRatio(self, float ratio)"""
        return _osg.AutoTransform_setAutoScaleTransitionWidthRatio(self, *args)

    def getAutoScaleTransitionWidthRatio(self):
        """getAutoScaleTransitionWidthRatio(self) -> float"""
        return _osg.AutoTransform_getAutoScaleTransitionWidthRatio(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransform_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.AutoTransform_computeBound(self)

AutoTransform_swigregister = _osg.AutoTransform_swigregister
AutoTransform_swigregister(AutoTransform)

OSG_CAMERA = _osg.OSG_CAMERA
class Camera(Transform,CullSettings):
    """Proxy of C++ osg::Camera class"""
    __swig_setmethods__ = {}
    for _s in [Transform,CullSettings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform,CullSettings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Camera
        __init__(self, Camera arg0, CopyOp copyop = SHALLOW_COPY) -> Camera
        __init__(self, Camera arg0) -> Camera
        """
        this = _osg.new_Camera(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Camera_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Camera_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Camera_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.Camera_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Camera_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.Camera_accept(self, *args)

    def setView(self, *args):
        """setView(self, View view)"""
        return _osg.Camera_setView(self, *args)

    def getView(self, *args):
        """
        getView(self) -> View
        getView(self) -> View
        """
        return _osg.Camera_getView(self, *args)

    def setStats(self, *args):
        """setStats(self, Stats stats)"""
        return _osg.Camera_setStats(self, *args)

    def getStats(self, *args):
        """
        getStats(self) -> Stats
        getStats(self) -> Stats
        """
        return _osg.Camera_getStats(self, *args)

    def setAllowEventFocus(self, *args):
        """setAllowEventFocus(self, bool focus)"""
        return _osg.Camera_setAllowEventFocus(self, *args)

    def getAllowEventFocus(self):
        """getAllowEventFocus(self) -> bool"""
        return _osg.Camera_getAllowEventFocus(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(self, DisplaySettings ds)"""
        return _osg.Camera_setDisplaySettings(self, *args)

    def getDisplaySettings(self, *args):
        """
        getDisplaySettings(self) -> DisplaySettings
        getDisplaySettings(self) -> DisplaySettings
        """
        return _osg.Camera_getDisplaySettings(self, *args)

    def setClearMask(self, *args):
        """setClearMask(self, GLbitfield mask)"""
        return _osg.Camera_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(self) -> GLbitfield"""
        return _osg.Camera_getClearMask(self)

    def setClearColor(self, *args):
        """setClearColor(self, Vec4 color)"""
        return _osg.Camera_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(self) -> Vec4"""
        return _osg.Camera_getClearColor(self)

    def setClearAccum(self, *args):
        """setClearAccum(self, Vec4 color)"""
        return _osg.Camera_setClearAccum(self, *args)

    def getClearAccum(self):
        """getClearAccum(self) -> Vec4"""
        return _osg.Camera_getClearAccum(self)

    def setClearDepth(self, *args):
        """setClearDepth(self, double depth)"""
        return _osg.Camera_setClearDepth(self, *args)

    def getClearDepth(self):
        """getClearDepth(self) -> double"""
        return _osg.Camera_getClearDepth(self)

    def setClearStencil(self, *args):
        """setClearStencil(self, int stencil)"""
        return _osg.Camera_setClearStencil(self, *args)

    def getClearStencil(self):
        """getClearStencil(self) -> int"""
        return _osg.Camera_getClearStencil(self)

    def setColorMask(self, *args):
        """
        setColorMask(self, ColorMask colorMask)
        setColorMask(self, bool red, bool green, bool blue, bool alpha)
        """
        return _osg.Camera_setColorMask(self, *args)

    def getColorMask(self, *args):
        """
        getColorMask(self) -> ColorMask
        getColorMask(self) -> ColorMask
        """
        return _osg.Camera_getColorMask(self, *args)

    def setViewport(self, *args):
        """
        setViewport(self, Viewport viewport)
        setViewport(self, int x, int y, int width, int height)
        """
        return _osg.Camera_setViewport(self, *args)

    def getViewport(self, *args):
        """
        getViewport(self) -> Viewport
        getViewport(self) -> Viewport
        """
        return _osg.Camera_getViewport(self, *args)

    PRE_MULTIPLY = _osg.Camera_PRE_MULTIPLY
    POST_MULTIPLY = _osg.Camera_POST_MULTIPLY
    def setTransformOrder(self, *args):
        """setTransformOrder(self, TransformOrder order)"""
        return _osg.Camera_setTransformOrder(self, *args)

    def getTransformOrder(self):
        """getTransformOrder(self) -> TransformOrder"""
        return _osg.Camera_getTransformOrder(self)

    FIXED = _osg.Camera_FIXED
    HORIZONTAL = _osg.Camera_HORIZONTAL
    VERTICAL = _osg.Camera_VERTICAL
    def setProjectionResizePolicy(self, *args):
        """setProjectionResizePolicy(self, ProjectionResizePolicy policy)"""
        return _osg.Camera_setProjectionResizePolicy(self, *args)

    def getProjectionResizePolicy(self):
        """getProjectionResizePolicy(self) -> ProjectionResizePolicy"""
        return _osg.Camera_getProjectionResizePolicy(self)

    def setProjectionMatrix(self, *args):
        """
        setProjectionMatrix(self, Matrixf matrix)
        setProjectionMatrix(self, Matrixd matrix)
        """
        return _osg.Camera_setProjectionMatrix(self, *args)

    def setProjectionMatrixAsOrtho(self, *args):
        """
        setProjectionMatrixAsOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.Camera_setProjectionMatrixAsOrtho(self, *args)

    def setProjectionMatrixAsOrtho2D(self, *args):
        """setProjectionMatrixAsOrtho2D(self, double left, double right, double bottom, double top)"""
        return _osg.Camera_setProjectionMatrixAsOrtho2D(self, *args)

    def setProjectionMatrixAsFrustum(self, *args):
        """
        setProjectionMatrixAsFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.Camera_setProjectionMatrixAsFrustum(self, *args)

    def setProjectionMatrixAsPerspective(self, *args):
        """setProjectionMatrixAsPerspective(self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.Camera_setProjectionMatrixAsPerspective(self, *args)

    def getProjectionMatrix(self, *args):
        """
        getProjectionMatrix(self) -> Matrixd
        getProjectionMatrix(self) -> Matrixd
        """
        return _osg.Camera_getProjectionMatrix(self, *args)

    def getProjectionMatrixAsOrtho(self, *args):
        """
        getProjectionMatrixAsOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.Camera_getProjectionMatrixAsOrtho(self, *args)

    def getProjectionMatrixAsFrustum(self, *args):
        """
        getProjectionMatrixAsFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.Camera_getProjectionMatrixAsFrustum(self, *args)

    def getProjectionMatrixAsPerspective(self, *args):
        """getProjectionMatrixAsPerspective(self, double fovy, double aspectRatio, double zNear, double zFar) -> bool"""
        return _osg.Camera_getProjectionMatrixAsPerspective(self, *args)

    def setViewMatrix(self, *args):
        """
        setViewMatrix(self, Matrixf matrix)
        setViewMatrix(self, Matrixd matrix)
        """
        return _osg.Camera_setViewMatrix(self, *args)

    def getViewMatrix(self, *args):
        """
        getViewMatrix(self) -> Matrixd
        getViewMatrix(self) -> Matrixd
        """
        return _osg.Camera_getViewMatrix(self, *args)

    def setViewMatrixAsLookAt(self, *args):
        """setViewMatrixAsLookAt(self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.Camera_setViewMatrixAsLookAt(self, *args)

    def getViewMatrixAsLookAt(self, *args):
        """
        getViewMatrixAsLookAt(self, Vec3d eye, Vec3d center, Vec3d up, double lookDistance = 1.0)
        getViewMatrixAsLookAt(self, Vec3d eye, Vec3d center, Vec3d up)
        getViewMatrixAsLookAt(self, Vec3f eye, Vec3f center, Vec3f up, float lookDistance = 1.0)
        getViewMatrixAsLookAt(self, Vec3f eye, Vec3f center, Vec3f up)
        """
        return _osg.Camera_getViewMatrixAsLookAt(self, *args)

    def getInverseViewMatrix(self):
        """getInverseViewMatrix(self) -> Matrixd"""
        return _osg.Camera_getInverseViewMatrix(self)

    PRE_RENDER = _osg.Camera_PRE_RENDER
    NESTED_RENDER = _osg.Camera_NESTED_RENDER
    POST_RENDER = _osg.Camera_POST_RENDER
    def setRenderOrder(self, *args):
        """
        setRenderOrder(self, RenderOrder order, int orderNum = 0)
        setRenderOrder(self, RenderOrder order)
        """
        return _osg.Camera_setRenderOrder(self, *args)

    def getRenderOrder(self):
        """getRenderOrder(self) -> RenderOrder"""
        return _osg.Camera_getRenderOrder(self)

    def getRenderOrderNum(self):
        """getRenderOrderNum(self) -> int"""
        return _osg.Camera_getRenderOrderNum(self)

    def isRenderToTextureCamera(self):
        """isRenderToTextureCamera(self) -> bool"""
        return _osg.Camera_isRenderToTextureCamera(self)

    FRAME_BUFFER_OBJECT = _osg.Camera_FRAME_BUFFER_OBJECT
    PIXEL_BUFFER_RTT = _osg.Camera_PIXEL_BUFFER_RTT
    PIXEL_BUFFER = _osg.Camera_PIXEL_BUFFER
    FRAME_BUFFER = _osg.Camera_FRAME_BUFFER
    SEPERATE_WINDOW = _osg.Camera_SEPERATE_WINDOW
    def setRenderTargetImplementation(self, *args):
        """
        setRenderTargetImplementation(self, RenderTargetImplementation impl)
        setRenderTargetImplementation(self, RenderTargetImplementation impl, RenderTargetImplementation fallback)
        """
        return _osg.Camera_setRenderTargetImplementation(self, *args)

    def getRenderTargetImplementation(self):
        """getRenderTargetImplementation(self) -> RenderTargetImplementation"""
        return _osg.Camera_getRenderTargetImplementation(self)

    def getRenderTargetFallback(self):
        """getRenderTargetFallback(self) -> RenderTargetImplementation"""
        return _osg.Camera_getRenderTargetFallback(self)

    def setDrawBuffer(self, *args):
        """setDrawBuffer(self, GLenum buffer)"""
        return _osg.Camera_setDrawBuffer(self, *args)

    def getDrawBuffer(self):
        """getDrawBuffer(self) -> GLenum"""
        return _osg.Camera_getDrawBuffer(self)

    def setReadBuffer(self, *args):
        """setReadBuffer(self, GLenum buffer)"""
        return _osg.Camera_setReadBuffer(self, *args)

    def getReadBuffer(self):
        """getReadBuffer(self) -> GLenum"""
        return _osg.Camera_getReadBuffer(self)

    DEPTH_BUFFER = _osg.Camera_DEPTH_BUFFER
    STENCIL_BUFFER = _osg.Camera_STENCIL_BUFFER
    PACKED_DEPTH_STENCIL_BUFFER = _osg.Camera_PACKED_DEPTH_STENCIL_BUFFER
    COLOR_BUFFER = _osg.Camera_COLOR_BUFFER
    COLOR_BUFFER0 = _osg.Camera_COLOR_BUFFER0
    COLOR_BUFFER1 = _osg.Camera_COLOR_BUFFER1
    COLOR_BUFFER2 = _osg.Camera_COLOR_BUFFER2
    COLOR_BUFFER3 = _osg.Camera_COLOR_BUFFER3
    COLOR_BUFFER4 = _osg.Camera_COLOR_BUFFER4
    COLOR_BUFFER5 = _osg.Camera_COLOR_BUFFER5
    COLOR_BUFFER6 = _osg.Camera_COLOR_BUFFER6
    COLOR_BUFFER7 = _osg.Camera_COLOR_BUFFER7
    COLOR_BUFFER8 = _osg.Camera_COLOR_BUFFER8
    COLOR_BUFFER9 = _osg.Camera_COLOR_BUFFER9
    COLOR_BUFFER10 = _osg.Camera_COLOR_BUFFER10
    COLOR_BUFFER11 = _osg.Camera_COLOR_BUFFER11
    COLOR_BUFFER12 = _osg.Camera_COLOR_BUFFER12
    COLOR_BUFFER13 = _osg.Camera_COLOR_BUFFER13
    COLOR_BUFFER14 = _osg.Camera_COLOR_BUFFER14
    COLOR_BUFFER15 = _osg.Camera_COLOR_BUFFER15
    def attach(self, *args):
        """
        attach(self, BufferComponent buffer, GLenum internalFormat)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0, bool mipMapGeneration = False, 
            unsigned int multisampleSamples = 0, 
            unsigned int multisampleColorSamples = 0)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0, bool mipMapGeneration = False, 
            unsigned int multisampleSamples = 0)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0, bool mipMapGeneration = False)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0)
        attach(self, BufferComponent buffer, Texture texture)
        attach(self, BufferComponent buffer, Image image, unsigned int multisampleSamples = 0, 
            unsigned int multisampleColorSamples = 0)
        attach(self, BufferComponent buffer, Image image, unsigned int multisampleSamples = 0)
        attach(self, BufferComponent buffer, Image image)
        """
        return _osg.Camera_attach(self, *args)

    def detach(self, *args):
        """detach(self, BufferComponent buffer)"""
        return _osg.Camera_detach(self, *args)

    IMPLICIT_DEPTH_BUFFER_ATTACHMENT = _osg.Camera_IMPLICIT_DEPTH_BUFFER_ATTACHMENT
    IMPLICIT_STENCIL_BUFFER_ATTACHMENT = _osg.Camera_IMPLICIT_STENCIL_BUFFER_ATTACHMENT
    IMPLICIT_COLOR_BUFFER_ATTACHMENT = _osg.Camera_IMPLICIT_COLOR_BUFFER_ATTACHMENT
    USE_DISPLAY_SETTINGS_MASK = _osg.Camera_USE_DISPLAY_SETTINGS_MASK
    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            ImplicitBufferAttachmentMask resolveMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self)
        """
        return _osg.Camera_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.Camera_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.Camera_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self, effectiveMask = False):
        """
        getImplicitBufferAttachmentRenderMask(self, bool effectiveMask = False) -> ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentRenderMask(self) -> ImplicitBufferAttachmentMask
        """
        return _osg.Camera_getImplicitBufferAttachmentRenderMask(self, effectiveMask)

    def getImplicitBufferAttachmentResolveMask(self, effectiveMask = False):
        """
        getImplicitBufferAttachmentResolveMask(self, bool effectiveMask = False) -> ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentResolveMask(self) -> ImplicitBufferAttachmentMask
        """
        return _osg.Camera_getImplicitBufferAttachmentResolveMask(self, effectiveMask)

    def createCameraThread(self):
        """createCameraThread(self)"""
        return _osg.Camera_createCameraThread(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(self, GraphicsContext context)"""
        return _osg.Camera_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(self) -> GraphicsContext
        getGraphicsContext(self) -> GraphicsContext
        """
        return _osg.Camera_getGraphicsContext(self, *args)

    def setRenderer(self, *args):
        """setRenderer(self, GraphicsOperation rc)"""
        return _osg.Camera_setRenderer(self, *args)

    def getRenderer(self, *args):
        """
        getRenderer(self) -> GraphicsOperation
        getRenderer(self) -> GraphicsOperation
        """
        return _osg.Camera_getRenderer(self, *args)

    def setRenderingCache(self, *args):
        """setRenderingCache(self, Object rc)"""
        return _osg.Camera_setRenderingCache(self, *args)

    def getRenderingCache(self, *args):
        """
        getRenderingCache(self) -> Object
        getRenderingCache(self) -> Object
        """
        return _osg.Camera_getRenderingCache(self, *args)

    def setInitialDrawCallback(self, *args):
        """setInitialDrawCallback(self, DrawCallback cb)"""
        return _osg.Camera_setInitialDrawCallback(self, *args)

    def getInitialDrawCallback(self, *args):
        """
        getInitialDrawCallback(self) -> DrawCallback
        getInitialDrawCallback(self) -> DrawCallback
        """
        return _osg.Camera_getInitialDrawCallback(self, *args)

    def setPreDrawCallback(self, *args):
        """setPreDrawCallback(self, DrawCallback cb)"""
        return _osg.Camera_setPreDrawCallback(self, *args)

    def getPreDrawCallback(self, *args):
        """
        getPreDrawCallback(self) -> DrawCallback
        getPreDrawCallback(self) -> DrawCallback
        """
        return _osg.Camera_getPreDrawCallback(self, *args)

    def setPostDrawCallback(self, *args):
        """setPostDrawCallback(self, DrawCallback cb)"""
        return _osg.Camera_setPostDrawCallback(self, *args)

    def getPostDrawCallback(self, *args):
        """
        getPostDrawCallback(self) -> DrawCallback
        getPostDrawCallback(self) -> DrawCallback
        """
        return _osg.Camera_getPostDrawCallback(self, *args)

    def setFinalDrawCallback(self, *args):
        """setFinalDrawCallback(self, DrawCallback cb)"""
        return _osg.Camera_setFinalDrawCallback(self, *args)

    def getFinalDrawCallback(self, *args):
        """
        getFinalDrawCallback(self) -> DrawCallback
        getFinalDrawCallback(self) -> DrawCallback
        """
        return _osg.Camera_getFinalDrawCallback(self, *args)

    def getDataChangeMutex(self):
        """getDataChangeMutex(self) -> OpenThreads::Mutex"""
        return _osg.Camera_getDataChangeMutex(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.Camera_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.Camera_releaseGLObjects(self, arg0)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor arg1) -> bool"""
        return _osg.Camera_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor arg1) -> bool"""
        return _osg.Camera_computeWorldToLocalMatrix(self, *args)

    def inheritCullSettings(self, *args):
        """inheritCullSettings(self, CullSettings settings, unsigned int inheritanceMask)"""
        return _osg.Camera_inheritCullSettings(self, *args)

Camera_swigregister = _osg.Camera_swigregister
Camera_swigregister(Camera)
Camera.FACE_CONTROLLED_BY_GEOMETRY_SHADER = _osg.cvar.Camera_FACE_CONTROLLED_BY_GEOMETRY_SHADER

OSG_CAMERANODE = _osg.OSG_CAMERANODE
OSG_CAMERAVIEW = _osg.OSG_CAMERAVIEW
class CameraView(Transform):
    """Proxy of C++ osg::CameraView class"""
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraView, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CameraView, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CameraView
        __init__(self, CameraView pat, CopyOp copyop = SHALLOW_COPY) -> CameraView
        __init__(self, CameraView pat) -> CameraView
        """
        this = _osg.new_CameraView(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.CameraView_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.CameraView_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.CameraView_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.CameraView_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.CameraView_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.CameraView_accept(self, *args)

    def setPosition(self, *args):
        """setPosition(self, Vec3d pos)"""
        return _osg.CameraView_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec3d"""
        return _osg.CameraView_getPosition(self)

    def setAttitude(self, *args):
        """setAttitude(self, Quat quat)"""
        return _osg.CameraView_setAttitude(self, *args)

    def getAttitude(self):
        """getAttitude(self) -> Quat"""
        return _osg.CameraView_getAttitude(self)

    def setFieldOfView(self, *args):
        """setFieldOfView(self, double fieldOfView)"""
        return _osg.CameraView_setFieldOfView(self, *args)

    def getFieldOfView(self):
        """getFieldOfView(self) -> double"""
        return _osg.CameraView_getFieldOfView(self)

    UNCONSTRAINED = _osg.CameraView_UNCONSTRAINED
    HORIZONTAL = _osg.CameraView_HORIZONTAL
    VERTICAL = _osg.CameraView_VERTICAL
    def setFieldOfViewMode(self, *args):
        """setFieldOfViewMode(self, FieldOfViewMode mode)"""
        return _osg.CameraView_setFieldOfViewMode(self, *args)

    def getFieldOfViewMode(self):
        """getFieldOfViewMode(self) -> FieldOfViewMode"""
        return _osg.CameraView_getFieldOfViewMode(self)

    def setFocalLength(self, *args):
        """setFocalLength(self, double focalLength)"""
        return _osg.CameraView_setFocalLength(self, *args)

    def getFocalLength(self):
        """getFocalLength(self) -> double"""
        return _osg.CameraView_getFocalLength(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraView_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraView_computeWorldToLocalMatrix(self, *args)

CameraView_swigregister = _osg.CameraView_swigregister
CameraView_swigregister(CameraView)

OSG_COMPUTEBOUNDSVISITOR = _osg.OSG_COMPUTEBOUNDSVISITOR
class ComputeBoundsVisitor(NodeVisitor):
    """Proxy of C++ osg::ComputeBoundsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeBoundsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeBoundsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TraversalMode traversalMode = TRAVERSE_ALL_CHILDREN) -> ComputeBoundsVisitor
        __init__(self) -> ComputeBoundsVisitor
        """
        this = _osg.new_ComputeBoundsVisitor(*args)
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ComputeBoundsVisitor_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ComputeBoundsVisitor_className(self)

    def reset(self):
        """reset(self)"""
        return _osg.ComputeBoundsVisitor_reset(self)

    def getBoundingBox(self):
        """getBoundingBox(self) -> BoundingBox"""
        return _osg.ComputeBoundsVisitor_getBoundingBox(self)

    def getPolytope(self, *args):
        """
        getPolytope(self, Polytope polytope, float margin = 0.1)
        getPolytope(self, Polytope polytope)
        """
        return _osg.ComputeBoundsVisitor_getPolytope(self, *args)

    def getBase(self, *args):
        """
        getBase(self, Polytope polytope, float margin = 0.1)
        getBase(self, Polytope polytope)
        """
        return _osg.ComputeBoundsVisitor_getBase(self, *args)

    def apply(self, *args):
        """
        apply(self, Node node)
        apply(self, Transform transform)
        apply(self, Geode geode)
        """
        return _osg.ComputeBoundsVisitor_apply(self, *args)

    def pushMatrix(self, *args):
        """pushMatrix(self, Matrix matrix)"""
        return _osg.ComputeBoundsVisitor_pushMatrix(self, *args)

    def popMatrix(self):
        """popMatrix(self)"""
        return _osg.ComputeBoundsVisitor_popMatrix(self)

    def applyDrawable(self, *args):
        """applyDrawable(self, Drawable drawable)"""
        return _osg.ComputeBoundsVisitor_applyDrawable(self, *args)

    __swig_destroy__ = _osg.delete_ComputeBoundsVisitor
    __del__ = lambda self : None;
ComputeBoundsVisitor_swigregister = _osg.ComputeBoundsVisitor_swigregister
ComputeBoundsVisitor_swigregister(ComputeBoundsVisitor)

class ImageRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Image)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ImageRef
        __init__(self, Image ptr) -> ImageRef
        __init__(self, ImageRef rp) -> ImageRef
        __init__(self, osg::observer_ptr<(osg::Image)> optr) -> ImageRef
        """
        this = _osg.new_ImageRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ImageRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Image"""
        return _osg.ImageRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Image"""
        return _osg.ImageRef___deref__(self)

    def get(self):
        """get(self) -> Image"""
        return _osg.ImageRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.ImageRef_valid(self)

    def release(self):
        """release(self) -> Image"""
        return _osg.ImageRef_release(self)

    def swap(self, *args):
        """swap(self, ImageRef rp)"""
        return _osg.ImageRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ImageRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ImageRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ImageRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ImageRef_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.ImageRef_className(self)

    def getDataPointer(self):
        """getDataPointer(self) -> GLvoid"""
        return _osg.ImageRef_getDataPointer(self)

    def getTotalDataSize(self):
        """getTotalDataSize(self) -> unsigned int"""
        return _osg.ImageRef_getTotalDataSize(self)

    def compare(self, *args):
        """compare(self, Image rhs) -> int"""
        return _osg.ImageRef_compare(self, *args)

    def setFileName(self, *args):
        """setFileName(self, string fileName)"""
        return _osg.ImageRef_setFileName(self, *args)

    def getFileName(self):
        """getFileName(self) -> string"""
        return _osg.ImageRef_getFileName(self)

    def setWriteHint(self, *args):
        """setWriteHint(self, WriteHint writeHint)"""
        return _osg.ImageRef_setWriteHint(self, *args)

    def getWriteHint(self):
        """getWriteHint(self) -> WriteHint"""
        return _osg.ImageRef_getWriteHint(self)

    def setAllocationMode(self, *args):
        """setAllocationMode(self, AllocationMode mode)"""
        return _osg.ImageRef_setAllocationMode(self, *args)

    def getAllocationMode(self):
        """getAllocationMode(self) -> AllocationMode"""
        return _osg.ImageRef_getAllocationMode(self)

    def allocateImage(self, *args):
        """
        allocateImage(self, int s, int t, int r, GLenum pixelFormat, GLenum type, 
            int packing = 1)
        allocateImage(self, int s, int t, int r, GLenum pixelFormat, GLenum type)
        """
        return _osg.ImageRef_allocateImage(self, *args)

    def setImage(self, *args):
        """
        setImage(self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, 
            GLenum type, unsigned char data, 
            AllocationMode mode, int packing = 1)
        setImage(self, int s, int t, int r, GLint internalTextureformat, GLenum pixelFormat, 
            GLenum type, unsigned char data, 
            AllocationMode mode)
        """
        return _osg.ImageRef_setImage(self, *args)

    def readPixels(self, *args):
        """
        readPixels(self, int x, int y, int width, int height, GLenum pixelFormat, 
            GLenum type)
        """
        return _osg.ImageRef_readPixels(self, *args)

    def readImageFromCurrentTexture(self, *args):
        """
        readImageFromCurrentTexture(self, unsigned int contextID, bool copyMipMapsIfAvailable, 
            GLenum type = 0x1401)
        readImageFromCurrentTexture(self, unsigned int contextID, bool copyMipMapsIfAvailable)
        """
        return _osg.ImageRef_readImageFromCurrentTexture(self, *args)

    def scaleImage(self, *args):
        """
        scaleImage(self, int s, int t, int r)
        scaleImage(self, int s, int t, int r, GLenum newDataType)
        """
        return _osg.ImageRef_scaleImage(self, *args)

    def copySubImage(self, *args):
        """copySubImage(self, int s_offset, int t_offset, int r_offset, Image source)"""
        return _osg.ImageRef_copySubImage(self, *args)

    def setOrigin(self, *args):
        """setOrigin(self, Origin origin)"""
        return _osg.ImageRef_setOrigin(self, *args)

    def getOrigin(self):
        """getOrigin(self) -> Origin"""
        return _osg.ImageRef_getOrigin(self)

    def s(self):
        """s(self) -> int"""
        return _osg.ImageRef_s(self)

    def t(self):
        """t(self) -> int"""
        return _osg.ImageRef_t(self)

    def r(self):
        """r(self) -> int"""
        return _osg.ImageRef_r(self)

    def setInternalTextureFormat(self, *args):
        """setInternalTextureFormat(self, GLint internalFormat)"""
        return _osg.ImageRef_setInternalTextureFormat(self, *args)

    def getInternalTextureFormat(self):
        """getInternalTextureFormat(self) -> GLint"""
        return _osg.ImageRef_getInternalTextureFormat(self)

    def setPixelFormat(self, *args):
        """setPixelFormat(self, GLenum pixelFormat)"""
        return _osg.ImageRef_setPixelFormat(self, *args)

    def getPixelFormat(self):
        """getPixelFormat(self) -> GLenum"""
        return _osg.ImageRef_getPixelFormat(self)

    def setDataType(self, *args):
        """setDataType(self, GLenum dataType)"""
        return _osg.ImageRef_setDataType(self, *args)

    def getDataType(self):
        """getDataType(self) -> GLenum"""
        return _osg.ImageRef_getDataType(self)

    def setPacking(self, *args):
        """setPacking(self, unsigned int packing)"""
        return _osg.ImageRef_setPacking(self, *args)

    def getPacking(self):
        """getPacking(self) -> unsigned int"""
        return _osg.ImageRef_getPacking(self)

    def isCompressed(self):
        """isCompressed(self) -> bool"""
        return _osg.ImageRef_isCompressed(self)

    def setPixelAspectRatio(self, *args):
        """setPixelAspectRatio(self, float pixelAspectRatio)"""
        return _osg.ImageRef_setPixelAspectRatio(self, *args)

    def getPixelAspectRatio(self):
        """getPixelAspectRatio(self) -> float"""
        return _osg.ImageRef_getPixelAspectRatio(self)

    def getPixelSizeInBits(self):
        """getPixelSizeInBits(self) -> unsigned int"""
        return _osg.ImageRef_getPixelSizeInBits(self)

    def getRowSizeInBytes(self):
        """getRowSizeInBytes(self) -> unsigned int"""
        return _osg.ImageRef_getRowSizeInBytes(self)

    def getImageSizeInBytes(self):
        """getImageSizeInBytes(self) -> unsigned int"""
        return _osg.ImageRef_getImageSizeInBytes(self)

    def getTotalSizeInBytes(self):
        """getTotalSizeInBytes(self) -> unsigned int"""
        return _osg.ImageRef_getTotalSizeInBytes(self)

    def getTotalSizeInBytesIncludingMipmaps(self):
        """getTotalSizeInBytesIncludingMipmaps(self) -> unsigned int"""
        return _osg.ImageRef_getTotalSizeInBytesIncludingMipmaps(self)

    def data(self, *args):
        """
        data(self) -> unsigned char
        data(self) -> unsigned char
        data(self, int column, int row = 0, int image = 0) -> unsigned char
        data(self, int column, int row = 0) -> unsigned char
        data(self, int column) -> unsigned char
        data(self, int column, int row = 0, int image = 0) -> unsigned char
        data(self, int column, int row = 0) -> unsigned char
        data(self, int column) -> unsigned char
        """
        return _osg.ImageRef_data(self, *args)

    def getColor(self, *args):
        """
        getColor(self, unsigned int s, unsigned int t = 0, unsigned int r = 0) -> Vec4
        getColor(self, unsigned int s, unsigned int t = 0) -> Vec4
        getColor(self, unsigned int s) -> Vec4
        getColor(self, Vec2 texcoord) -> Vec4
        getColor(self, Vec3 texcoord) -> Vec4
        """
        return _osg.ImageRef_getColor(self, *args)

    def flipHorizontal(self):
        """flipHorizontal(self)"""
        return _osg.ImageRef_flipHorizontal(self)

    def flipVertical(self):
        """flipVertical(self)"""
        return _osg.ImageRef_flipVertical(self)

    def ensureValidSizeForTexturing(self, *args):
        """ensureValidSizeForTexturing(self, GLint maxTextureSize)"""
        return _osg.ImageRef_ensureValidSizeForTexturing(self, *args)

    def isPackedType(self, *args):
        """isPackedType(self, GLenum type) -> bool"""
        return _osg.ImageRef_isPackedType(self, *args)

    def computePixelFormat(self, *args):
        """computePixelFormat(self, GLenum pixelFormat) -> GLenum"""
        return _osg.ImageRef_computePixelFormat(self, *args)

    def computeFormatDataType(self, *args):
        """computeFormatDataType(self, GLenum pixelFormat) -> GLenum"""
        return _osg.ImageRef_computeFormatDataType(self, *args)

    def computeNumComponents(self, *args):
        """computeNumComponents(self, GLenum pixelFormat) -> unsigned int"""
        return _osg.ImageRef_computeNumComponents(self, *args)

    def computePixelSizeInBits(self, *args):
        """computePixelSizeInBits(self, GLenum pixelFormat, GLenum type) -> unsigned int"""
        return _osg.ImageRef_computePixelSizeInBits(self, *args)

    def computeRowWidthInBytes(self, *args):
        """computeRowWidthInBytes(self, int width, GLenum pixelFormat, GLenum type, int packing) -> unsigned int"""
        return _osg.ImageRef_computeRowWidthInBytes(self, *args)

    def computeNearestPowerOfTwo(self, *args):
        """
        computeNearestPowerOfTwo(self, int s, float bias = 0.5) -> int
        computeNearestPowerOfTwo(self, int s) -> int
        """
        return _osg.ImageRef_computeNearestPowerOfTwo(self, *args)

    def computeNumberOfMipmapLevels(self, *args):
        """
        computeNumberOfMipmapLevels(self, int s, int t = 1, int r = 1) -> int
        computeNumberOfMipmapLevels(self, int s, int t = 1) -> int
        computeNumberOfMipmapLevels(self, int s) -> int
        """
        return _osg.ImageRef_computeNumberOfMipmapLevels(self, *args)

    def isMipmap(self):
        """isMipmap(self) -> bool"""
        return _osg.ImageRef_isMipmap(self)

    def getNumMipmapLevels(self):
        """getNumMipmapLevels(self) -> unsigned int"""
        return _osg.ImageRef_getNumMipmapLevels(self)

    def setMipmapLevels(self, *args):
        """setMipmapLevels(self, MipmapDataType mipmapDataVector)"""
        return _osg.ImageRef_setMipmapLevels(self, *args)

    def getMipmapLevels(self):
        """getMipmapLevels(self) -> MipmapDataType"""
        return _osg.ImageRef_getMipmapLevels(self)

    def getMipmapOffset(self, *args):
        """getMipmapOffset(self, unsigned int mipmapLevel) -> unsigned int"""
        return _osg.ImageRef_getMipmapOffset(self, *args)

    def getMipmapData(self, *args):
        """
        getMipmapData(self, unsigned int mipmapLevel) -> unsigned char
        getMipmapData(self, unsigned int mipmapLevel) -> unsigned char
        """
        return _osg.ImageRef_getMipmapData(self, *args)

    def isImageTranslucent(self):
        """isImageTranslucent(self) -> bool"""
        return _osg.ImageRef_isImageTranslucent(self)

    def setPixelBufferObject(self, *args):
        """setPixelBufferObject(self, PixelBufferObject buffer)"""
        return _osg.ImageRef_setPixelBufferObject(self, *args)

    def getPixelBufferObject(self, *args):
        """
        getPixelBufferObject(self) -> PixelBufferObject
        getPixelBufferObject(self) -> PixelBufferObject
        """
        return _osg.ImageRef_getPixelBufferObject(self, *args)

    def requiresUpdateCall(self):
        """requiresUpdateCall(self) -> bool"""
        return _osg.ImageRef_requiresUpdateCall(self)

    def update(self, *args):
        """update(self, NodeVisitor arg0)"""
        return _osg.ImageRef_update(self, *args)

    def sendFocusHint(self, *args):
        """sendFocusHint(self, bool arg0) -> bool"""
        return _osg.ImageRef_sendFocusHint(self, *args)

    def sendPointerEvent(self, *args):
        """sendPointerEvent(self, int arg0, int arg1, int arg2) -> bool"""
        return _osg.ImageRef_sendPointerEvent(self, *args)

    def sendKeyEvent(self, *args):
        """sendKeyEvent(self, int arg0, bool arg1) -> bool"""
        return _osg.ImageRef_sendKeyEvent(self, *args)

    def setFrameLastRendered(self, *args):
        """setFrameLastRendered(self, FrameStamp arg0)"""
        return _osg.ImageRef_setFrameLastRendered(self, *args)

    def setBufferObject(self, *args):
        """setBufferObject(self, BufferObject bufferObject)"""
        return _osg.ImageRef_setBufferObject(self, *args)

    def getBufferObject(self, *args):
        """
        getBufferObject(self) -> BufferObject
        getBufferObject(self) -> BufferObject
        """
        return _osg.ImageRef_getBufferObject(self, *args)

    def setBufferIndex(self, *args):
        """setBufferIndex(self, unsigned int index)"""
        return _osg.ImageRef_setBufferIndex(self, *args)

    def getBufferIndex(self):
        """getBufferIndex(self) -> unsigned int"""
        return _osg.ImageRef_getBufferIndex(self)

    def getGLBufferObject(self, *args):
        """getGLBufferObject(self, unsigned int contextID) -> GLBufferObject"""
        return _osg.ImageRef_getGLBufferObject(self, *args)

    def getOrCreateGLBufferObject(self, *args):
        """getOrCreateGLBufferObject(self, unsigned int contextID) -> GLBufferObject"""
        return _osg.ImageRef_getOrCreateGLBufferObject(self, *args)

    def setModifiedCallback(self, *args):
        """setModifiedCallback(self, ModifiedCallback md)"""
        return _osg.ImageRef_setModifiedCallback(self, *args)

    def getModifiedCallback(self, *args):
        """
        getModifiedCallback(self) -> ModifiedCallback
        getModifiedCallback(self) -> ModifiedCallback
        """
        return _osg.ImageRef_getModifiedCallback(self, *args)

    def dirty(self):
        """dirty(self)"""
        return _osg.ImageRef_dirty(self)

    def setModifiedCount(self, *args):
        """setModifiedCount(self, unsigned int value)"""
        return _osg.ImageRef_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(self) -> unsigned int"""
        return _osg.ImageRef_getModifiedCount(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.ImageRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.ImageRef_releaseGLObjects(self, state)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.ImageRef_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.ImageRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.ImageRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.ImageRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.ImageRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.ImageRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.ImageRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.ImageRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.ImageRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.ImageRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.ImageRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.ImageRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.ImageRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.ImageRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.ImageRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.ImageRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.ImageRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.ImageRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.ImageRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.ImageRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.ImageRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.ImageRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.ImageRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.ImageRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.ImageRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.ImageRef_getDeleteHandler(self)

ImageRef_swigregister = _osg.ImageRef_swigregister
ImageRef_swigregister(ImageRef)

class TextureRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Texture)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextureRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TextureRef
        __init__(self, Texture ptr) -> TextureRef
        __init__(self, TextureRef rp) -> TextureRef
        __init__(self, osg::observer_ptr<(osg::Texture)> optr) -> TextureRef
        """
        this = _osg.new_TextureRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_TextureRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Texture"""
        return _osg.TextureRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Texture"""
        return _osg.TextureRef___deref__(self)

    def get(self):
        """get(self) -> Texture"""
        return _osg.TextureRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.TextureRef_valid(self)

    def release(self):
        """release(self) -> Texture"""
        return _osg.TextureRef_release(self)

    def swap(self, *args):
        """swap(self, TextureRef rp)"""
        return _osg.TextureRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TextureRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TextureRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TextureRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TextureRef_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.TextureRef_className(self)

    def asTexture(self, *args):
        """
        asTexture(self) -> Texture
        asTexture(self) -> Texture
        """
        return _osg.TextureRef_asTexture(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.TextureRef_getType(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.TextureRef_isTextureAttribute(self)

    def getTextureTarget(self):
        """getTextureTarget(self) -> GLenum"""
        return _osg.TextureRef_getTextureTarget(self)

    def getTextureWidth(self):
        """getTextureWidth(self) -> int"""
        return _osg.TextureRef_getTextureWidth(self)

    def getTextureHeight(self):
        """getTextureHeight(self) -> int"""
        return _osg.TextureRef_getTextureHeight(self)

    def getTextureDepth(self):
        """getTextureDepth(self) -> int"""
        return _osg.TextureRef_getTextureDepth(self)

    def setWrap(self, *args):
        """setWrap(self, WrapParameter which, WrapMode wrap)"""
        return _osg.TextureRef_setWrap(self, *args)

    def getWrap(self, *args):
        """getWrap(self, WrapParameter which) -> WrapMode"""
        return _osg.TextureRef_getWrap(self, *args)

    def setBorderColor(self, *args):
        """setBorderColor(self, Vec4d color)"""
        return _osg.TextureRef_setBorderColor(self, *args)

    def getBorderColor(self):
        """getBorderColor(self) -> Vec4d"""
        return _osg.TextureRef_getBorderColor(self)

    def setBorderWidth(self, *args):
        """setBorderWidth(self, GLint width)"""
        return _osg.TextureRef_setBorderWidth(self, *args)

    def getBorderWidth(self):
        """getBorderWidth(self) -> GLint"""
        return _osg.TextureRef_getBorderWidth(self)

    def setFilter(self, *args):
        """setFilter(self, FilterParameter which, FilterMode filter)"""
        return _osg.TextureRef_setFilter(self, *args)

    def getFilter(self, *args):
        """getFilter(self, FilterParameter which) -> FilterMode"""
        return _osg.TextureRef_getFilter(self, *args)

    def setMaxAnisotropy(self, *args):
        """setMaxAnisotropy(self, float anis)"""
        return _osg.TextureRef_setMaxAnisotropy(self, *args)

    def getMaxAnisotropy(self):
        """getMaxAnisotropy(self) -> float"""
        return _osg.TextureRef_getMaxAnisotropy(self)

    def setUseHardwareMipMapGeneration(self, *args):
        """setUseHardwareMipMapGeneration(self, bool useHardwareMipMapGeneration)"""
        return _osg.TextureRef_setUseHardwareMipMapGeneration(self, *args)

    def getUseHardwareMipMapGeneration(self):
        """getUseHardwareMipMapGeneration(self) -> bool"""
        return _osg.TextureRef_getUseHardwareMipMapGeneration(self)

    def setUnRefImageDataAfterApply(self, *args):
        """setUnRefImageDataAfterApply(self, bool flag)"""
        return _osg.TextureRef_setUnRefImageDataAfterApply(self, *args)

    def getUnRefImageDataAfterApply(self):
        """getUnRefImageDataAfterApply(self) -> bool"""
        return _osg.TextureRef_getUnRefImageDataAfterApply(self)

    def setClientStorageHint(self, *args):
        """setClientStorageHint(self, bool flag)"""
        return _osg.TextureRef_setClientStorageHint(self, *args)

    def getClientStorageHint(self):
        """getClientStorageHint(self) -> bool"""
        return _osg.TextureRef_getClientStorageHint(self)

    def setResizeNonPowerOfTwoHint(self, *args):
        """setResizeNonPowerOfTwoHint(self, bool flag)"""
        return _osg.TextureRef_setResizeNonPowerOfTwoHint(self, *args)

    def getResizeNonPowerOfTwoHint(self):
        """getResizeNonPowerOfTwoHint(self) -> bool"""
        return _osg.TextureRef_getResizeNonPowerOfTwoHint(self)

    def setInternalFormatMode(self, *args):
        """setInternalFormatMode(self, InternalFormatMode mode)"""
        return _osg.TextureRef_setInternalFormatMode(self, *args)

    def getInternalFormatMode(self):
        """getInternalFormatMode(self) -> InternalFormatMode"""
        return _osg.TextureRef_getInternalFormatMode(self)

    def setInternalFormat(self, *args):
        """setInternalFormat(self, GLint internalFormat)"""
        return _osg.TextureRef_setInternalFormat(self, *args)

    def getInternalFormat(self):
        """getInternalFormat(self) -> GLint"""
        return _osg.TextureRef_getInternalFormat(self)

    def isCompressedInternalFormat(self, *args):
        """
        isCompressedInternalFormat(self) -> bool
        isCompressedInternalFormat(self, GLint internalFormat) -> bool
        """
        return _osg.TextureRef_isCompressedInternalFormat(self, *args)

    def setSourceFormat(self, *args):
        """setSourceFormat(self, GLenum sourceFormat)"""
        return _osg.TextureRef_setSourceFormat(self, *args)

    def getSourceFormat(self):
        """getSourceFormat(self) -> GLenum"""
        return _osg.TextureRef_getSourceFormat(self)

    def setSourceType(self, *args):
        """setSourceType(self, GLenum sourceType)"""
        return _osg.TextureRef_setSourceType(self, *args)

    def getSourceType(self):
        """getSourceType(self) -> GLenum"""
        return _osg.TextureRef_getSourceType(self)

    def getInternalFormatType(self):
        """getInternalFormatType(self) -> InternalFormatType"""
        return _osg.TextureRef_getInternalFormatType(self)

    def getTextureObject(self, *args):
        """getTextureObject(self, unsigned int contextID) -> TextureObject"""
        return _osg.TextureRef_getTextureObject(self, *args)

    def setTextureObject(self, *args):
        """setTextureObject(self, unsigned int contextID, TextureObject to)"""
        return _osg.TextureRef_setTextureObject(self, *args)

    def dirtyTextureObject(self):
        """dirtyTextureObject(self)"""
        return _osg.TextureRef_dirtyTextureObject(self)

    def areAllTextureObjectsLoaded(self):
        """areAllTextureObjectsLoaded(self) -> bool"""
        return _osg.TextureRef_areAllTextureObjectsLoaded(self)

    def getTextureParameterDirty(self, *args):
        """getTextureParameterDirty(self, unsigned int contextID) -> unsigned int"""
        return _osg.TextureRef_getTextureParameterDirty(self, *args)

    def dirtyTextureParameters(self):
        """dirtyTextureParameters(self)"""
        return _osg.TextureRef_dirtyTextureParameters(self)

    def allocateMipmapLevels(self):
        """allocateMipmapLevels(self)"""
        return _osg.TextureRef_allocateMipmapLevels(self)

    def setShadowComparison(self, *args):
        """setShadowComparison(self, bool flag)"""
        return _osg.TextureRef_setShadowComparison(self, *args)

    def getShadowComparison(self):
        """getShadowComparison(self) -> bool"""
        return _osg.TextureRef_getShadowComparison(self)

    def setShadowCompareFunc(self, *args):
        """setShadowCompareFunc(self, ShadowCompareFunc func)"""
        return _osg.TextureRef_setShadowCompareFunc(self, *args)

    def getShadowCompareFunc(self):
        """getShadowCompareFunc(self) -> ShadowCompareFunc"""
        return _osg.TextureRef_getShadowCompareFunc(self)

    def setShadowTextureMode(self, *args):
        """setShadowTextureMode(self, ShadowTextureMode mode)"""
        return _osg.TextureRef_setShadowTextureMode(self, *args)

    def getShadowTextureMode(self):
        """getShadowTextureMode(self) -> ShadowTextureMode"""
        return _osg.TextureRef_getShadowTextureMode(self)

    def setShadowAmbient(self, *args):
        """setShadowAmbient(self, float shadow_ambient)"""
        return _osg.TextureRef_setShadowAmbient(self, *args)

    def getShadowAmbient(self):
        """getShadowAmbient(self) -> float"""
        return _osg.TextureRef_getShadowAmbient(self)

    def setImage(self, *args):
        """setImage(self, unsigned int face, Image image)"""
        return _osg.TextureRef_setImage(self, *args)

    def getImage(self, *args):
        """
        getImage(self, unsigned int face) -> Image
        getImage(self, unsigned int face) -> Image
        """
        return _osg.TextureRef_getImage(self, *args)

    def getNumImages(self):
        """getNumImages(self) -> unsigned int"""
        return _osg.TextureRef_getNumImages(self)

    def setReadPBuffer(self, *args):
        """setReadPBuffer(self, GraphicsContext context)"""
        return _osg.TextureRef_setReadPBuffer(self, *args)

    def getReadPBuffer(self, *args):
        """
        getReadPBuffer(self) -> GraphicsContext
        getReadPBuffer(self) -> GraphicsContext
        """
        return _osg.TextureRef_getReadPBuffer(self, *args)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.TextureRef_apply(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State state)"""
        return _osg.TextureRef_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.TextureRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, state = None):
        """
        releaseGLObjects(self, State state = None)
        releaseGLObjects(self)
        """
        return _osg.TextureRef_releaseGLObjects(self, state)

    def getCompressedSize(self, *args):
        """
        getCompressedSize(self, GLenum internalFormat, GLint width, GLint height, GLint depth, 
            GLint blockSize, GLint size)
        """
        return _osg.TextureRef_getCompressedSize(self, *args)

    def applyTexImage2D_load(self, *args):
        """
        applyTexImage2D_load(self, State state, GLenum target, Image image, GLsizei width, 
            GLsizei height, GLsizei numMipmapLevels)
        """
        return _osg.TextureRef_applyTexImage2D_load(self, *args)

    def applyTexImage2D_subload(self, *args):
        """
        applyTexImage2D_subload(self, State state, GLenum target, Image image, GLsizei width, 
            GLsizei height, GLint inInternalFormat, 
            GLsizei numMipmapLevels)
        """
        return _osg.TextureRef_applyTexImage2D_subload(self, *args)

    def generateTextureObject(self, *args):
        """
        generateTextureObject(self, Texture texture, unsigned int contextID, GLenum target) -> TextureObject
        generateTextureObject(self, Texture texture, unsigned int contextID, GLenum target, 
            GLint numMipmapLevels, GLenum internalFormat, 
            GLsizei width, GLsizei height, GLsizei depth, 
            GLint border) -> TextureObject
        """
        return _osg.TextureRef_generateTextureObject(self, *args)

    def deleteAllTextureObjects(self, *args):
        """deleteAllTextureObjects(self, unsigned int contextID)"""
        return _osg.TextureRef_deleteAllTextureObjects(self, *args)

    def discardAllTextureObjects(self, *args):
        """discardAllTextureObjects(self, unsigned int contextID)"""
        return _osg.TextureRef_discardAllTextureObjects(self, *args)

    def flushAllDeletedTextureObjects(self, *args):
        """flushAllDeletedTextureObjects(self, unsigned int contextID)"""
        return _osg.TextureRef_flushAllDeletedTextureObjects(self, *args)

    def discardAllDeletedTextureObjects(self, *args):
        """discardAllDeletedTextureObjects(self, unsigned int contextID)"""
        return _osg.TextureRef_discardAllDeletedTextureObjects(self, *args)

    def flushDeletedTextureObjects(self, *args):
        """flushDeletedTextureObjects(self, unsigned int contextID, double currentTime, double availableTime)"""
        return _osg.TextureRef_flushDeletedTextureObjects(self, *args)

    def releaseTextureObject(self, *args):
        """releaseTextureObject(self, unsigned int contextID, TextureObject to)"""
        return _osg.TextureRef_releaseTextureObject(self, *args)

    def getMember(self):
        """getMember(self) -> unsigned int"""
        return _osg.TextureRef_getMember(self)

    def getTypeMemberPair(self):
        """getTypeMemberPair(self) -> TypeMemberPair"""
        return _osg.TextureRef_getTypeMemberPair(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.TextureRef_compare(self, *args)

    def __lt__(self, *args):
        """__lt__(self, StateAttribute rhs) -> bool"""
        return _osg.TextureRef___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, StateAttribute rhs) -> bool"""
        return _osg.TextureRef___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, StateAttribute rhs) -> bool"""
        return _osg.TextureRef___ne__(self, *args)

    def getParents(self):
        """getParents(self) -> ParentList"""
        return _osg.TextureRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> StateSet
        getParent(self, unsigned int i) -> StateSet
        """
        return _osg.TextureRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.TextureRef_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(self, ShaderComponent sc)"""
        return _osg.TextureRef_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(self) -> ShaderComponent
        getShaderComponent(self) -> ShaderComponent
        """
        return _osg.TextureRef_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(self, State arg0) -> bool"""
        return _osg.TextureRef_checkValidityOfAssociatedModes(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.TextureRef_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.TextureRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.TextureRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.TextureRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.TextureRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.TextureRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.TextureRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.TextureRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.TextureRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.TextureRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.TextureRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.TextureRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.TextureRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.TextureRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.TextureRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.TextureRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.TextureRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.TextureRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.TextureRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.TextureRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.TextureRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.TextureRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.TextureRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.TextureRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.TextureRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.TextureRef_getDeleteHandler(self)

TextureRef_swigregister = _osg.TextureRef_swigregister
TextureRef_swigregister(TextureRef)

class GroupRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Group)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroupRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GroupRef
        __init__(self, Group ptr) -> GroupRef
        __init__(self, GroupRef rp) -> GroupRef
        __init__(self, osg::observer_ptr<(osg::Group)> optr) -> GroupRef
        """
        this = _osg.new_GroupRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_GroupRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Group"""
        return _osg.GroupRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Group"""
        return _osg.GroupRef___deref__(self)

    def get(self):
        """get(self) -> Group"""
        return _osg.GroupRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.GroupRef_valid(self)

    def release(self):
        """release(self) -> Group"""
        return _osg.GroupRef_release(self)

    def swap(self, *args):
        """swap(self, GroupRef rp)"""
        return _osg.GroupRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.GroupRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.GroupRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.GroupRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.GroupRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.GroupRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.GroupRef_accept(self, *args)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.GroupRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.GroupRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.GroupRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.GroupRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.GroupRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.GroupRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.GroupRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.GroupRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.GroupRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.GroupRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.GroupRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.GroupRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.GroupRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.GroupRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.GroupRef_releaseGLObjects(self, arg0)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.GroupRef_computeBound(self)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.GroupRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.GroupRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.GroupRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.GroupRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.GroupRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.GroupRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.GroupRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.GroupRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.GroupRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.GroupRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.GroupRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.GroupRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.GroupRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.GroupRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.GroupRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.GroupRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.GroupRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.GroupRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.GroupRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.GroupRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.GroupRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.GroupRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.GroupRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.GroupRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.GroupRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.GroupRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.GroupRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.GroupRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.GroupRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.GroupRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.GroupRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.GroupRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.GroupRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.GroupRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.GroupRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.GroupRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.GroupRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.GroupRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.GroupRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.GroupRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.GroupRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.GroupRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.GroupRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.GroupRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.GroupRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.GroupRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.GroupRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.GroupRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.GroupRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.GroupRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.GroupRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.GroupRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.GroupRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.GroupRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.GroupRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.GroupRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.GroupRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.GroupRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.GroupRef_getDeleteHandler(self)

GroupRef_swigregister = _osg.GroupRef_swigregister
GroupRef_swigregister(GroupRef)

class NodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Node)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> NodeRef
        __init__(self, Node ptr) -> NodeRef
        __init__(self, NodeRef rp) -> NodeRef
        __init__(self, osg::observer_ptr<(osg::Node)> optr) -> NodeRef
        """
        this = _osg.new_NodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_NodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Node"""
        return _osg.NodeRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Node"""
        return _osg.NodeRef___deref__(self)

    def get(self):
        """get(self) -> Node"""
        return _osg.NodeRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.NodeRef_valid(self)

    def release(self):
        """release(self) -> Node"""
        return _osg.NodeRef_release(self)

    def swap(self, *args):
        """swap(self, NodeRef rp)"""
        return _osg.NodeRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.NodeRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.NodeRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.NodeRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.NodeRef_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.NodeRef_className(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.NodeRef_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.NodeRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.NodeRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.NodeRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.NodeRef_asTerrain(self, *args)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.NodeRef_accept(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.NodeRef_ascend(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor arg0)"""
        return _osg.NodeRef_traverse(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.NodeRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.NodeRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.NodeRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.NodeRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.NodeRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.NodeRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.NodeRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.NodeRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.NodeRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.NodeRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.NodeRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.NodeRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.NodeRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.NodeRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.NodeRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.NodeRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.NodeRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.NodeRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.NodeRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.NodeRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.NodeRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.NodeRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.NodeRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.NodeRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.NodeRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.NodeRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.NodeRef_getBound(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.NodeRef_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.NodeRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osg.NodeRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.NodeRef_releaseGLObjects(self, arg0)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.NodeRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.NodeRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.NodeRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.NodeRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.NodeRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.NodeRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.NodeRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.NodeRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.NodeRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.NodeRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.NodeRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.NodeRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.NodeRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.NodeRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.NodeRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.NodeRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.NodeRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.NodeRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.NodeRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.NodeRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.NodeRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.NodeRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.NodeRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.NodeRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.NodeRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.NodeRef_getDeleteHandler(self)

NodeRef_swigregister = _osg.NodeRef_swigregister
NodeRef_swigregister(NodeRef)

class TransformRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Transform)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransformRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TransformRef
        __init__(self, Transform ptr) -> TransformRef
        __init__(self, TransformRef rp) -> TransformRef
        __init__(self, osg::observer_ptr<(osg::Transform)> optr) -> TransformRef
        """
        this = _osg.new_TransformRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_TransformRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Transform"""
        return _osg.TransformRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Transform"""
        return _osg.TransformRef___deref__(self)

    def get(self):
        """get(self) -> Transform"""
        return _osg.TransformRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.TransformRef_valid(self)

    def release(self):
        """release(self) -> Transform"""
        return _osg.TransformRef_release(self)

    def swap(self, *args):
        """swap(self, TransformRef rp)"""
        return _osg.TransformRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.TransformRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.TransformRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.TransformRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.TransformRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.TransformRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.TransformRef_accept(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.TransformRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.TransformRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.TransformRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.TransformRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.TransformRef_getReferenceFrame(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.TransformRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.TransformRef_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.TransformRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.TransformRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.TransformRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.TransformRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.TransformRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.TransformRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.TransformRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.TransformRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.TransformRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.TransformRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.TransformRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.TransformRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.TransformRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.TransformRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.TransformRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.TransformRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.TransformRef_asProxyNode(self)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.TransformRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.TransformRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.TransformRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.TransformRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.TransformRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.TransformRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.TransformRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.TransformRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.TransformRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.TransformRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.TransformRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.TransformRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.TransformRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.TransformRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.TransformRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.TransformRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.TransformRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.TransformRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.TransformRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.TransformRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.TransformRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.TransformRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.TransformRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.TransformRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.TransformRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.TransformRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.TransformRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.TransformRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.TransformRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.TransformRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.TransformRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.TransformRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.TransformRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.TransformRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.TransformRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.TransformRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.TransformRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.TransformRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.TransformRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.TransformRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.TransformRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.TransformRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.TransformRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.TransformRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.TransformRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.TransformRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.TransformRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.TransformRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.TransformRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.TransformRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.TransformRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.TransformRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.TransformRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.TransformRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.TransformRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.TransformRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.TransformRef_getDeleteHandler(self)

TransformRef_swigregister = _osg.TransformRef_swigregister
TransformRef_swigregister(TransformRef)

class GeodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Geode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GeodeRef
        __init__(self, Geode ptr) -> GeodeRef
        __init__(self, GeodeRef rp) -> GeodeRef
        __init__(self, osg::observer_ptr<(osg::Geode)> optr) -> GeodeRef
        """
        this = _osg.new_GeodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_GeodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Geode"""
        return _osg.GeodeRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Geode"""
        return _osg.GeodeRef___deref__(self)

    def get(self):
        """get(self) -> Geode"""
        return _osg.GeodeRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.GeodeRef_valid(self)

    def release(self):
        """release(self) -> Geode"""
        return _osg.GeodeRef_release(self)

    def swap(self, *args):
        """swap(self, GeodeRef rp)"""
        return _osg.GeodeRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.GeodeRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.GeodeRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.GeodeRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.GeodeRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.GeodeRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.GeodeRef_accept(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.GeodeRef_asGeode(self, *args)

    def addDrawable(self, *args):
        """addDrawable(self, Drawable drawable) -> bool"""
        return _osg.GeodeRef_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(self, Drawable drawable) -> bool"""
        return _osg.GeodeRef_removeDrawable(self, *args)

    def removeDrawables(self, *args):
        """
        removeDrawables(self, unsigned int i, unsigned int numDrawablesToRemove = 1) -> bool
        removeDrawables(self, unsigned int i) -> bool
        """
        return _osg.GeodeRef_removeDrawables(self, *args)

    def replaceDrawable(self, *args):
        """replaceDrawable(self, Drawable origDraw, Drawable newDraw) -> bool"""
        return _osg.GeodeRef_replaceDrawable(self, *args)

    def setDrawable(self, *args):
        """setDrawable(self, unsigned int i, Drawable drawable) -> bool"""
        return _osg.GeodeRef_setDrawable(self, *args)

    def getNumDrawables(self):
        """getNumDrawables(self) -> unsigned int"""
        return _osg.GeodeRef_getNumDrawables(self)

    def getDrawable(self, *args):
        """
        getDrawable(self, unsigned int i) -> Drawable
        getDrawable(self, unsigned int i) -> Drawable
        """
        return _osg.GeodeRef_getDrawable(self, *args)

    def containsDrawable(self, *args):
        """containsDrawable(self, Drawable gset) -> bool"""
        return _osg.GeodeRef_containsDrawable(self, *args)

    def getDrawableIndex(self, *args):
        """getDrawableIndex(self, Drawable drawable) -> unsigned int"""
        return _osg.GeodeRef_getDrawableIndex(self, *args)

    def getDrawableList(self):
        """getDrawableList(self) -> DrawableList"""
        return _osg.GeodeRef_getDrawableList(self)

    def compileDrawables(self, *args):
        """compileDrawables(self, RenderInfo renderInfo)"""
        return _osg.GeodeRef_compileDrawables(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(self) -> BoundingBox"""
        return _osg.GeodeRef_getBoundingBox(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.GeodeRef_computeBound(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.GeodeRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.GeodeRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.GeodeRef_releaseGLObjects(self, arg0)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.GeodeRef_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.GeodeRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.GeodeRef_asSwitch(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.GeodeRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.GeodeRef_ascend(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor arg0)"""
        return _osg.GeodeRef_traverse(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.GeodeRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.GeodeRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.GeodeRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.GeodeRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.GeodeRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.GeodeRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.GeodeRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.GeodeRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.GeodeRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.GeodeRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.GeodeRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.GeodeRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.GeodeRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.GeodeRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.GeodeRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.GeodeRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.GeodeRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.GeodeRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.GeodeRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.GeodeRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.GeodeRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.GeodeRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.GeodeRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.GeodeRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.GeodeRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.GeodeRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.GeodeRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.GeodeRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.GeodeRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.GeodeRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.GeodeRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.GeodeRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.GeodeRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.GeodeRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.GeodeRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.GeodeRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.GeodeRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.GeodeRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.GeodeRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.GeodeRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.GeodeRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.GeodeRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.GeodeRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.GeodeRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.GeodeRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.GeodeRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.GeodeRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.GeodeRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.GeodeRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.GeodeRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.GeodeRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.GeodeRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.GeodeRef_getDeleteHandler(self)

GeodeRef_swigregister = _osg.GeodeRef_swigregister
GeodeRef_swigregister(GeodeRef)

class BillboardRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Billboard)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BillboardRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BillboardRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BillboardRef
        __init__(self, Billboard ptr) -> BillboardRef
        __init__(self, BillboardRef rp) -> BillboardRef
        __init__(self, osg::observer_ptr<(osg::Billboard)> optr) -> BillboardRef
        """
        this = _osg.new_BillboardRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_BillboardRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Billboard"""
        return _osg.BillboardRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Billboard"""
        return _osg.BillboardRef___deref__(self)

    def get(self):
        """get(self) -> Billboard"""
        return _osg.BillboardRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.BillboardRef_valid(self)

    def release(self):
        """release(self) -> Billboard"""
        return _osg.BillboardRef_release(self)

    def swap(self, *args):
        """swap(self, BillboardRef rp)"""
        return _osg.BillboardRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.BillboardRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.BillboardRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.BillboardRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.BillboardRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.BillboardRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.BillboardRef_accept(self, *args)

    def setMode(self, *args):
        """setMode(self, Mode mode)"""
        return _osg.BillboardRef_setMode(self, *args)

    def getMode(self):
        """getMode(self) -> Mode"""
        return _osg.BillboardRef_getMode(self)

    def setAxis(self, *args):
        """setAxis(self, Vec3 axis)"""
        return _osg.BillboardRef_setAxis(self, *args)

    def getAxis(self):
        """getAxis(self) -> Vec3"""
        return _osg.BillboardRef_getAxis(self)

    def setNormal(self, *args):
        """setNormal(self, Vec3 normal)"""
        return _osg.BillboardRef_setNormal(self, *args)

    def getNormal(self):
        """getNormal(self) -> Vec3"""
        return _osg.BillboardRef_getNormal(self)

    def setPosition(self, *args):
        """setPosition(self, unsigned int i, Vec3 pos)"""
        return _osg.BillboardRef_setPosition(self, *args)

    def getPosition(self, *args):
        """getPosition(self, unsigned int i) -> Vec3"""
        return _osg.BillboardRef_getPosition(self, *args)

    def setPositionList(self, *args):
        """setPositionList(self, PositionList pl)"""
        return _osg.BillboardRef_setPositionList(self, *args)

    def getPositionList(self, *args):
        """
        getPositionList(self) -> PositionList
        getPositionList(self) -> PositionList
        """
        return _osg.BillboardRef_getPositionList(self, *args)

    def addDrawable(self, *args):
        """
        addDrawable(self, Drawable gset) -> bool
        addDrawable(self, Drawable gset, Vec3 pos) -> bool
        """
        return _osg.BillboardRef_addDrawable(self, *args)

    def removeDrawable(self, *args):
        """removeDrawable(self, Drawable gset) -> bool"""
        return _osg.BillboardRef_removeDrawable(self, *args)

    def computeMatrix(self, *args):
        """computeMatrix(self, Matrix modelview, Vec3 eye_local, Vec3 pos_local) -> bool"""
        return _osg.BillboardRef_computeMatrix(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.BillboardRef_computeBound(self)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.BillboardRef_asGeode(self, *args)

    def removeDrawables(self, *args):
        """
        removeDrawables(self, unsigned int i, unsigned int numDrawablesToRemove = 1) -> bool
        removeDrawables(self, unsigned int i) -> bool
        """
        return _osg.BillboardRef_removeDrawables(self, *args)

    def replaceDrawable(self, *args):
        """replaceDrawable(self, Drawable origDraw, Drawable newDraw) -> bool"""
        return _osg.BillboardRef_replaceDrawable(self, *args)

    def setDrawable(self, *args):
        """setDrawable(self, unsigned int i, Drawable drawable) -> bool"""
        return _osg.BillboardRef_setDrawable(self, *args)

    def getNumDrawables(self):
        """getNumDrawables(self) -> unsigned int"""
        return _osg.BillboardRef_getNumDrawables(self)

    def getDrawable(self, *args):
        """
        getDrawable(self, unsigned int i) -> Drawable
        getDrawable(self, unsigned int i) -> Drawable
        """
        return _osg.BillboardRef_getDrawable(self, *args)

    def containsDrawable(self, *args):
        """containsDrawable(self, Drawable gset) -> bool"""
        return _osg.BillboardRef_containsDrawable(self, *args)

    def getDrawableIndex(self, *args):
        """getDrawableIndex(self, Drawable drawable) -> unsigned int"""
        return _osg.BillboardRef_getDrawableIndex(self, *args)

    def getDrawableList(self):
        """getDrawableList(self) -> DrawableList"""
        return _osg.BillboardRef_getDrawableList(self)

    def compileDrawables(self, *args):
        """compileDrawables(self, RenderInfo renderInfo)"""
        return _osg.BillboardRef_compileDrawables(self, *args)

    def getBoundingBox(self):
        """getBoundingBox(self) -> BoundingBox"""
        return _osg.BillboardRef_getBoundingBox(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.BillboardRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.BillboardRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.BillboardRef_releaseGLObjects(self, arg0)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.BillboardRef_asGroup(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.BillboardRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.BillboardRef_asSwitch(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.BillboardRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.BillboardRef_ascend(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor arg0)"""
        return _osg.BillboardRef_traverse(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.BillboardRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.BillboardRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.BillboardRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.BillboardRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.BillboardRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.BillboardRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.BillboardRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.BillboardRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.BillboardRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.BillboardRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.BillboardRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.BillboardRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.BillboardRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.BillboardRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.BillboardRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.BillboardRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.BillboardRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.BillboardRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.BillboardRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.BillboardRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.BillboardRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.BillboardRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.BillboardRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.BillboardRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.BillboardRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.BillboardRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.BillboardRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.BillboardRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.BillboardRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.BillboardRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.BillboardRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.BillboardRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.BillboardRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.BillboardRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.BillboardRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.BillboardRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.BillboardRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.BillboardRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.BillboardRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.BillboardRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.BillboardRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.BillboardRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.BillboardRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.BillboardRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.BillboardRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.BillboardRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.BillboardRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.BillboardRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.BillboardRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.BillboardRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.BillboardRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.BillboardRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.BillboardRef_getDeleteHandler(self)

BillboardRef_swigregister = _osg.BillboardRef_swigregister
BillboardRef_swigregister(BillboardRef)

class SwitchRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Switch)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SwitchRef
        __init__(self, Switch ptr) -> SwitchRef
        __init__(self, SwitchRef rp) -> SwitchRef
        __init__(self, osg::observer_ptr<(osg::Switch)> optr) -> SwitchRef
        """
        this = _osg.new_SwitchRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_SwitchRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Switch"""
        return _osg.SwitchRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Switch"""
        return _osg.SwitchRef___deref__(self)

    def get(self):
        """get(self) -> Switch"""
        return _osg.SwitchRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.SwitchRef_valid(self)

    def release(self):
        """release(self) -> Switch"""
        return _osg.SwitchRef_release(self)

    def swap(self, *args):
        """swap(self, SwitchRef rp)"""
        return _osg.SwitchRef_swap(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.SwitchRef_asSwitch(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.SwitchRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.SwitchRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.SwitchRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.SwitchRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.SwitchRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.SwitchRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.SwitchRef_traverse(self, *args)

    def setNewChildDefaultValue(self, *args):
        """setNewChildDefaultValue(self, bool value)"""
        return _osg.SwitchRef_setNewChildDefaultValue(self, *args)

    def getNewChildDefaultValue(self):
        """getNewChildDefaultValue(self) -> bool"""
        return _osg.SwitchRef_getNewChildDefaultValue(self)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, bool value) -> bool
        """
        return _osg.SwitchRef_addChild(self, *args)

    def insertChild(self, *args):
        """
        insertChild(self, unsigned int index, Node child) -> bool
        insertChild(self, unsigned int index, Node child, bool value) -> bool
        """
        return _osg.SwitchRef_insertChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.SwitchRef_removeChildren(self, *args)

    def setValue(self, *args):
        """setValue(self, unsigned int pos, bool value)"""
        return _osg.SwitchRef_setValue(self, *args)

    def getValue(self, *args):
        """getValue(self, unsigned int pos) -> bool"""
        return _osg.SwitchRef_getValue(self, *args)

    def setChildValue(self, *args):
        """setChildValue(self, Node child, bool value)"""
        return _osg.SwitchRef_setChildValue(self, *args)

    def getChildValue(self, *args):
        """getChildValue(self, Node child) -> bool"""
        return _osg.SwitchRef_getChildValue(self, *args)

    def setAllChildrenOff(self):
        """setAllChildrenOff(self) -> bool"""
        return _osg.SwitchRef_setAllChildrenOff(self)

    def setAllChildrenOn(self):
        """setAllChildrenOn(self) -> bool"""
        return _osg.SwitchRef_setAllChildrenOn(self)

    def setSingleChildOn(self, *args):
        """setSingleChildOn(self, unsigned int pos) -> bool"""
        return _osg.SwitchRef_setSingleChildOn(self, *args)

    def setValueList(self, *args):
        """setValueList(self, ValueList values)"""
        return _osg.SwitchRef_setValueList(self, *args)

    def getValueList(self):
        """getValueList(self) -> ValueList"""
        return _osg.SwitchRef_getValueList(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.SwitchRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.SwitchRef_asGroup(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.SwitchRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.SwitchRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.SwitchRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.SwitchRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.SwitchRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.SwitchRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.SwitchRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.SwitchRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.SwitchRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.SwitchRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.SwitchRef_asTransform(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.SwitchRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.SwitchRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.SwitchRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.SwitchRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.SwitchRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.SwitchRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.SwitchRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.SwitchRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.SwitchRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.SwitchRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.SwitchRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.SwitchRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.SwitchRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.SwitchRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.SwitchRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.SwitchRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.SwitchRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.SwitchRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.SwitchRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.SwitchRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.SwitchRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.SwitchRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.SwitchRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.SwitchRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.SwitchRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.SwitchRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.SwitchRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.SwitchRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.SwitchRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.SwitchRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.SwitchRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.SwitchRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.SwitchRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.SwitchRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.SwitchRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.SwitchRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.SwitchRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.SwitchRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.SwitchRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.SwitchRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.SwitchRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.SwitchRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.SwitchRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.SwitchRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.SwitchRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.SwitchRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.SwitchRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.SwitchRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.SwitchRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.SwitchRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.SwitchRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.SwitchRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.SwitchRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.SwitchRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.SwitchRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.SwitchRef_getDeleteHandler(self)

SwitchRef_swigregister = _osg.SwitchRef_swigregister
SwitchRef_swigregister(SwitchRef)

class LODRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::LOD)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LODRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LODRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LODRef
        __init__(self, LOD ptr) -> LODRef
        __init__(self, LODRef rp) -> LODRef
        __init__(self, osg::observer_ptr<(osg::LOD)> optr) -> LODRef
        """
        this = _osg.new_LODRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_LODRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> LOD"""
        return _osg.LODRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> LOD"""
        return _osg.LODRef___deref__(self)

    def get(self):
        """get(self) -> LOD"""
        return _osg.LODRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.LODRef_valid(self)

    def release(self):
        """release(self) -> LOD"""
        return _osg.LODRef_release(self)

    def swap(self, *args):
        """swap(self, LODRef rp)"""
        return _osg.LODRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LODRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LODRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LODRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.LODRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LODRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.LODRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.LODRef_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, float min, float max) -> bool
        """
        return _osg.LODRef_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChildren(self, unsigned int pos) -> bool
        """
        return _osg.LODRef_removeChildren(self, *args)

    def setCenterMode(self, *args):
        """setCenterMode(self, CenterMode mode)"""
        return _osg.LODRef_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(self) -> CenterMode"""
        return _osg.LODRef_getCenterMode(self)

    def setRangeMode(self, *args):
        """setRangeMode(self, RangeMode mode)"""
        return _osg.LODRef_setRangeMode(self, *args)

    def getRangeMode(self):
        """getRangeMode(self) -> RangeMode"""
        return _osg.LODRef_getRangeMode(self)

    def setRange(self, *args):
        """setRange(self, unsigned int childNo, float min, float max)"""
        return _osg.LODRef_setRange(self, *args)

    def getMinRange(self, *args):
        """getMinRange(self, unsigned int childNo) -> float"""
        return _osg.LODRef_getMinRange(self, *args)

    def getMaxRange(self, *args):
        """getMaxRange(self, unsigned int childNo) -> float"""
        return _osg.LODRef_getMaxRange(self, *args)

    def getNumRanges(self):
        """getNumRanges(self) -> unsigned int"""
        return _osg.LODRef_getNumRanges(self)

    def setRangeList(self, *args):
        """setRangeList(self, RangeList rangeList)"""
        return _osg.LODRef_setRangeList(self, *args)

    def getRangeList(self):
        """getRangeList(self) -> RangeList"""
        return _osg.LODRef_getRangeList(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.LODRef_computeBound(self)

    def getCenter(self):
        """getCenter(self) -> Vec3f"""
        return _osg.LODRef_getCenter(self)

    def setCenter(self, *args):
        """setCenter(self, Vec3f center)"""
        return _osg.LODRef_setCenter(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.LODRef_getRadius(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.LODRef_setRadius(self, *args)

    def asPagedLOD(self):
        """asPagedLOD(self) -> PagedLOD"""
        return _osg.LODRef_asPagedLOD(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.LODRef_asGroup(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.LODRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.LODRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.LODRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.LODRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.LODRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.LODRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.LODRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.LODRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.LODRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.LODRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.LODRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.LODRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.LODRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.LODRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.LODRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.LODRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.LODRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.LODRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.LODRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.LODRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.LODRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.LODRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.LODRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.LODRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.LODRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.LODRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.LODRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.LODRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.LODRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.LODRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.LODRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.LODRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.LODRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.LODRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.LODRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.LODRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.LODRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.LODRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.LODRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.LODRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.LODRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.LODRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.LODRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.LODRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.LODRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.LODRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.LODRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.LODRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.LODRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.LODRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.LODRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.LODRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.LODRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.LODRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.LODRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.LODRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.LODRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.LODRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.LODRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.LODRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.LODRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.LODRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.LODRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.LODRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.LODRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.LODRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.LODRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.LODRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.LODRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.LODRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.LODRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.LODRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.LODRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.LODRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.LODRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.LODRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.LODRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.LODRef_getDeleteHandler(self)

LODRef_swigregister = _osg.LODRef_swigregister
LODRef_swigregister(LODRef)

class PagedLODRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::PagedLOD)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PagedLODRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PagedLODRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PagedLODRef
        __init__(self, PagedLOD ptr) -> PagedLODRef
        __init__(self, PagedLODRef rp) -> PagedLODRef
        __init__(self, osg::observer_ptr<(osg::PagedLOD)> optr) -> PagedLODRef
        """
        this = _osg.new_PagedLODRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_PagedLODRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> PagedLOD"""
        return _osg.PagedLODRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> PagedLOD"""
        return _osg.PagedLODRef___deref__(self)

    def get(self):
        """get(self) -> PagedLOD"""
        return _osg.PagedLODRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.PagedLODRef_valid(self)

    def release(self):
        """release(self) -> PagedLOD"""
        return _osg.PagedLODRef_release(self)

    def swap(self, *args):
        """swap(self, PagedLODRef rp)"""
        return _osg.PagedLODRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.PagedLODRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.PagedLODRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.PagedLODRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.PagedLODRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.PagedLODRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.PagedLODRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.PagedLODRef_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, float min, float max) -> bool
        addChild(self, Node child, float min, float max, string filename, 
            float priorityOffset = 0.0, float priorityScale = 1.0) -> bool
        addChild(self, Node child, float min, float max, string filename, 
            float priorityOffset = 0.0) -> bool
        addChild(self, Node child, float min, float max, string filename) -> bool
        """
        return _osg.PagedLODRef_addChild(self, *args)

    def removeChildren(self, *args):
        """
        removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChildren(self, unsigned int pos) -> bool
        """
        return _osg.PagedLODRef_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(self, Referenced options)"""
        return _osg.PagedLODRef_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(self) -> Referenced
        getDatabaseOptions(self) -> Referenced
        """
        return _osg.PagedLODRef_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(self, string path)"""
        return _osg.PagedLODRef_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(self) -> string"""
        return _osg.PagedLODRef_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(self, unsigned int childNo, string filename)"""
        return _osg.PagedLODRef_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(self, unsigned int childNo) -> string"""
        return _osg.PagedLODRef_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumFileNames(self)

    def setPriorityOffset(self, *args):
        """setPriorityOffset(self, unsigned int childNo, float priorityOffset)"""
        return _osg.PagedLODRef_setPriorityOffset(self, *args)

    def getPriorityOffset(self, *args):
        """getPriorityOffset(self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getPriorityOffset(self, *args)

    def getNumPriorityOffsets(self):
        """getNumPriorityOffsets(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumPriorityOffsets(self)

    def setPriorityScale(self, *args):
        """setPriorityScale(self, unsigned int childNo, float priorityScale)"""
        return _osg.PagedLODRef_setPriorityScale(self, *args)

    def getPriorityScale(self, *args):
        """getPriorityScale(self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getPriorityScale(self, *args)

    def getNumPriorityScales(self):
        """getNumPriorityScales(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumPriorityScales(self)

    def setTimeStamp(self, *args):
        """setTimeStamp(self, unsigned int childNo, double timeStamp)"""
        return _osg.PagedLODRef_setTimeStamp(self, *args)

    def getTimeStamp(self, *args):
        """getTimeStamp(self, unsigned int childNo) -> double"""
        return _osg.PagedLODRef_getTimeStamp(self, *args)

    def getNumTimeStamps(self):
        """getNumTimeStamps(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumTimeStamps(self)

    def setFrameNumber(self, *args):
        """setFrameNumber(self, unsigned int childNo, unsigned int frameNumber)"""
        return _osg.PagedLODRef_setFrameNumber(self, *args)

    def getFrameNumber(self, *args):
        """getFrameNumber(self, unsigned int childNo) -> unsigned int"""
        return _osg.PagedLODRef_getFrameNumber(self, *args)

    def getNumFrameNumbers(self):
        """getNumFrameNumbers(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumFrameNumbers(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        """
        return _osg.PagedLODRef_getDatabaseRequest(self, *args)

    def setFrameNumberOfLastTraversal(self, *args):
        """setFrameNumberOfLastTraversal(self, unsigned int frameNumber)"""
        return _osg.PagedLODRef_setFrameNumberOfLastTraversal(self, *args)

    def getFrameNumberOfLastTraversal(self):
        """getFrameNumberOfLastTraversal(self) -> unsigned int"""
        return _osg.PagedLODRef_getFrameNumberOfLastTraversal(self)

    def setNumChildrenThatCannotBeExpired(self, *args):
        """setNumChildrenThatCannotBeExpired(self, unsigned int num)"""
        return _osg.PagedLODRef_setNumChildrenThatCannotBeExpired(self, *args)

    def getNumChildrenThatCannotBeExpired(self):
        """getNumChildrenThatCannotBeExpired(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenThatCannotBeExpired(self)

    def setDisableExternalChildrenPaging(self, *args):
        """setDisableExternalChildrenPaging(self, bool flag)"""
        return _osg.PagedLODRef_setDisableExternalChildrenPaging(self, *args)

    def getDisableExternalChildrenPaging(self):
        """getDisableExternalChildrenPaging(self) -> bool"""
        return _osg.PagedLODRef_getDisableExternalChildrenPaging(self)

    def removeExpiredChildren(self, *args):
        """removeExpiredChildren(self, double expiryTime, unsigned int expiryFrame, NodeList removedChildren) -> bool"""
        return _osg.PagedLODRef_removeExpiredChildren(self, *args)

    def getCenter(self):
        """getCenter(self) -> Vec3f"""
        return _osg.PagedLODRef_getCenter(self)

    def setCenter(self, *args):
        """setCenter(self, Vec3f center)"""
        return _osg.PagedLODRef_setCenter(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.PagedLODRef_getRadius(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.PagedLODRef_setRadius(self, *args)

    def setCenterMode(self, *args):
        """setCenterMode(self, CenterMode mode)"""
        return _osg.PagedLODRef_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(self) -> CenterMode"""
        return _osg.PagedLODRef_getCenterMode(self)

    def setRangeMode(self, *args):
        """setRangeMode(self, RangeMode mode)"""
        return _osg.PagedLODRef_setRangeMode(self, *args)

    def getRangeMode(self):
        """getRangeMode(self) -> RangeMode"""
        return _osg.PagedLODRef_getRangeMode(self)

    def setRange(self, *args):
        """setRange(self, unsigned int childNo, float min, float max)"""
        return _osg.PagedLODRef_setRange(self, *args)

    def getMinRange(self, *args):
        """getMinRange(self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getMinRange(self, *args)

    def getMaxRange(self, *args):
        """getMaxRange(self, unsigned int childNo) -> float"""
        return _osg.PagedLODRef_getMaxRange(self, *args)

    def getNumRanges(self):
        """getNumRanges(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumRanges(self)

    def setRangeList(self, *args):
        """setRangeList(self, RangeList rangeList)"""
        return _osg.PagedLODRef_setRangeList(self, *args)

    def getRangeList(self):
        """getRangeList(self) -> RangeList"""
        return _osg.PagedLODRef_getRangeList(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.PagedLODRef_computeBound(self)

    def asPagedLOD(self):
        """asPagedLOD(self) -> PagedLOD"""
        return _osg.PagedLODRef_asPagedLOD(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.PagedLODRef_asGroup(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.PagedLODRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.PagedLODRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.PagedLODRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.PagedLODRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.PagedLODRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.PagedLODRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.PagedLODRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.PagedLODRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.PagedLODRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.PagedLODRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.PagedLODRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.PagedLODRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.PagedLODRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.PagedLODRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.PagedLODRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.PagedLODRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.PagedLODRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.PagedLODRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.PagedLODRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.PagedLODRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.PagedLODRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.PagedLODRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.PagedLODRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.PagedLODRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.PagedLODRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.PagedLODRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.PagedLODRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.PagedLODRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.PagedLODRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.PagedLODRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.PagedLODRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.PagedLODRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.PagedLODRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.PagedLODRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.PagedLODRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.PagedLODRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.PagedLODRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.PagedLODRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.PagedLODRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.PagedLODRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.PagedLODRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.PagedLODRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.PagedLODRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.PagedLODRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.PagedLODRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.PagedLODRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.PagedLODRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.PagedLODRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.PagedLODRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.PagedLODRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.PagedLODRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.PagedLODRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.PagedLODRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.PagedLODRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.PagedLODRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.PagedLODRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.PagedLODRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.PagedLODRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.PagedLODRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.PagedLODRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.PagedLODRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.PagedLODRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.PagedLODRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.PagedLODRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.PagedLODRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.PagedLODRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.PagedLODRef_getDeleteHandler(self)

PagedLODRef_swigregister = _osg.PagedLODRef_swigregister
PagedLODRef_swigregister(PagedLODRef)

class ProxyNodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::ProxyNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyNodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyNodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ProxyNodeRef
        __init__(self, ProxyNode ptr) -> ProxyNodeRef
        __init__(self, ProxyNodeRef rp) -> ProxyNodeRef
        __init__(self, osg::observer_ptr<(osg::ProxyNode)> optr) -> ProxyNodeRef
        """
        this = _osg.new_ProxyNodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ProxyNodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> ProxyNode"""
        return _osg.ProxyNodeRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> ProxyNode"""
        return _osg.ProxyNodeRef___deref__(self)

    def get(self):
        """get(self) -> ProxyNode"""
        return _osg.ProxyNodeRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.ProxyNodeRef_valid(self)

    def release(self):
        """release(self) -> ProxyNode"""
        return _osg.ProxyNodeRef_release(self)

    def swap(self, *args):
        """swap(self, ProxyNodeRef rp)"""
        return _osg.ProxyNodeRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ProxyNodeRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ProxyNodeRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ProxyNodeRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.ProxyNodeRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ProxyNodeRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.ProxyNodeRef_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.ProxyNodeRef_traverse(self, *args)

    def addChild(self, *args):
        """
        addChild(self, Node child) -> bool
        addChild(self, Node child, string filename) -> bool
        """
        return _osg.ProxyNodeRef_addChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.ProxyNodeRef_removeChildren(self, *args)

    def setDatabaseOptions(self, *args):
        """setDatabaseOptions(self, Referenced options)"""
        return _osg.ProxyNodeRef_setDatabaseOptions(self, *args)

    def getDatabaseOptions(self, *args):
        """
        getDatabaseOptions(self) -> Referenced
        getDatabaseOptions(self) -> Referenced
        """
        return _osg.ProxyNodeRef_getDatabaseOptions(self, *args)

    def setDatabasePath(self, *args):
        """setDatabasePath(self, string path)"""
        return _osg.ProxyNodeRef_setDatabasePath(self, *args)

    def getDatabasePath(self):
        """getDatabasePath(self) -> string"""
        return _osg.ProxyNodeRef_getDatabasePath(self)

    def setFileName(self, *args):
        """setFileName(self, unsigned int childNo, string filename)"""
        return _osg.ProxyNodeRef_setFileName(self, *args)

    def getFileName(self, *args):
        """getFileName(self, unsigned int childNo) -> string"""
        return _osg.ProxyNodeRef_getFileName(self, *args)

    def getNumFileNames(self):
        """getNumFileNames(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumFileNames(self)

    def getDatabaseRequest(self, *args):
        """
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        getDatabaseRequest(self, unsigned int childNo) -> osg::ref_ptr<(osg::Referenced)>
        """
        return _osg.ProxyNodeRef_getDatabaseRequest(self, *args)

    def setCenterMode(self, *args):
        """setCenterMode(self, CenterMode mode)"""
        return _osg.ProxyNodeRef_setCenterMode(self, *args)

    def getCenterMode(self):
        """getCenterMode(self) -> CenterMode"""
        return _osg.ProxyNodeRef_getCenterMode(self)

    def setLoadingExternalReferenceMode(self, *args):
        """setLoadingExternalReferenceMode(self, LoadingExternalReferenceMode mode)"""
        return _osg.ProxyNodeRef_setLoadingExternalReferenceMode(self, *args)

    def getLoadingExternalReferenceMode(self):
        """getLoadingExternalReferenceMode(self) -> LoadingExternalReferenceMode"""
        return _osg.ProxyNodeRef_getLoadingExternalReferenceMode(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.ProxyNodeRef_computeBound(self)

    def getCenter(self):
        """getCenter(self) -> Vec3f"""
        return _osg.ProxyNodeRef_getCenter(self)

    def setCenter(self, *args):
        """setCenter(self, Vec3f center)"""
        return _osg.ProxyNodeRef_setCenter(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osg.ProxyNodeRef_getRadius(self)

    def setRadius(self, *args):
        """setRadius(self, float radius)"""
        return _osg.ProxyNodeRef_setRadius(self, *args)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.ProxyNodeRef_asGroup(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.ProxyNodeRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.ProxyNodeRef_removeChild(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.ProxyNodeRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.ProxyNodeRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.ProxyNodeRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.ProxyNodeRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.ProxyNodeRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.ProxyNodeRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.ProxyNodeRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.ProxyNodeRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.ProxyNodeRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.ProxyNodeRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.ProxyNodeRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.ProxyNodeRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.ProxyNodeRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.ProxyNodeRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.ProxyNodeRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.ProxyNodeRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.ProxyNodeRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.ProxyNodeRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.ProxyNodeRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.ProxyNodeRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.ProxyNodeRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.ProxyNodeRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.ProxyNodeRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.ProxyNodeRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.ProxyNodeRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.ProxyNodeRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.ProxyNodeRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.ProxyNodeRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.ProxyNodeRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.ProxyNodeRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.ProxyNodeRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.ProxyNodeRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.ProxyNodeRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.ProxyNodeRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.ProxyNodeRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.ProxyNodeRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.ProxyNodeRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.ProxyNodeRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.ProxyNodeRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.ProxyNodeRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.ProxyNodeRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.ProxyNodeRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.ProxyNodeRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.ProxyNodeRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.ProxyNodeRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.ProxyNodeRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.ProxyNodeRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.ProxyNodeRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.ProxyNodeRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.ProxyNodeRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.ProxyNodeRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.ProxyNodeRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.ProxyNodeRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.ProxyNodeRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.ProxyNodeRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.ProxyNodeRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.ProxyNodeRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.ProxyNodeRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.ProxyNodeRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.ProxyNodeRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.ProxyNodeRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.ProxyNodeRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.ProxyNodeRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.ProxyNodeRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.ProxyNodeRef_getDeleteHandler(self)

ProxyNodeRef_swigregister = _osg.ProxyNodeRef_swigregister
ProxyNodeRef_swigregister(ProxyNodeRef)

class ProjectionRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Projection)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectionRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectionRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ProjectionRef
        __init__(self, Projection ptr) -> ProjectionRef
        __init__(self, ProjectionRef rp) -> ProjectionRef
        __init__(self, osg::observer_ptr<(osg::Projection)> optr) -> ProjectionRef
        """
        this = _osg.new_ProjectionRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ProjectionRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Projection"""
        return _osg.ProjectionRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Projection"""
        return _osg.ProjectionRef___deref__(self)

    def get(self):
        """get(self) -> Projection"""
        return _osg.ProjectionRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.ProjectionRef_valid(self)

    def release(self):
        """release(self) -> Projection"""
        return _osg.ProjectionRef_release(self)

    def swap(self, *args):
        """swap(self, ProjectionRef rp)"""
        return _osg.ProjectionRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.ProjectionRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.ProjectionRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.ProjectionRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.ProjectionRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.ProjectionRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.ProjectionRef_accept(self, *args)

    def setMatrix(self, *args):
        """setMatrix(self, Matrix mat)"""
        return _osg.ProjectionRef_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(self) -> Matrix"""
        return _osg.ProjectionRef_getMatrix(self)

    def preMult(self, *args):
        """preMult(self, Matrix mat)"""
        return _osg.ProjectionRef_preMult(self, *args)

    def postMult(self, *args):
        """postMult(self, Matrix mat)"""
        return _osg.ProjectionRef_postMult(self, *args)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.ProjectionRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.ProjectionRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.ProjectionRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.ProjectionRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.ProjectionRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.ProjectionRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.ProjectionRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.ProjectionRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.ProjectionRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.ProjectionRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.ProjectionRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.ProjectionRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.ProjectionRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.ProjectionRef_releaseGLObjects(self, arg0)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.ProjectionRef_computeBound(self)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.ProjectionRef_asProxyNode(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.ProjectionRef_asTransform(self, *args)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.ProjectionRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.ProjectionRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.ProjectionRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.ProjectionRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.ProjectionRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.ProjectionRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.ProjectionRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.ProjectionRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.ProjectionRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.ProjectionRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.ProjectionRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.ProjectionRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.ProjectionRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.ProjectionRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.ProjectionRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.ProjectionRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.ProjectionRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.ProjectionRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.ProjectionRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.ProjectionRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.ProjectionRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.ProjectionRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.ProjectionRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.ProjectionRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.ProjectionRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.ProjectionRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.ProjectionRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.ProjectionRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.ProjectionRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.ProjectionRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.ProjectionRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.ProjectionRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.ProjectionRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.ProjectionRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.ProjectionRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.ProjectionRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.ProjectionRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.ProjectionRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.ProjectionRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.ProjectionRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.ProjectionRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.ProjectionRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.ProjectionRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.ProjectionRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.ProjectionRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.ProjectionRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.ProjectionRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.ProjectionRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.ProjectionRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.ProjectionRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.ProjectionRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.ProjectionRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.ProjectionRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.ProjectionRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.ProjectionRef_getDeleteHandler(self)

ProjectionRef_swigregister = _osg.ProjectionRef_swigregister
ProjectionRef_swigregister(ProjectionRef)

class LightRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Light)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightRef
        __init__(self, Light ptr) -> LightRef
        __init__(self, LightRef rp) -> LightRef
        __init__(self, osg::observer_ptr<(osg::Light)> optr) -> LightRef
        """
        this = _osg.new_LightRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_LightRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Light"""
        return _osg.LightRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Light"""
        return _osg.LightRef___deref__(self)

    def get(self):
        """get(self) -> Light"""
        return _osg.LightRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.LightRef_valid(self)

    def release(self):
        """release(self) -> Light"""
        return _osg.LightRef_release(self)

    def swap(self, *args):
        """swap(self, LightRef rp)"""
        return _osg.LightRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.LightRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.LightRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.LightRef_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.LightRef_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.LightRef_className(self)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.LightRef_getType(self)

    def compare(self, *args):
        """compare(self, StateAttribute sa) -> int"""
        return _osg.LightRef_compare(self, *args)

    def getMember(self):
        """getMember(self) -> unsigned int"""
        return _osg.LightRef_getMember(self)

    def setLightNum(self, *args):
        """setLightNum(self, int num)"""
        return _osg.LightRef_setLightNum(self, *args)

    def getLightNum(self):
        """getLightNum(self) -> int"""
        return _osg.LightRef_getLightNum(self)

    def setAmbient(self, *args):
        """setAmbient(self, Vec4 ambient)"""
        return _osg.LightRef_setAmbient(self, *args)

    def getAmbient(self):
        """getAmbient(self) -> Vec4"""
        return _osg.LightRef_getAmbient(self)

    def setDiffuse(self, *args):
        """setDiffuse(self, Vec4 diffuse)"""
        return _osg.LightRef_setDiffuse(self, *args)

    def getDiffuse(self):
        """getDiffuse(self) -> Vec4"""
        return _osg.LightRef_getDiffuse(self)

    def setSpecular(self, *args):
        """setSpecular(self, Vec4 specular)"""
        return _osg.LightRef_setSpecular(self, *args)

    def getSpecular(self):
        """getSpecular(self) -> Vec4"""
        return _osg.LightRef_getSpecular(self)

    def setPosition(self, *args):
        """setPosition(self, Vec4 position)"""
        return _osg.LightRef_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec4"""
        return _osg.LightRef_getPosition(self)

    def setDirection(self, *args):
        """setDirection(self, Vec3 direction)"""
        return _osg.LightRef_setDirection(self, *args)

    def getDirection(self):
        """getDirection(self) -> Vec3"""
        return _osg.LightRef_getDirection(self)

    def setConstantAttenuation(self, *args):
        """setConstantAttenuation(self, float constant_attenuation)"""
        return _osg.LightRef_setConstantAttenuation(self, *args)

    def getConstantAttenuation(self):
        """getConstantAttenuation(self) -> float"""
        return _osg.LightRef_getConstantAttenuation(self)

    def setLinearAttenuation(self, *args):
        """setLinearAttenuation(self, float linear_attenuation)"""
        return _osg.LightRef_setLinearAttenuation(self, *args)

    def getLinearAttenuation(self):
        """getLinearAttenuation(self) -> float"""
        return _osg.LightRef_getLinearAttenuation(self)

    def setQuadraticAttenuation(self, *args):
        """setQuadraticAttenuation(self, float quadratic_attenuation)"""
        return _osg.LightRef_setQuadraticAttenuation(self, *args)

    def getQuadraticAttenuation(self):
        """getQuadraticAttenuation(self) -> float"""
        return _osg.LightRef_getQuadraticAttenuation(self)

    def setSpotExponent(self, *args):
        """setSpotExponent(self, float spot_exponent)"""
        return _osg.LightRef_setSpotExponent(self, *args)

    def getSpotExponent(self):
        """getSpotExponent(self) -> float"""
        return _osg.LightRef_getSpotExponent(self)

    def setSpotCutoff(self, *args):
        """setSpotCutoff(self, float spot_cutoff)"""
        return _osg.LightRef_setSpotCutoff(self, *args)

    def getSpotCutoff(self):
        """getSpotCutoff(self) -> float"""
        return _osg.LightRef_getSpotCutoff(self)

    def captureLightState(self):
        """captureLightState(self)"""
        return _osg.LightRef_captureLightState(self)

    def apply(self, *args):
        """apply(self, State state)"""
        return _osg.LightRef_apply(self, *args)

    def asTexture(self, *args):
        """
        asTexture(self) -> Texture
        asTexture(self) -> Texture
        """
        return _osg.LightRef_asTexture(self, *args)

    def getTypeMemberPair(self):
        """getTypeMemberPair(self) -> TypeMemberPair"""
        return _osg.LightRef_getTypeMemberPair(self)

    def isTextureAttribute(self):
        """isTextureAttribute(self) -> bool"""
        return _osg.LightRef_isTextureAttribute(self)

    def __lt__(self, *args):
        """__lt__(self, StateAttribute rhs) -> bool"""
        return _osg.LightRef___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, StateAttribute rhs) -> bool"""
        return _osg.LightRef___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, StateAttribute rhs) -> bool"""
        return _osg.LightRef___ne__(self, *args)

    def getParents(self):
        """getParents(self) -> ParentList"""
        return _osg.LightRef_getParents(self)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> StateSet
        getParent(self, unsigned int i) -> StateSet
        """
        return _osg.LightRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.LightRef_getNumParents(self)

    def setShaderComponent(self, *args):
        """setShaderComponent(self, ShaderComponent sc)"""
        return _osg.LightRef_setShaderComponent(self, *args)

    def getShaderComponent(self, *args):
        """
        getShaderComponent(self) -> ShaderComponent
        getShaderComponent(self) -> ShaderComponent
        """
        return _osg.LightRef_getShaderComponent(self, *args)

    def checkValidityOfAssociatedModes(self, *args):
        """checkValidityOfAssociatedModes(self, State arg0) -> bool"""
        return _osg.LightRef_checkValidityOfAssociatedModes(self, *args)

    def compileGLObjects(self, *args):
        """compileGLObjects(self, State arg0)"""
        return _osg.LightRef_compileGLObjects(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osg.LightRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.LightRef_releaseGLObjects(self, arg0)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.LightRef_setThreadSafeRefUnref(self, *args)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.LightRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.LightRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.LightRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.LightRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.LightRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.LightRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.LightRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.LightRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.LightRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.LightRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.LightRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.LightRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.LightRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.LightRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.LightRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.LightRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.LightRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.LightRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.LightRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.LightRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.LightRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.LightRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.LightRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.LightRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.LightRef_getDeleteHandler(self)

LightRef_swigregister = _osg.LightRef_swigregister
LightRef_swigregister(LightRef)

class MatrixTransformRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::MatrixTransform)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixTransformRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixTransformRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MatrixTransformRef
        __init__(self, MatrixTransform ptr) -> MatrixTransformRef
        __init__(self, MatrixTransformRef rp) -> MatrixTransformRef
        __init__(self, osg::observer_ptr<(osg::MatrixTransform)> optr) -> MatrixTransformRef
        """
        this = _osg.new_MatrixTransformRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_MatrixTransformRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> MatrixTransform"""
        return _osg.MatrixTransformRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> MatrixTransform"""
        return _osg.MatrixTransformRef___deref__(self)

    def get(self):
        """get(self) -> MatrixTransform"""
        return _osg.MatrixTransformRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.MatrixTransformRef_valid(self)

    def release(self):
        """release(self) -> MatrixTransform"""
        return _osg.MatrixTransformRef_release(self)

    def swap(self, *args):
        """swap(self, MatrixTransformRef rp)"""
        return _osg.MatrixTransformRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.MatrixTransformRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.MatrixTransformRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.MatrixTransformRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.MatrixTransformRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.MatrixTransformRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.MatrixTransformRef_accept(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.MatrixTransformRef_asMatrixTransform(self, *args)

    def setMatrix(self, *args):
        """setMatrix(self, Matrix mat)"""
        return _osg.MatrixTransformRef_setMatrix(self, *args)

    def getMatrix(self):
        """getMatrix(self) -> Matrix"""
        return _osg.MatrixTransformRef_getMatrix(self)

    def preMult(self, *args):
        """preMult(self, Matrix mat)"""
        return _osg.MatrixTransformRef_preMult(self, *args)

    def postMult(self, *args):
        """postMult(self, Matrix mat)"""
        return _osg.MatrixTransformRef_postMult(self, *args)

    def getInverseMatrix(self):
        """getInverseMatrix(self) -> Matrix"""
        return _osg.MatrixTransformRef_getInverseMatrix(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransformRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor arg0) -> bool"""
        return _osg.MatrixTransformRef_computeWorldToLocalMatrix(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.MatrixTransformRef_asTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.MatrixTransformRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.MatrixTransformRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.MatrixTransformRef_getReferenceFrame(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.MatrixTransformRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.MatrixTransformRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.MatrixTransformRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.MatrixTransformRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.MatrixTransformRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.MatrixTransformRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.MatrixTransformRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.MatrixTransformRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.MatrixTransformRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.MatrixTransformRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.MatrixTransformRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.MatrixTransformRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.MatrixTransformRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.MatrixTransformRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.MatrixTransformRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.MatrixTransformRef_asProxyNode(self)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.MatrixTransformRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.MatrixTransformRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.MatrixTransformRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.MatrixTransformRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.MatrixTransformRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.MatrixTransformRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.MatrixTransformRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.MatrixTransformRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.MatrixTransformRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.MatrixTransformRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.MatrixTransformRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.MatrixTransformRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.MatrixTransformRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.MatrixTransformRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.MatrixTransformRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.MatrixTransformRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.MatrixTransformRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.MatrixTransformRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.MatrixTransformRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.MatrixTransformRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.MatrixTransformRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.MatrixTransformRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.MatrixTransformRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.MatrixTransformRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.MatrixTransformRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.MatrixTransformRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.MatrixTransformRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.MatrixTransformRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.MatrixTransformRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.MatrixTransformRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.MatrixTransformRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.MatrixTransformRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.MatrixTransformRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.MatrixTransformRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.MatrixTransformRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.MatrixTransformRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.MatrixTransformRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.MatrixTransformRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.MatrixTransformRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.MatrixTransformRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.MatrixTransformRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.MatrixTransformRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.MatrixTransformRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.MatrixTransformRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.MatrixTransformRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.MatrixTransformRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.MatrixTransformRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.MatrixTransformRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.MatrixTransformRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.MatrixTransformRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.MatrixTransformRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.MatrixTransformRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.MatrixTransformRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.MatrixTransformRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.MatrixTransformRef_getDeleteHandler(self)

MatrixTransformRef_swigregister = _osg.MatrixTransformRef_swigregister
MatrixTransformRef_swigregister(MatrixTransformRef)

class AutoTransformRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::AutoTransform)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoTransformRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AutoTransformRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AutoTransformRef
        __init__(self, AutoTransform ptr) -> AutoTransformRef
        __init__(self, AutoTransformRef rp) -> AutoTransformRef
        __init__(self, osg::observer_ptr<(osg::AutoTransform)> optr) -> AutoTransformRef
        """
        this = _osg.new_AutoTransformRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_AutoTransformRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> AutoTransform"""
        return _osg.AutoTransformRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> AutoTransform"""
        return _osg.AutoTransformRef___deref__(self)

    def get(self):
        """get(self) -> AutoTransform"""
        return _osg.AutoTransformRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.AutoTransformRef_valid(self)

    def release(self):
        """release(self) -> AutoTransform"""
        return _osg.AutoTransformRef_release(self)

    def swap(self, *args):
        """swap(self, AutoTransformRef rp)"""
        return _osg.AutoTransformRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.AutoTransformRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.AutoTransformRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.AutoTransformRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.AutoTransformRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.AutoTransformRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.AutoTransformRef_accept(self, *args)

    def asAutoTransform(self, *args):
        """
        asAutoTransform(self) -> AutoTransform
        asAutoTransform(self) -> AutoTransform
        """
        return _osg.AutoTransformRef_asAutoTransform(self, *args)

    def setPosition(self, *args):
        """setPosition(self, Vec3d pos)"""
        return _osg.AutoTransformRef_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec3d"""
        return _osg.AutoTransformRef_getPosition(self)

    def setRotation(self, *args):
        """setRotation(self, Quat quat)"""
        return _osg.AutoTransformRef_setRotation(self, *args)

    def getRotation(self):
        """getRotation(self) -> Quat"""
        return _osg.AutoTransformRef_getRotation(self)

    def setScale(self, *args):
        """
        setScale(self, double scale)
        setScale(self, Vec3d scale)
        """
        return _osg.AutoTransformRef_setScale(self, *args)

    def getScale(self):
        """getScale(self) -> Vec3d"""
        return _osg.AutoTransformRef_getScale(self)

    def setMinimumScale(self, *args):
        """setMinimumScale(self, double minimumScale)"""
        return _osg.AutoTransformRef_setMinimumScale(self, *args)

    def getMinimumScale(self):
        """getMinimumScale(self) -> double"""
        return _osg.AutoTransformRef_getMinimumScale(self)

    def setMaximumScale(self, *args):
        """setMaximumScale(self, double maximumScale)"""
        return _osg.AutoTransformRef_setMaximumScale(self, *args)

    def getMaximumScale(self):
        """getMaximumScale(self) -> double"""
        return _osg.AutoTransformRef_getMaximumScale(self)

    def setPivotPoint(self, *args):
        """setPivotPoint(self, Vec3d pivot)"""
        return _osg.AutoTransformRef_setPivotPoint(self, *args)

    def getPivotPoint(self):
        """getPivotPoint(self) -> Vec3d"""
        return _osg.AutoTransformRef_getPivotPoint(self)

    def setAutoUpdateEyeMovementTolerance(self, *args):
        """setAutoUpdateEyeMovementTolerance(self, float tolerance)"""
        return _osg.AutoTransformRef_setAutoUpdateEyeMovementTolerance(self, *args)

    def getAutoUpdateEyeMovementTolerance(self):
        """getAutoUpdateEyeMovementTolerance(self) -> float"""
        return _osg.AutoTransformRef_getAutoUpdateEyeMovementTolerance(self)

    def setAutoRotateMode(self, *args):
        """setAutoRotateMode(self, AutoRotateMode mode)"""
        return _osg.AutoTransformRef_setAutoRotateMode(self, *args)

    def getAutoRotateMode(self):
        """getAutoRotateMode(self) -> AutoRotateMode"""
        return _osg.AutoTransformRef_getAutoRotateMode(self)

    def setAxis(self, *args):
        """setAxis(self, Vec3 axis)"""
        return _osg.AutoTransformRef_setAxis(self, *args)

    def getAxis(self):
        """getAxis(self) -> Vec3"""
        return _osg.AutoTransformRef_getAxis(self)

    def setNormal(self, *args):
        """setNormal(self, Vec3 normal)"""
        return _osg.AutoTransformRef_setNormal(self, *args)

    def getNormal(self):
        """getNormal(self) -> Vec3"""
        return _osg.AutoTransformRef_getNormal(self)

    def setAutoScaleToScreen(self, *args):
        """setAutoScaleToScreen(self, bool autoScaleToScreen)"""
        return _osg.AutoTransformRef_setAutoScaleToScreen(self, *args)

    def getAutoScaleToScreen(self):
        """getAutoScaleToScreen(self) -> bool"""
        return _osg.AutoTransformRef_getAutoScaleToScreen(self)

    def setAutoScaleTransitionWidthRatio(self, *args):
        """setAutoScaleTransitionWidthRatio(self, float ratio)"""
        return _osg.AutoTransformRef_setAutoScaleTransitionWidthRatio(self, *args)

    def getAutoScaleTransitionWidthRatio(self):
        """getAutoScaleTransitionWidthRatio(self) -> float"""
        return _osg.AutoTransformRef_getAutoScaleTransitionWidthRatio(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransformRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.AutoTransformRef_computeWorldToLocalMatrix(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.AutoTransformRef_computeBound(self)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.AutoTransformRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.AutoTransformRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.AutoTransformRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.AutoTransformRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.AutoTransformRef_getReferenceFrame(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.AutoTransformRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.AutoTransformRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.AutoTransformRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.AutoTransformRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.AutoTransformRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.AutoTransformRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.AutoTransformRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.AutoTransformRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.AutoTransformRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.AutoTransformRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.AutoTransformRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.AutoTransformRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.AutoTransformRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.AutoTransformRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.AutoTransformRef_asProxyNode(self)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.AutoTransformRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.AutoTransformRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.AutoTransformRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.AutoTransformRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.AutoTransformRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.AutoTransformRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.AutoTransformRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.AutoTransformRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.AutoTransformRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.AutoTransformRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.AutoTransformRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.AutoTransformRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.AutoTransformRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.AutoTransformRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.AutoTransformRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.AutoTransformRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.AutoTransformRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.AutoTransformRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.AutoTransformRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.AutoTransformRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.AutoTransformRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.AutoTransformRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.AutoTransformRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.AutoTransformRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.AutoTransformRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.AutoTransformRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.AutoTransformRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.AutoTransformRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.AutoTransformRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.AutoTransformRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.AutoTransformRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.AutoTransformRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.AutoTransformRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.AutoTransformRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.AutoTransformRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.AutoTransformRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.AutoTransformRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.AutoTransformRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.AutoTransformRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.AutoTransformRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.AutoTransformRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.AutoTransformRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.AutoTransformRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.AutoTransformRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.AutoTransformRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.AutoTransformRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.AutoTransformRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.AutoTransformRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.AutoTransformRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.AutoTransformRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.AutoTransformRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.AutoTransformRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.AutoTransformRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.AutoTransformRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.AutoTransformRef_getDeleteHandler(self)

AutoTransformRef_swigregister = _osg.AutoTransformRef_swigregister
AutoTransformRef_swigregister(AutoTransformRef)

class CameraNodeRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::CameraNode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraNodeRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraNodeRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CameraNodeRef
        __init__(self, osg::CameraNode ptr) -> CameraNodeRef
        __init__(self, CameraNodeRef rp) -> CameraNodeRef
        __init__(self, osg::observer_ptr<(osg::CameraNode)> optr) -> CameraNodeRef
        """
        this = _osg.new_CameraNodeRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraNodeRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> osg::CameraNode"""
        return _osg.CameraNodeRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> osg::CameraNode"""
        return _osg.CameraNodeRef___deref__(self)

    def get(self):
        """get(self) -> osg::CameraNode"""
        return _osg.CameraNodeRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.CameraNodeRef_valid(self)

    def release(self):
        """release(self) -> osg::CameraNode"""
        return _osg.CameraNodeRef_release(self)

    def swap(self, *args):
        """swap(self, CameraNodeRef rp)"""
        return _osg.CameraNodeRef_swap(self, *args)

CameraNodeRef_swigregister = _osg.CameraNodeRef_swigregister
CameraNodeRef_swigregister(CameraNodeRef)

class CameraViewRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::CameraView)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraViewRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraViewRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CameraViewRef
        __init__(self, CameraView ptr) -> CameraViewRef
        __init__(self, CameraViewRef rp) -> CameraViewRef
        __init__(self, osg::observer_ptr<(osg::CameraView)> optr) -> CameraViewRef
        """
        this = _osg.new_CameraViewRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraViewRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> CameraView"""
        return _osg.CameraViewRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> CameraView"""
        return _osg.CameraViewRef___deref__(self)

    def get(self):
        """get(self) -> CameraView"""
        return _osg.CameraViewRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.CameraViewRef_valid(self)

    def release(self):
        """release(self) -> CameraView"""
        return _osg.CameraViewRef_release(self)

    def swap(self, *args):
        """swap(self, CameraViewRef rp)"""
        return _osg.CameraViewRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.CameraViewRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.CameraViewRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.CameraViewRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.CameraViewRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.CameraViewRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.CameraViewRef_accept(self, *args)

    def setPosition(self, *args):
        """setPosition(self, Vec3d pos)"""
        return _osg.CameraViewRef_setPosition(self, *args)

    def getPosition(self):
        """getPosition(self) -> Vec3d"""
        return _osg.CameraViewRef_getPosition(self)

    def setAttitude(self, *args):
        """setAttitude(self, Quat quat)"""
        return _osg.CameraViewRef_setAttitude(self, *args)

    def getAttitude(self):
        """getAttitude(self) -> Quat"""
        return _osg.CameraViewRef_getAttitude(self)

    def setFieldOfView(self, *args):
        """setFieldOfView(self, double fieldOfView)"""
        return _osg.CameraViewRef_setFieldOfView(self, *args)

    def getFieldOfView(self):
        """getFieldOfView(self) -> double"""
        return _osg.CameraViewRef_getFieldOfView(self)

    def setFieldOfViewMode(self, *args):
        """setFieldOfViewMode(self, FieldOfViewMode mode)"""
        return _osg.CameraViewRef_setFieldOfViewMode(self, *args)

    def getFieldOfViewMode(self):
        """getFieldOfViewMode(self) -> FieldOfViewMode"""
        return _osg.CameraViewRef_getFieldOfViewMode(self)

    def setFocalLength(self, *args):
        """setFocalLength(self, double focalLength)"""
        return _osg.CameraViewRef_setFocalLength(self, *args)

    def getFocalLength(self):
        """getFocalLength(self) -> double"""
        return _osg.CameraViewRef_getFocalLength(self)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraViewRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osg.CameraViewRef_computeWorldToLocalMatrix(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.CameraViewRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.CameraViewRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.CameraViewRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.CameraViewRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.CameraViewRef_getReferenceFrame(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.CameraViewRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.CameraViewRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.CameraViewRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.CameraViewRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.CameraViewRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.CameraViewRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.CameraViewRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.CameraViewRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.CameraViewRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.CameraViewRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.CameraViewRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.CameraViewRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.CameraViewRef_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.CameraViewRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.CameraViewRef_releaseGLObjects(self, arg0)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.CameraViewRef_asProxyNode(self)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.CameraViewRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.CameraViewRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.CameraViewRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.CameraViewRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.CameraViewRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.CameraViewRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.CameraViewRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.CameraViewRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.CameraViewRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.CameraViewRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.CameraViewRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.CameraViewRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.CameraViewRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.CameraViewRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.CameraViewRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.CameraViewRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.CameraViewRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.CameraViewRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.CameraViewRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.CameraViewRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.CameraViewRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.CameraViewRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.CameraViewRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.CameraViewRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.CameraViewRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.CameraViewRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.CameraViewRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.CameraViewRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.CameraViewRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.CameraViewRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.CameraViewRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.CameraViewRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.CameraViewRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.CameraViewRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.CameraViewRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.CameraViewRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.CameraViewRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.CameraViewRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.CameraViewRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.CameraViewRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.CameraViewRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.CameraViewRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.CameraViewRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.CameraViewRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.CameraViewRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.CameraViewRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.CameraViewRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.CameraViewRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.CameraViewRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.CameraViewRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.CameraViewRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.CameraViewRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.CameraViewRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.CameraViewRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.CameraViewRef_getDeleteHandler(self)

CameraViewRef_swigregister = _osg.CameraViewRef_swigregister
CameraViewRef_swigregister(CameraViewRef)

class CameraRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::Camera)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CameraRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CameraRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CameraRef
        __init__(self, Camera ptr) -> CameraRef
        __init__(self, CameraRef rp) -> CameraRef
        __init__(self, osg::observer_ptr<(osg::Camera)> optr) -> CameraRef
        """
        this = _osg.new_CameraRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_CameraRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> Camera"""
        return _osg.CameraRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> Camera"""
        return _osg.CameraRef___deref__(self)

    def get(self):
        """get(self) -> Camera"""
        return _osg.CameraRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.CameraRef_valid(self)

    def release(self):
        """release(self) -> Camera"""
        return _osg.CameraRef_release(self)

    def swap(self, *args):
        """swap(self, CameraRef rp)"""
        return _osg.CameraRef_swap(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.CameraRef_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.CameraRef_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.CameraRef_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osg.CameraRef_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.CameraRef_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osg.CameraRef_accept(self, *args)

    def setView(self, *args):
        """setView(self, View view)"""
        return _osg.CameraRef_setView(self, *args)

    def getView(self, *args):
        """
        getView(self) -> View
        getView(self) -> View
        """
        return _osg.CameraRef_getView(self, *args)

    def setStats(self, *args):
        """setStats(self, Stats stats)"""
        return _osg.CameraRef_setStats(self, *args)

    def getStats(self, *args):
        """
        getStats(self) -> Stats
        getStats(self) -> Stats
        """
        return _osg.CameraRef_getStats(self, *args)

    def setAllowEventFocus(self, *args):
        """setAllowEventFocus(self, bool focus)"""
        return _osg.CameraRef_setAllowEventFocus(self, *args)

    def getAllowEventFocus(self):
        """getAllowEventFocus(self) -> bool"""
        return _osg.CameraRef_getAllowEventFocus(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(self, DisplaySettings ds)"""
        return _osg.CameraRef_setDisplaySettings(self, *args)

    def getDisplaySettings(self, *args):
        """
        getDisplaySettings(self) -> DisplaySettings
        getDisplaySettings(self) -> DisplaySettings
        """
        return _osg.CameraRef_getDisplaySettings(self, *args)

    def setClearMask(self, *args):
        """setClearMask(self, GLbitfield mask)"""
        return _osg.CameraRef_setClearMask(self, *args)

    def getClearMask(self):
        """getClearMask(self) -> GLbitfield"""
        return _osg.CameraRef_getClearMask(self)

    def setClearColor(self, *args):
        """setClearColor(self, Vec4 color)"""
        return _osg.CameraRef_setClearColor(self, *args)

    def getClearColor(self):
        """getClearColor(self) -> Vec4"""
        return _osg.CameraRef_getClearColor(self)

    def setClearAccum(self, *args):
        """setClearAccum(self, Vec4 color)"""
        return _osg.CameraRef_setClearAccum(self, *args)

    def getClearAccum(self):
        """getClearAccum(self) -> Vec4"""
        return _osg.CameraRef_getClearAccum(self)

    def setClearDepth(self, *args):
        """setClearDepth(self, double depth)"""
        return _osg.CameraRef_setClearDepth(self, *args)

    def getClearDepth(self):
        """getClearDepth(self) -> double"""
        return _osg.CameraRef_getClearDepth(self)

    def setClearStencil(self, *args):
        """setClearStencil(self, int stencil)"""
        return _osg.CameraRef_setClearStencil(self, *args)

    def getClearStencil(self):
        """getClearStencil(self) -> int"""
        return _osg.CameraRef_getClearStencil(self)

    def setColorMask(self, *args):
        """
        setColorMask(self, ColorMask colorMask)
        setColorMask(self, bool red, bool green, bool blue, bool alpha)
        """
        return _osg.CameraRef_setColorMask(self, *args)

    def getColorMask(self, *args):
        """
        getColorMask(self) -> ColorMask
        getColorMask(self) -> ColorMask
        """
        return _osg.CameraRef_getColorMask(self, *args)

    def setViewport(self, *args):
        """
        setViewport(self, Viewport viewport)
        setViewport(self, int x, int y, int width, int height)
        """
        return _osg.CameraRef_setViewport(self, *args)

    def getViewport(self, *args):
        """
        getViewport(self) -> Viewport
        getViewport(self) -> Viewport
        """
        return _osg.CameraRef_getViewport(self, *args)

    def setTransformOrder(self, *args):
        """setTransformOrder(self, TransformOrder order)"""
        return _osg.CameraRef_setTransformOrder(self, *args)

    def getTransformOrder(self):
        """getTransformOrder(self) -> TransformOrder"""
        return _osg.CameraRef_getTransformOrder(self)

    def setProjectionResizePolicy(self, *args):
        """setProjectionResizePolicy(self, ProjectionResizePolicy policy)"""
        return _osg.CameraRef_setProjectionResizePolicy(self, *args)

    def getProjectionResizePolicy(self):
        """getProjectionResizePolicy(self) -> ProjectionResizePolicy"""
        return _osg.CameraRef_getProjectionResizePolicy(self)

    def setProjectionMatrix(self, *args):
        """
        setProjectionMatrix(self, Matrixf matrix)
        setProjectionMatrix(self, Matrixd matrix)
        """
        return _osg.CameraRef_setProjectionMatrix(self, *args)

    def setProjectionMatrixAsOrtho(self, *args):
        """
        setProjectionMatrixAsOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.CameraRef_setProjectionMatrixAsOrtho(self, *args)

    def setProjectionMatrixAsOrtho2D(self, *args):
        """setProjectionMatrixAsOrtho2D(self, double left, double right, double bottom, double top)"""
        return _osg.CameraRef_setProjectionMatrixAsOrtho2D(self, *args)

    def setProjectionMatrixAsFrustum(self, *args):
        """
        setProjectionMatrixAsFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar)
        """
        return _osg.CameraRef_setProjectionMatrixAsFrustum(self, *args)

    def setProjectionMatrixAsPerspective(self, *args):
        """setProjectionMatrixAsPerspective(self, double fovy, double aspectRatio, double zNear, double zFar)"""
        return _osg.CameraRef_setProjectionMatrixAsPerspective(self, *args)

    def getProjectionMatrix(self, *args):
        """
        getProjectionMatrix(self) -> Matrixd
        getProjectionMatrix(self) -> Matrixd
        """
        return _osg.CameraRef_getProjectionMatrix(self, *args)

    def getProjectionMatrixAsOrtho(self, *args):
        """
        getProjectionMatrixAsOrtho(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.CameraRef_getProjectionMatrixAsOrtho(self, *args)

    def getProjectionMatrixAsFrustum(self, *args):
        """
        getProjectionMatrixAsFrustum(self, double left, double right, double bottom, double top, 
            double zNear, double zFar) -> bool
        """
        return _osg.CameraRef_getProjectionMatrixAsFrustum(self, *args)

    def getProjectionMatrixAsPerspective(self, *args):
        """getProjectionMatrixAsPerspective(self, double fovy, double aspectRatio, double zNear, double zFar) -> bool"""
        return _osg.CameraRef_getProjectionMatrixAsPerspective(self, *args)

    def setViewMatrix(self, *args):
        """
        setViewMatrix(self, Matrixf matrix)
        setViewMatrix(self, Matrixd matrix)
        """
        return _osg.CameraRef_setViewMatrix(self, *args)

    def getViewMatrix(self, *args):
        """
        getViewMatrix(self) -> Matrixd
        getViewMatrix(self) -> Matrixd
        """
        return _osg.CameraRef_getViewMatrix(self, *args)

    def setViewMatrixAsLookAt(self, *args):
        """setViewMatrixAsLookAt(self, Vec3d eye, Vec3d center, Vec3d up)"""
        return _osg.CameraRef_setViewMatrixAsLookAt(self, *args)

    def getViewMatrixAsLookAt(self, *args):
        """
        getViewMatrixAsLookAt(self, Vec3d eye, Vec3d center, Vec3d up, double lookDistance = 1.0)
        getViewMatrixAsLookAt(self, Vec3d eye, Vec3d center, Vec3d up)
        getViewMatrixAsLookAt(self, Vec3f eye, Vec3f center, Vec3f up, float lookDistance = 1.0)
        getViewMatrixAsLookAt(self, Vec3f eye, Vec3f center, Vec3f up)
        """
        return _osg.CameraRef_getViewMatrixAsLookAt(self, *args)

    def getInverseViewMatrix(self):
        """getInverseViewMatrix(self) -> Matrixd"""
        return _osg.CameraRef_getInverseViewMatrix(self)

    def setRenderOrder(self, *args):
        """
        setRenderOrder(self, RenderOrder order, int orderNum = 0)
        setRenderOrder(self, RenderOrder order)
        """
        return _osg.CameraRef_setRenderOrder(self, *args)

    def getRenderOrder(self):
        """getRenderOrder(self) -> RenderOrder"""
        return _osg.CameraRef_getRenderOrder(self)

    def getRenderOrderNum(self):
        """getRenderOrderNum(self) -> int"""
        return _osg.CameraRef_getRenderOrderNum(self)

    def isRenderToTextureCamera(self):
        """isRenderToTextureCamera(self) -> bool"""
        return _osg.CameraRef_isRenderToTextureCamera(self)

    def setRenderTargetImplementation(self, *args):
        """
        setRenderTargetImplementation(self, RenderTargetImplementation impl)
        setRenderTargetImplementation(self, RenderTargetImplementation impl, RenderTargetImplementation fallback)
        """
        return _osg.CameraRef_setRenderTargetImplementation(self, *args)

    def getRenderTargetImplementation(self):
        """getRenderTargetImplementation(self) -> RenderTargetImplementation"""
        return _osg.CameraRef_getRenderTargetImplementation(self)

    def getRenderTargetFallback(self):
        """getRenderTargetFallback(self) -> RenderTargetImplementation"""
        return _osg.CameraRef_getRenderTargetFallback(self)

    def setDrawBuffer(self, *args):
        """setDrawBuffer(self, GLenum buffer)"""
        return _osg.CameraRef_setDrawBuffer(self, *args)

    def getDrawBuffer(self):
        """getDrawBuffer(self) -> GLenum"""
        return _osg.CameraRef_getDrawBuffer(self)

    def setReadBuffer(self, *args):
        """setReadBuffer(self, GLenum buffer)"""
        return _osg.CameraRef_setReadBuffer(self, *args)

    def getReadBuffer(self):
        """getReadBuffer(self) -> GLenum"""
        return _osg.CameraRef_getReadBuffer(self)

    __swig_getmethods__["FACE_CONTROLLED_BY_GEOMETRY_SHADER"] = _osg.CameraRef_FACE_CONTROLLED_BY_GEOMETRY_SHADER_get
    if _newclass:FACE_CONTROLLED_BY_GEOMETRY_SHADER = _swig_property(_osg.CameraRef_FACE_CONTROLLED_BY_GEOMETRY_SHADER_get)
    def attach(self, *args):
        """
        attach(self, BufferComponent buffer, GLenum internalFormat)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0, bool mipMapGeneration = False, 
            unsigned int multisampleSamples = 0, 
            unsigned int multisampleColorSamples = 0)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0, bool mipMapGeneration = False, 
            unsigned int multisampleSamples = 0)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0, bool mipMapGeneration = False)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0, 
            unsigned int face = 0)
        attach(self, BufferComponent buffer, Texture texture, unsigned int level = 0)
        attach(self, BufferComponent buffer, Texture texture)
        attach(self, BufferComponent buffer, Image image, unsigned int multisampleSamples = 0, 
            unsigned int multisampleColorSamples = 0)
        attach(self, BufferComponent buffer, Image image, unsigned int multisampleSamples = 0)
        attach(self, BufferComponent buffer, Image image)
        """
        return _osg.CameraRef_attach(self, *args)

    def detach(self, *args):
        """detach(self, BufferComponent buffer)"""
        return _osg.CameraRef_detach(self, *args)

    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            ImplicitBufferAttachmentMask resolveMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self)
        """
        return _osg.CameraRef_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.CameraRef_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.CameraRef_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self, effectiveMask = False):
        """
        getImplicitBufferAttachmentRenderMask(self, bool effectiveMask = False) -> ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentRenderMask(self) -> ImplicitBufferAttachmentMask
        """
        return _osg.CameraRef_getImplicitBufferAttachmentRenderMask(self, effectiveMask)

    def getImplicitBufferAttachmentResolveMask(self, effectiveMask = False):
        """
        getImplicitBufferAttachmentResolveMask(self, bool effectiveMask = False) -> ImplicitBufferAttachmentMask
        getImplicitBufferAttachmentResolveMask(self) -> ImplicitBufferAttachmentMask
        """
        return _osg.CameraRef_getImplicitBufferAttachmentResolveMask(self, effectiveMask)

    def createCameraThread(self):
        """createCameraThread(self)"""
        return _osg.CameraRef_createCameraThread(self)

    def setGraphicsContext(self, *args):
        """setGraphicsContext(self, GraphicsContext context)"""
        return _osg.CameraRef_setGraphicsContext(self, *args)

    def getGraphicsContext(self, *args):
        """
        getGraphicsContext(self) -> GraphicsContext
        getGraphicsContext(self) -> GraphicsContext
        """
        return _osg.CameraRef_getGraphicsContext(self, *args)

    def setRenderer(self, *args):
        """setRenderer(self, GraphicsOperation rc)"""
        return _osg.CameraRef_setRenderer(self, *args)

    def getRenderer(self, *args):
        """
        getRenderer(self) -> GraphicsOperation
        getRenderer(self) -> GraphicsOperation
        """
        return _osg.CameraRef_getRenderer(self, *args)

    def setRenderingCache(self, *args):
        """setRenderingCache(self, Object rc)"""
        return _osg.CameraRef_setRenderingCache(self, *args)

    def getRenderingCache(self, *args):
        """
        getRenderingCache(self) -> Object
        getRenderingCache(self) -> Object
        """
        return _osg.CameraRef_getRenderingCache(self, *args)

    def setInitialDrawCallback(self, *args):
        """setInitialDrawCallback(self, DrawCallback cb)"""
        return _osg.CameraRef_setInitialDrawCallback(self, *args)

    def getInitialDrawCallback(self, *args):
        """
        getInitialDrawCallback(self) -> DrawCallback
        getInitialDrawCallback(self) -> DrawCallback
        """
        return _osg.CameraRef_getInitialDrawCallback(self, *args)

    def setPreDrawCallback(self, *args):
        """setPreDrawCallback(self, DrawCallback cb)"""
        return _osg.CameraRef_setPreDrawCallback(self, *args)

    def getPreDrawCallback(self, *args):
        """
        getPreDrawCallback(self) -> DrawCallback
        getPreDrawCallback(self) -> DrawCallback
        """
        return _osg.CameraRef_getPreDrawCallback(self, *args)

    def setPostDrawCallback(self, *args):
        """setPostDrawCallback(self, DrawCallback cb)"""
        return _osg.CameraRef_setPostDrawCallback(self, *args)

    def getPostDrawCallback(self, *args):
        """
        getPostDrawCallback(self) -> DrawCallback
        getPostDrawCallback(self) -> DrawCallback
        """
        return _osg.CameraRef_getPostDrawCallback(self, *args)

    def setFinalDrawCallback(self, *args):
        """setFinalDrawCallback(self, DrawCallback cb)"""
        return _osg.CameraRef_setFinalDrawCallback(self, *args)

    def getFinalDrawCallback(self, *args):
        """
        getFinalDrawCallback(self) -> DrawCallback
        getFinalDrawCallback(self) -> DrawCallback
        """
        return _osg.CameraRef_getFinalDrawCallback(self, *args)

    def getDataChangeMutex(self):
        """getDataChangeMutex(self) -> OpenThreads::Mutex"""
        return _osg.CameraRef_getDataChangeMutex(self)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int maxSize)"""
        return _osg.CameraRef_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osg.CameraRef_releaseGLObjects(self, arg0)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor arg1) -> bool"""
        return _osg.CameraRef_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor arg1) -> bool"""
        return _osg.CameraRef_computeWorldToLocalMatrix(self, *args)

    def inheritCullSettings(self, *args):
        """inheritCullSettings(self, CullSettings settings, unsigned int inheritanceMask)"""
        return _osg.CameraRef_inheritCullSettings(self, *args)

    def asTransform(self, *args):
        """
        asTransform(self) -> Transform
        asTransform(self) -> Transform
        """
        return _osg.CameraRef_asTransform(self, *args)

    def asMatrixTransform(self, *args):
        """
        asMatrixTransform(self) -> MatrixTransform
        asMatrixTransform(self) -> MatrixTransform
        """
        return _osg.CameraRef_asMatrixTransform(self, *args)

    def asPositionAttitudeTransform(self, *args):
        """
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        asPositionAttitudeTransform(self) -> PositionAttitudeTransform
        """
        return _osg.CameraRef_asPositionAttitudeTransform(self, *args)

    def setReferenceFrame(self, *args):
        """setReferenceFrame(self, ReferenceFrame rf)"""
        return _osg.CameraRef_setReferenceFrame(self, *args)

    def getReferenceFrame(self):
        """getReferenceFrame(self) -> ReferenceFrame"""
        return _osg.CameraRef_getReferenceFrame(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osg.CameraRef_computeBound(self)

    def asGroup(self, *args):
        """
        asGroup(self) -> Group
        asGroup(self) -> Group
        """
        return _osg.CameraRef_asGroup(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osg.CameraRef_traverse(self, *args)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osg.CameraRef_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osg.CameraRef_insertChild(self, *args)

    def removeChild(self, *args):
        """
        removeChild(self, Node child) -> bool
        removeChild(self, unsigned int pos, unsigned int numChildrenToRemove = 1) -> bool
        removeChild(self, unsigned int pos) -> bool
        """
        return _osg.CameraRef_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(self, unsigned int pos, unsigned int numChildrenToRemove) -> bool"""
        return _osg.CameraRef_removeChildren(self, *args)

    def replaceChild(self, *args):
        """replaceChild(self, Node origChild, Node newChild) -> bool"""
        return _osg.CameraRef_replaceChild(self, *args)

    def getNumChildren(self):
        """getNumChildren(self) -> unsigned int"""
        return _osg.CameraRef_getNumChildren(self)

    def setChild(self, *args):
        """setChild(self, unsigned int i, Node node) -> bool"""
        return _osg.CameraRef_setChild(self, *args)

    def getChild(self, *args):
        """
        getChild(self, unsigned int i) -> Node
        getChild(self, unsigned int i) -> Node
        """
        return _osg.CameraRef_getChild(self, *args)

    def containsNode(self, *args):
        """containsNode(self, Node node) -> bool"""
        return _osg.CameraRef_containsNode(self, *args)

    def getChildIndex(self, *args):
        """getChildIndex(self, Node node) -> unsigned int"""
        return _osg.CameraRef_getChildIndex(self, *args)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.CameraRef_setThreadSafeRefUnref(self, *args)

    def asProxyNode(self):
        """asProxyNode(self) -> ProxyNode"""
        return _osg.CameraRef_asProxyNode(self)

    def asSwitch(self, *args):
        """
        asSwitch(self) -> Switch
        asSwitch(self) -> Switch
        """
        return _osg.CameraRef_asSwitch(self, *args)

    def asGeode(self, *args):
        """
        asGeode(self) -> Geode
        asGeode(self) -> Geode
        """
        return _osg.CameraRef_asGeode(self, *args)

    def asTerrain(self, *args):
        """
        asTerrain(self) -> Terrain
        asTerrain(self) -> Terrain
        """
        return _osg.CameraRef_asTerrain(self, *args)

    def ascend(self, *args):
        """ascend(self, NodeVisitor nv)"""
        return _osg.CameraRef_ascend(self, *args)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> Group
        getParent(self, unsigned int i) -> Group
        """
        return _osg.CameraRef_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.CameraRef_getNumParents(self)

    def getParentalNodePaths(self, haltTraversalAtNode = None):
        """
        getParentalNodePaths(self, Node haltTraversalAtNode = None) -> NodePathList
        getParentalNodePaths(self) -> NodePathList
        """
        return _osg.CameraRef_getParentalNodePaths(self, haltTraversalAtNode)

    def getWorldMatrices(self, haltTraversalAtNode = None):
        """
        getWorldMatrices(self, Node haltTraversalAtNode = None) -> MatrixList
        getWorldMatrices(self) -> MatrixList
        """
        return _osg.CameraRef_getWorldMatrices(self, haltTraversalAtNode)

    def setUpdateCallback(self, *args):
        """setUpdateCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_setUpdateCallback(self, *args)

    def getUpdateCallback(self, *args):
        """
        getUpdateCallback(self) -> NodeCallback
        getUpdateCallback(self) -> NodeCallback
        """
        return _osg.CameraRef_getUpdateCallback(self, *args)

    def addUpdateCallback(self, *args):
        """addUpdateCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_addUpdateCallback(self, *args)

    def removeUpdateCallback(self, *args):
        """removeUpdateCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_removeUpdateCallback(self, *args)

    def getNumChildrenRequiringUpdateTraversal(self):
        """getNumChildrenRequiringUpdateTraversal(self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenRequiringUpdateTraversal(self)

    def setEventCallback(self, *args):
        """setEventCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_setEventCallback(self, *args)

    def getEventCallback(self, *args):
        """
        getEventCallback(self) -> NodeCallback
        getEventCallback(self) -> NodeCallback
        """
        return _osg.CameraRef_getEventCallback(self, *args)

    def addEventCallback(self, *args):
        """addEventCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_addEventCallback(self, *args)

    def removeEventCallback(self, *args):
        """removeEventCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_removeEventCallback(self, *args)

    def getNumChildrenRequiringEventTraversal(self):
        """getNumChildrenRequiringEventTraversal(self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenRequiringEventTraversal(self)

    def setCullCallback(self, *args):
        """setCullCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_setCullCallback(self, *args)

    def getCullCallback(self, *args):
        """
        getCullCallback(self) -> NodeCallback
        getCullCallback(self) -> NodeCallback
        """
        return _osg.CameraRef_getCullCallback(self, *args)

    def addCullCallback(self, *args):
        """addCullCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_addCullCallback(self, *args)

    def removeCullCallback(self, *args):
        """removeCullCallback(self, NodeCallback nc)"""
        return _osg.CameraRef_removeCullCallback(self, *args)

    def setCullingActive(self, *args):
        """setCullingActive(self, bool active)"""
        return _osg.CameraRef_setCullingActive(self, *args)

    def getCullingActive(self):
        """getCullingActive(self) -> bool"""
        return _osg.CameraRef_getCullingActive(self)

    def getNumChildrenWithCullingDisabled(self):
        """getNumChildrenWithCullingDisabled(self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenWithCullingDisabled(self)

    def isCullingActive(self):
        """isCullingActive(self) -> bool"""
        return _osg.CameraRef_isCullingActive(self)

    def getNumChildrenWithOccluderNodes(self):
        """getNumChildrenWithOccluderNodes(self) -> unsigned int"""
        return _osg.CameraRef_getNumChildrenWithOccluderNodes(self)

    def containsOccluderNodes(self):
        """containsOccluderNodes(self) -> bool"""
        return _osg.CameraRef_containsOccluderNodes(self)

    def setNodeMask(self, *args):
        """setNodeMask(self, NodeMask nm)"""
        return _osg.CameraRef_setNodeMask(self, *args)

    def getNodeMask(self):
        """getNodeMask(self) -> NodeMask"""
        return _osg.CameraRef_getNodeMask(self)

    def setStateSet(self, *args):
        """setStateSet(self, StateSet stateset)"""
        return _osg.CameraRef_setStateSet(self, *args)

    def getOrCreateStateSet(self):
        """getOrCreateStateSet(self) -> StateSet"""
        return _osg.CameraRef_getOrCreateStateSet(self)

    def getStateSet(self, *args):
        """
        getStateSet(self) -> StateSet
        getStateSet(self) -> StateSet
        """
        return _osg.CameraRef_getStateSet(self, *args)

    def setDescriptions(self, *args):
        """setDescriptions(self, DescriptionList descriptions)"""
        return _osg.CameraRef_setDescriptions(self, *args)

    def getDescriptions(self, *args):
        """
        getDescriptions(self) -> DescriptionList
        getDescriptions(self) -> DescriptionList
        """
        return _osg.CameraRef_getDescriptions(self, *args)

    def getDescription(self, *args):
        """
        getDescription(self, unsigned int i) -> string
        getDescription(self, unsigned int i) -> string
        """
        return _osg.CameraRef_getDescription(self, *args)

    def getNumDescriptions(self):
        """getNumDescriptions(self) -> unsigned int"""
        return _osg.CameraRef_getNumDescriptions(self)

    def addDescription(self, *args):
        """addDescription(self, string desc)"""
        return _osg.CameraRef_addDescription(self, *args)

    def setInitialBound(self, *args):
        """setInitialBound(self, BoundingSphere bsphere)"""
        return _osg.CameraRef_setInitialBound(self, *args)

    def getInitialBound(self):
        """getInitialBound(self) -> BoundingSphere"""
        return _osg.CameraRef_getInitialBound(self)

    def dirtyBound(self):
        """dirtyBound(self)"""
        return _osg.CameraRef_dirtyBound(self)

    def getBound(self):
        """getBound(self) -> BoundingSphere"""
        return _osg.CameraRef_getBound(self)

    def asLOD(self):
        """asLOD(self) -> LOD"""
        return _osg.CameraRef_asLOD(self)

    def setName(self, *args):
        """
        setName(self, string name)
        setName(self, char name)
        """
        return _osg.CameraRef_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.CameraRef_getName(self)

    def setDataVariance(self, *args):
        """setDataVariance(self, DataVariance dv)"""
        return _osg.CameraRef_setDataVariance(self, *args)

    def getDataVariance(self):
        """getDataVariance(self) -> DataVariance"""
        return _osg.CameraRef_getDataVariance(self)

    def computeDataVariance(self):
        """computeDataVariance(self)"""
        return _osg.CameraRef_computeDataVariance(self)

    def setUserDataContainer(self, *args):
        """setUserDataContainer(self, UserDataContainer udc)"""
        return _osg.CameraRef_setUserDataContainer(self, *args)

    def getUserDataContainer(self, *args):
        """
        getUserDataContainer(self) -> UserDataContainer
        getUserDataContainer(self) -> UserDataContainer
        """
        return _osg.CameraRef_getUserDataContainer(self, *args)

    def getOrCreateUserDataContainer(self):
        """getOrCreateUserDataContainer(self) -> UserDataContainer"""
        return _osg.CameraRef_getOrCreateUserDataContainer(self)

    def setUserData(self, *args):
        """setUserData(self, Referenced obj)"""
        return _osg.CameraRef_setUserData(self, *args)

    def getUserData(self, *args):
        """
        getUserData(self) -> Referenced
        getUserData(self) -> Referenced
        """
        return _osg.CameraRef_getUserData(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.CameraRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.CameraRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.CameraRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.CameraRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.CameraRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.CameraRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.CameraRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.CameraRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.CameraRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.CameraRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.CameraRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.CameraRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.CameraRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.CameraRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.CameraRef_getDeleteHandler(self)

    def setDefaults(self):
        """setDefaults(self)"""
        return _osg.CameraRef_setDefaults(self)

    def setInheritanceMask(self, *args):
        """setInheritanceMask(self, InheritanceMask mask)"""
        return _osg.CameraRef_setInheritanceMask(self, *args)

    def getInheritanceMask(self):
        """getInheritanceMask(self) -> InheritanceMask"""
        return _osg.CameraRef_getInheritanceMask(self)

    def setCullSettings(self, *args):
        """setCullSettings(self, CullSettings settings)"""
        return _osg.CameraRef_setCullSettings(self, *args)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(self)"""
        return _osg.CameraRef_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(self, ArgumentParser arguments)"""
        return _osg.CameraRef_readCommandLine(self, *args)

    def setInheritanceMaskActionOnAttributeSetting(self, *args):
        """setInheritanceMaskActionOnAttributeSetting(self, InheritanceMaskActionOnAttributeSetting action)"""
        return _osg.CameraRef_setInheritanceMaskActionOnAttributeSetting(self, *args)

    def getInheritanceMaskActionOnAttributeSetting(self):
        """getInheritanceMaskActionOnAttributeSetting(self) -> InheritanceMaskActionOnAttributeSetting"""
        return _osg.CameraRef_getInheritanceMaskActionOnAttributeSetting(self)

    def applyMaskAction(self, *args):
        """applyMaskAction(self, unsigned int maskBit)"""
        return _osg.CameraRef_applyMaskAction(self, *args)

    def setImpostorsActive(self, *args):
        """setImpostorsActive(self, bool active)"""
        return _osg.CameraRef_setImpostorsActive(self, *args)

    def getImpostorsActive(self):
        """getImpostorsActive(self) -> bool"""
        return _osg.CameraRef_getImpostorsActive(self)

    def setImpostorPixelErrorThreshold(self, *args):
        """setImpostorPixelErrorThreshold(self, float numPixels)"""
        return _osg.CameraRef_setImpostorPixelErrorThreshold(self, *args)

    def getImpostorPixelErrorThreshold(self):
        """getImpostorPixelErrorThreshold(self) -> float"""
        return _osg.CameraRef_getImpostorPixelErrorThreshold(self)

    def setDepthSortImpostorSprites(self, *args):
        """setDepthSortImpostorSprites(self, bool doDepthSort)"""
        return _osg.CameraRef_setDepthSortImpostorSprites(self, *args)

    def getDepthSortImpostorSprites(self):
        """getDepthSortImpostorSprites(self) -> bool"""
        return _osg.CameraRef_getDepthSortImpostorSprites(self)

    def setNumberOfFrameToKeepImpostorSprites(self, *args):
        """setNumberOfFrameToKeepImpostorSprites(self, int numFrames)"""
        return _osg.CameraRef_setNumberOfFrameToKeepImpostorSprites(self, *args)

    def getNumberOfFrameToKeepImpostorSprites(self):
        """getNumberOfFrameToKeepImpostorSprites(self) -> int"""
        return _osg.CameraRef_getNumberOfFrameToKeepImpostorSprites(self)

    def setComputeNearFarMode(self, *args):
        """setComputeNearFarMode(self, ComputeNearFarMode cnfm)"""
        return _osg.CameraRef_setComputeNearFarMode(self, *args)

    def getComputeNearFarMode(self):
        """getComputeNearFarMode(self) -> ComputeNearFarMode"""
        return _osg.CameraRef_getComputeNearFarMode(self)

    def setNearFarRatio(self, *args):
        """setNearFarRatio(self, double ratio)"""
        return _osg.CameraRef_setNearFarRatio(self, *args)

    def getNearFarRatio(self):
        """getNearFarRatio(self) -> double"""
        return _osg.CameraRef_getNearFarRatio(self)

    def setCullingMode(self, *args):
        """setCullingMode(self, CullingMode mode)"""
        return _osg.CameraRef_setCullingMode(self, *args)

    def getCullingMode(self):
        """getCullingMode(self) -> CullingMode"""
        return _osg.CameraRef_getCullingMode(self)

    def setCullMask(self, *args):
        """setCullMask(self, NodeMask nm)"""
        return _osg.CameraRef_setCullMask(self, *args)

    def getCullMask(self):
        """getCullMask(self) -> NodeMask"""
        return _osg.CameraRef_getCullMask(self)

    def setCullMaskLeft(self, *args):
        """setCullMaskLeft(self, NodeMask nm)"""
        return _osg.CameraRef_setCullMaskLeft(self, *args)

    def getCullMaskLeft(self):
        """getCullMaskLeft(self) -> NodeMask"""
        return _osg.CameraRef_getCullMaskLeft(self)

    def setCullMaskRight(self, *args):
        """setCullMaskRight(self, NodeMask nm)"""
        return _osg.CameraRef_setCullMaskRight(self, *args)

    def getCullMaskRight(self):
        """getCullMaskRight(self) -> NodeMask"""
        return _osg.CameraRef_getCullMaskRight(self)

    def setLODScale(self, *args):
        """setLODScale(self, float scale)"""
        return _osg.CameraRef_setLODScale(self, *args)

    def getLODScale(self):
        """getLODScale(self) -> float"""
        return _osg.CameraRef_getLODScale(self)

    def setSmallFeatureCullingPixelSize(self, *args):
        """setSmallFeatureCullingPixelSize(self, float value)"""
        return _osg.CameraRef_setSmallFeatureCullingPixelSize(self, *args)

    def getSmallFeatureCullingPixelSize(self):
        """getSmallFeatureCullingPixelSize(self) -> float"""
        return _osg.CameraRef_getSmallFeatureCullingPixelSize(self)

    def write(self, *args):
        """write(self, std::ostream out)"""
        return _osg.CameraRef_write(self, *args)

CameraRef_swigregister = _osg.CameraRef_swigregister
CameraRef_swigregister(CameraRef)

class DisplaySettingsRef(_object):
    """Proxy of C++ osg::ref_ptr<(osg::DisplaySettings)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplaySettingsRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisplaySettingsRef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DisplaySettingsRef
        __init__(self, DisplaySettings ptr) -> DisplaySettingsRef
        __init__(self, DisplaySettingsRef rp) -> DisplaySettingsRef
        __init__(self, osg::observer_ptr<(osg::DisplaySettings)> optr) -> DisplaySettingsRef
        """
        this = _osg.new_DisplaySettingsRef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_DisplaySettingsRef
    __del__ = lambda self : None;
    def __ref__(self):
        """__ref__(self) -> DisplaySettings"""
        return _osg.DisplaySettingsRef___ref__(self)

    def __deref__(self):
        """__deref__(self) -> DisplaySettings"""
        return _osg.DisplaySettingsRef___deref__(self)

    def get(self):
        """get(self) -> DisplaySettings"""
        return _osg.DisplaySettingsRef_get(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.DisplaySettingsRef_valid(self)

    def release(self):
        """release(self) -> DisplaySettings"""
        return _osg.DisplaySettingsRef_release(self)

    def swap(self, *args):
        """swap(self, DisplaySettingsRef rp)"""
        return _osg.DisplaySettingsRef_swap(self, *args)

    def instance(self):
        """instance(self) -> DisplaySettingsRef"""
        return _osg.DisplaySettingsRef_instance(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(self, DisplaySettings vs)"""
        return _osg.DisplaySettingsRef_setDisplaySettings(self, *args)

    def merge(self, *args):
        """merge(self, DisplaySettings vs)"""
        return _osg.DisplaySettingsRef_merge(self, *args)

    def setDefaults(self):
        """setDefaults(self)"""
        return _osg.DisplaySettingsRef_setDefaults(self)

    def readEnvironmentalVariables(self):
        """readEnvironmentalVariables(self)"""
        return _osg.DisplaySettingsRef_readEnvironmentalVariables(self)

    def readCommandLine(self, *args):
        """readCommandLine(self, ArgumentParser arguments)"""
        return _osg.DisplaySettingsRef_readCommandLine(self, *args)

    def setDisplayType(self, *args):
        """setDisplayType(self, DisplayType type)"""
        return _osg.DisplaySettingsRef_setDisplayType(self, *args)

    def getDisplayType(self):
        """getDisplayType(self) -> DisplayType"""
        return _osg.DisplaySettingsRef_getDisplayType(self)

    def setStereo(self, *args):
        """setStereo(self, bool on)"""
        return _osg.DisplaySettingsRef_setStereo(self, *args)

    def getStereo(self):
        """getStereo(self) -> bool"""
        return _osg.DisplaySettingsRef_getStereo(self)

    def setStereoMode(self, *args):
        """setStereoMode(self, StereoMode mode)"""
        return _osg.DisplaySettingsRef_setStereoMode(self, *args)

    def getStereoMode(self):
        """getStereoMode(self) -> StereoMode"""
        return _osg.DisplaySettingsRef_getStereoMode(self)

    def setEyeSeparation(self, *args):
        """setEyeSeparation(self, float eyeSeparation)"""
        return _osg.DisplaySettingsRef_setEyeSeparation(self, *args)

    def getEyeSeparation(self):
        """getEyeSeparation(self) -> float"""
        return _osg.DisplaySettingsRef_getEyeSeparation(self)

    def setSplitStereoHorizontalEyeMapping(self, *args):
        """setSplitStereoHorizontalEyeMapping(self, SplitStereoHorizontalEyeMapping m)"""
        return _osg.DisplaySettingsRef_setSplitStereoHorizontalEyeMapping(self, *args)

    def getSplitStereoHorizontalEyeMapping(self):
        """getSplitStereoHorizontalEyeMapping(self) -> SplitStereoHorizontalEyeMapping"""
        return _osg.DisplaySettingsRef_getSplitStereoHorizontalEyeMapping(self)

    def setSplitStereoHorizontalSeparation(self, *args):
        """setSplitStereoHorizontalSeparation(self, int s)"""
        return _osg.DisplaySettingsRef_setSplitStereoHorizontalSeparation(self, *args)

    def getSplitStereoHorizontalSeparation(self):
        """getSplitStereoHorizontalSeparation(self) -> int"""
        return _osg.DisplaySettingsRef_getSplitStereoHorizontalSeparation(self)

    def setSplitStereoVerticalEyeMapping(self, *args):
        """setSplitStereoVerticalEyeMapping(self, SplitStereoVerticalEyeMapping m)"""
        return _osg.DisplaySettingsRef_setSplitStereoVerticalEyeMapping(self, *args)

    def getSplitStereoVerticalEyeMapping(self):
        """getSplitStereoVerticalEyeMapping(self) -> SplitStereoVerticalEyeMapping"""
        return _osg.DisplaySettingsRef_getSplitStereoVerticalEyeMapping(self)

    def setSplitStereoVerticalSeparation(self, *args):
        """setSplitStereoVerticalSeparation(self, int s)"""
        return _osg.DisplaySettingsRef_setSplitStereoVerticalSeparation(self, *args)

    def getSplitStereoVerticalSeparation(self):
        """getSplitStereoVerticalSeparation(self) -> int"""
        return _osg.DisplaySettingsRef_getSplitStereoVerticalSeparation(self)

    def setSplitStereoAutoAdjustAspectRatio(self, *args):
        """setSplitStereoAutoAdjustAspectRatio(self, bool flag)"""
        return _osg.DisplaySettingsRef_setSplitStereoAutoAdjustAspectRatio(self, *args)

    def getSplitStereoAutoAdjustAspectRatio(self):
        """getSplitStereoAutoAdjustAspectRatio(self) -> bool"""
        return _osg.DisplaySettingsRef_getSplitStereoAutoAdjustAspectRatio(self)

    def setScreenWidth(self, *args):
        """setScreenWidth(self, float width)"""
        return _osg.DisplaySettingsRef_setScreenWidth(self, *args)

    def getScreenWidth(self):
        """getScreenWidth(self) -> float"""
        return _osg.DisplaySettingsRef_getScreenWidth(self)

    def setScreenHeight(self, *args):
        """setScreenHeight(self, float height)"""
        return _osg.DisplaySettingsRef_setScreenHeight(self, *args)

    def getScreenHeight(self):
        """getScreenHeight(self) -> float"""
        return _osg.DisplaySettingsRef_getScreenHeight(self)

    def setScreenDistance(self, *args):
        """setScreenDistance(self, float distance)"""
        return _osg.DisplaySettingsRef_setScreenDistance(self, *args)

    def getScreenDistance(self):
        """getScreenDistance(self) -> float"""
        return _osg.DisplaySettingsRef_getScreenDistance(self)

    def setDoubleBuffer(self, *args):
        """setDoubleBuffer(self, bool flag)"""
        return _osg.DisplaySettingsRef_setDoubleBuffer(self, *args)

    def getDoubleBuffer(self):
        """getDoubleBuffer(self) -> bool"""
        return _osg.DisplaySettingsRef_getDoubleBuffer(self)

    def setRGB(self, *args):
        """setRGB(self, bool flag)"""
        return _osg.DisplaySettingsRef_setRGB(self, *args)

    def getRGB(self):
        """getRGB(self) -> bool"""
        return _osg.DisplaySettingsRef_getRGB(self)

    def setDepthBuffer(self, *args):
        """setDepthBuffer(self, bool flag)"""
        return _osg.DisplaySettingsRef_setDepthBuffer(self, *args)

    def getDepthBuffer(self):
        """getDepthBuffer(self) -> bool"""
        return _osg.DisplaySettingsRef_getDepthBuffer(self)

    def setMinimumNumAlphaBits(self, *args):
        """setMinimumNumAlphaBits(self, unsigned int bits)"""
        return _osg.DisplaySettingsRef_setMinimumNumAlphaBits(self, *args)

    def getMinimumNumAlphaBits(self):
        """getMinimumNumAlphaBits(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMinimumNumAlphaBits(self)

    def getAlphaBuffer(self):
        """getAlphaBuffer(self) -> bool"""
        return _osg.DisplaySettingsRef_getAlphaBuffer(self)

    def setMinimumNumStencilBits(self, *args):
        """setMinimumNumStencilBits(self, unsigned int bits)"""
        return _osg.DisplaySettingsRef_setMinimumNumStencilBits(self, *args)

    def getMinimumNumStencilBits(self):
        """getMinimumNumStencilBits(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMinimumNumStencilBits(self)

    def getStencilBuffer(self):
        """getStencilBuffer(self) -> bool"""
        return _osg.DisplaySettingsRef_getStencilBuffer(self)

    def setMinimumNumAccumBits(self, *args):
        """
        setMinimumNumAccumBits(self, unsigned int red, unsigned int green, unsigned int blue, 
            unsigned int alpha)
        """
        return _osg.DisplaySettingsRef_setMinimumNumAccumBits(self, *args)

    def getMinimumNumAccumRedBits(self):
        """getMinimumNumAccumRedBits(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMinimumNumAccumRedBits(self)

    def getMinimumNumAccumGreenBits(self):
        """getMinimumNumAccumGreenBits(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMinimumNumAccumGreenBits(self)

    def getMinimumNumAccumBlueBits(self):
        """getMinimumNumAccumBlueBits(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMinimumNumAccumBlueBits(self)

    def getMinimumNumAccumAlphaBits(self):
        """getMinimumNumAccumAlphaBits(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMinimumNumAccumAlphaBits(self)

    def getAccumBuffer(self):
        """getAccumBuffer(self) -> bool"""
        return _osg.DisplaySettingsRef_getAccumBuffer(self)

    def setMaxNumberOfGraphicsContexts(self, *args):
        """setMaxNumberOfGraphicsContexts(self, unsigned int num)"""
        return _osg.DisplaySettingsRef_setMaxNumberOfGraphicsContexts(self, *args)

    def getMaxNumberOfGraphicsContexts(self):
        """getMaxNumberOfGraphicsContexts(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMaxNumberOfGraphicsContexts(self)

    def setNumMultiSamples(self, *args):
        """setNumMultiSamples(self, unsigned int samples)"""
        return _osg.DisplaySettingsRef_setNumMultiSamples(self, *args)

    def getNumMultiSamples(self):
        """getNumMultiSamples(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getNumMultiSamples(self)

    def getMultiSamples(self):
        """getMultiSamples(self) -> bool"""
        return _osg.DisplaySettingsRef_getMultiSamples(self)

    def setCompileContextsHint(self, *args):
        """setCompileContextsHint(self, bool useCompileContexts)"""
        return _osg.DisplaySettingsRef_setCompileContextsHint(self, *args)

    def getCompileContextsHint(self):
        """getCompileContextsHint(self) -> bool"""
        return _osg.DisplaySettingsRef_getCompileContextsHint(self)

    def setSerializeDrawDispatch(self, *args):
        """setSerializeDrawDispatch(self, bool serializeDrawDispatch)"""
        return _osg.DisplaySettingsRef_setSerializeDrawDispatch(self, *args)

    def getSerializeDrawDispatch(self):
        """getSerializeDrawDispatch(self) -> bool"""
        return _osg.DisplaySettingsRef_getSerializeDrawDispatch(self)

    def setNumOfDatabaseThreadsHint(self, *args):
        """setNumOfDatabaseThreadsHint(self, unsigned int numThreads)"""
        return _osg.DisplaySettingsRef_setNumOfDatabaseThreadsHint(self, *args)

    def getNumOfDatabaseThreadsHint(self):
        """getNumOfDatabaseThreadsHint(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getNumOfDatabaseThreadsHint(self)

    def setNumOfHttpDatabaseThreadsHint(self, *args):
        """setNumOfHttpDatabaseThreadsHint(self, unsigned int numThreads)"""
        return _osg.DisplaySettingsRef_setNumOfHttpDatabaseThreadsHint(self, *args)

    def getNumOfHttpDatabaseThreadsHint(self):
        """getNumOfHttpDatabaseThreadsHint(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getNumOfHttpDatabaseThreadsHint(self)

    def setApplication(self, *args):
        """setApplication(self, string application)"""
        return _osg.DisplaySettingsRef_setApplication(self, *args)

    def getApplication(self):
        """getApplication(self) -> string"""
        return _osg.DisplaySettingsRef_getApplication(self)

    def setMaxTexturePoolSize(self, *args):
        """setMaxTexturePoolSize(self, unsigned int size)"""
        return _osg.DisplaySettingsRef_setMaxTexturePoolSize(self, *args)

    def getMaxTexturePoolSize(self):
        """getMaxTexturePoolSize(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMaxTexturePoolSize(self)

    def setMaxBufferObjectPoolSize(self, *args):
        """setMaxBufferObjectPoolSize(self, unsigned int size)"""
        return _osg.DisplaySettingsRef_setMaxBufferObjectPoolSize(self, *args)

    def getMaxBufferObjectPoolSize(self):
        """getMaxBufferObjectPoolSize(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getMaxBufferObjectPoolSize(self)

    def setImplicitBufferAttachmentMask(self, *args):
        """
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT, 
            ImplicitBufferAttachmentMask resolveMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self, ImplicitBufferAttachmentMask renderMask = DEFAULT_IMPLICIT_BUFFER_ATTACHMENT)
        setImplicitBufferAttachmentMask(self)
        """
        return _osg.DisplaySettingsRef_setImplicitBufferAttachmentMask(self, *args)

    def setImplicitBufferAttachmentRenderMask(self, *args):
        """setImplicitBufferAttachmentRenderMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentRenderMask)"""
        return _osg.DisplaySettingsRef_setImplicitBufferAttachmentRenderMask(self, *args)

    def setImplicitBufferAttachmentResolveMask(self, *args):
        """setImplicitBufferAttachmentResolveMask(self, ImplicitBufferAttachmentMask implicitBufferAttachmentResolveMask)"""
        return _osg.DisplaySettingsRef_setImplicitBufferAttachmentResolveMask(self, *args)

    def getImplicitBufferAttachmentRenderMask(self):
        """getImplicitBufferAttachmentRenderMask(self) -> ImplicitBufferAttachmentMask"""
        return _osg.DisplaySettingsRef_getImplicitBufferAttachmentRenderMask(self)

    def getImplicitBufferAttachmentResolveMask(self):
        """getImplicitBufferAttachmentResolveMask(self) -> ImplicitBufferAttachmentMask"""
        return _osg.DisplaySettingsRef_getImplicitBufferAttachmentResolveMask(self)

    def setSwapMethod(self, *args):
        """setSwapMethod(self, SwapMethod swapMethod)"""
        return _osg.DisplaySettingsRef_setSwapMethod(self, *args)

    def getSwapMethod(self):
        """getSwapMethod(self) -> SwapMethod"""
        return _osg.DisplaySettingsRef_getSwapMethod(self)

    def setGLContextVersion(self, *args):
        """setGLContextVersion(self, string version)"""
        return _osg.DisplaySettingsRef_setGLContextVersion(self, *args)

    def getGLContextVersion(self):
        """getGLContextVersion(self) -> string"""
        return _osg.DisplaySettingsRef_getGLContextVersion(self)

    def setGLContextFlags(self, *args):
        """setGLContextFlags(self, unsigned int flags)"""
        return _osg.DisplaySettingsRef_setGLContextFlags(self, *args)

    def getGLContextFlags(self):
        """getGLContextFlags(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getGLContextFlags(self)

    def setGLContextProfileMask(self, *args):
        """setGLContextProfileMask(self, unsigned int mask)"""
        return _osg.DisplaySettingsRef_setGLContextProfileMask(self, *args)

    def getGLContextProfileMask(self):
        """getGLContextProfileMask(self) -> unsigned int"""
        return _osg.DisplaySettingsRef_getGLContextProfileMask(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osg.DisplaySettingsRef_setThreadSafeRefUnref(self, *args)

    def getThreadSafeRefUnref(self):
        """getThreadSafeRefUnref(self) -> bool"""
        return _osg.DisplaySettingsRef_getThreadSafeRefUnref(self)

    def getRefMutex(self):
        """getRefMutex(self) -> OpenThreads::Mutex"""
        return _osg.DisplaySettingsRef_getRefMutex(self)

    def getGlobalReferencedMutex(self):
        """getGlobalReferencedMutex(self) -> OpenThreads::Mutex"""
        return _osg.DisplaySettingsRef_getGlobalReferencedMutex(self)

    def ref(self):
        """ref(self) -> int"""
        return _osg.DisplaySettingsRef_ref(self)

    def unref(self):
        """unref(self) -> int"""
        return _osg.DisplaySettingsRef_unref(self)

    def unref_nodelete(self):
        """unref_nodelete(self) -> int"""
        return _osg.DisplaySettingsRef_unref_nodelete(self)

    def referenceCount(self):
        """referenceCount(self) -> int"""
        return _osg.DisplaySettingsRef_referenceCount(self)

    def getObserverSet(self):
        """getObserverSet(self) -> ObserverSet"""
        return _osg.DisplaySettingsRef_getObserverSet(self)

    def getOrCreateObserverSet(self):
        """getOrCreateObserverSet(self) -> ObserverSet"""
        return _osg.DisplaySettingsRef_getOrCreateObserverSet(self)

    def addObserver(self, *args):
        """addObserver(self, Observer observer)"""
        return _osg.DisplaySettingsRef_addObserver(self, *args)

    def removeObserver(self, *args):
        """removeObserver(self, Observer observer)"""
        return _osg.DisplaySettingsRef_removeObserver(self, *args)

    def setThreadSafeReferenceCounting(self, *args):
        """setThreadSafeReferenceCounting(self, bool enableThreadSafeReferenceCounting)"""
        return _osg.DisplaySettingsRef_setThreadSafeReferenceCounting(self, *args)

    def getThreadSafeReferenceCounting(self):
        """getThreadSafeReferenceCounting(self) -> bool"""
        return _osg.DisplaySettingsRef_getThreadSafeReferenceCounting(self)

    def setDeleteHandler(self, *args):
        """setDeleteHandler(self, DeleteHandler handler)"""
        return _osg.DisplaySettingsRef_setDeleteHandler(self, *args)

    def getDeleteHandler(self):
        """getDeleteHandler(self) -> DeleteHandler"""
        return _osg.DisplaySettingsRef_getDeleteHandler(self)

DisplaySettingsRef_swigregister = _osg.DisplaySettingsRef_swigregister
DisplaySettingsRef_swigregister(DisplaySettingsRef)

class BoundingBoxf(_object):
    """Proxy of C++ osg::BoundingBoxImpl<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingBoxf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingBoxf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_min"] = _osg.BoundingBoxf__min_set
    __swig_getmethods__["_min"] = _osg.BoundingBoxf__min_get
    if _newclass:_min = _swig_property(_osg.BoundingBoxf__min_get, _osg.BoundingBoxf__min_set)
    __swig_setmethods__["_max"] = _osg.BoundingBoxf__max_set
    __swig_getmethods__["_max"] = _osg.BoundingBoxf__max_get
    if _newclass:_max = _swig_property(_osg.BoundingBoxf__max_get, _osg.BoundingBoxf__max_set)
    def __init__(self, *args): 
        """
        __init__(self) -> BoundingBoxf
        __init__(self, value_type xmin, value_type ymin, value_type zmin, 
            value_type xmax, value_type ymax, value_type zmax) -> BoundingBoxf
        __init__(self, vec_type min, vec_type max) -> BoundingBoxf
        """
        this = _osg.new_BoundingBoxf(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self):
        """init(self)"""
        return _osg.BoundingBoxf_init(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.BoundingBoxf_valid(self)

    def set(self, *args):
        """
        set(self, value_type xmin, value_type ymin, value_type zmin, 
            value_type xmax, value_type ymax, value_type zmax)
        set(self, vec_type min, vec_type max)
        """
        return _osg.BoundingBoxf_set(self, *args)

    def xMin(self):
        """xMin(self) -> value_type"""
        return _osg.BoundingBoxf_xMin(self)

    def yMin(self):
        """yMin(self) -> value_type"""
        return _osg.BoundingBoxf_yMin(self)

    def zMin(self):
        """zMin(self) -> value_type"""
        return _osg.BoundingBoxf_zMin(self)

    def xMax(self):
        """xMax(self) -> value_type"""
        return _osg.BoundingBoxf_xMax(self)

    def yMax(self):
        """yMax(self) -> value_type"""
        return _osg.BoundingBoxf_yMax(self)

    def zMax(self):
        """zMax(self) -> value_type"""
        return _osg.BoundingBoxf_zMax(self)

    def center(self):
        """center(self) -> vec_type"""
        return _osg.BoundingBoxf_center(self)

    def radius(self):
        """radius(self) -> value_type"""
        return _osg.BoundingBoxf_radius(self)

    def radius2(self):
        """radius2(self) -> value_type"""
        return _osg.BoundingBoxf_radius2(self)

    def corner(self, *args):
        """corner(self, unsigned int pos) -> vec_type"""
        return _osg.BoundingBoxf_corner(self, *args)

    def expandBy(self, *args):
        """
        expandBy(self, vec_type v)
        expandBy(self, value_type x, value_type y, value_type z)
        expandBy(self, BoundingBoxf bb)
        expandBy(self, BoundingSpheref sh)
        """
        return _osg.BoundingBoxf_expandBy(self, *args)

    def intersect(self, *args):
        """intersect(self, BoundingBoxf bb) -> BoundingBoxf"""
        return _osg.BoundingBoxf_intersect(self, *args)

    def intersects(self, *args):
        """intersects(self, BoundingBoxf bb) -> bool"""
        return _osg.BoundingBoxf_intersects(self, *args)

    def contains(self, *args):
        """contains(self, vec_type v) -> bool"""
        return _osg.BoundingBoxf_contains(self, *args)

    __swig_destroy__ = _osg.delete_BoundingBoxf
    __del__ = lambda self : None;
BoundingBoxf_swigregister = _osg.BoundingBoxf_swigregister
BoundingBoxf_swigregister(BoundingBoxf)

class BoundingSpheref(_object):
    """Proxy of C++ osg::BoundingSphereImpl<(osg::Vec3f)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundingSpheref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoundingSpheref, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_center"] = _osg.BoundingSpheref__center_set
    __swig_getmethods__["_center"] = _osg.BoundingSpheref__center_get
    if _newclass:_center = _swig_property(_osg.BoundingSpheref__center_get, _osg.BoundingSpheref__center_set)
    __swig_setmethods__["_radius"] = _osg.BoundingSpheref__radius_set
    __swig_getmethods__["_radius"] = _osg.BoundingSpheref__radius_get
    if _newclass:_radius = _swig_property(_osg.BoundingSpheref__radius_get, _osg.BoundingSpheref__radius_set)
    def __init__(self, *args): 
        """
        __init__(self) -> BoundingSpheref
        __init__(self, vec_type center, value_type radius) -> BoundingSpheref
        __init__(self, BoundingSpheref bs) -> BoundingSpheref
        __init__(self, BoundingBoxf bb) -> BoundingSpheref
        """
        this = _osg.new_BoundingSpheref(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self):
        """init(self)"""
        return _osg.BoundingSpheref_init(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osg.BoundingSpheref_valid(self)

    def set(self, *args):
        """set(self, vec_type center, value_type radius)"""
        return _osg.BoundingSpheref_set(self, *args)

    def center(self):
        """center(self) -> vec_type"""
        return _osg.BoundingSpheref_center(self)

    def radius(self):
        """radius(self) -> value_type"""
        return _osg.BoundingSpheref_radius(self)

    def radius2(self):
        """radius2(self) -> value_type"""
        return _osg.BoundingSpheref_radius2(self)

    def expandBy(self, *args):
        """
        expandBy(self, BoundingSpheref sh)
        expandBy(self, BoundingBoxf bb)
        """
        return _osg.BoundingSpheref_expandBy(self, *args)

    def expandRadiusBy(self, *args):
        """
        expandRadiusBy(self, BoundingSpheref sh)
        expandRadiusBy(self, BoundingBoxf bb)
        """
        return _osg.BoundingSpheref_expandRadiusBy(self, *args)

    def contains(self, *args):
        """contains(self, vec_type v) -> bool"""
        return _osg.BoundingSpheref_contains(self, *args)

    def intersects(self, *args):
        """intersects(self, BoundingSpheref bs) -> bool"""
        return _osg.BoundingSpheref_intersects(self, *args)

    __swig_destroy__ = _osg.delete_BoundingSpheref
    __del__ = lambda self : None;
BoundingSpheref_swigregister = _osg.BoundingSpheref_swigregister
BoundingSpheref_swigregister(BoundingSpheref)

BoundingBox = BoundingBoxf
BoundingSphere = BoundingSpheref

OSG_UNIFORM = _osg.OSG_UNIFORM
GL_SAMPLER_1D = _osg.GL_SAMPLER_1D
GL_SAMPLER_2D = _osg.GL_SAMPLER_2D
GL_SAMPLER_3D = _osg.GL_SAMPLER_3D
GL_SAMPLER_1D_SHADOW = _osg.GL_SAMPLER_1D_SHADOW
GL_SAMPLER_2D_SHADOW = _osg.GL_SAMPLER_2D_SHADOW
class Matrix2(_object):
    """Proxy of C++ osg::Matrix2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Matrix2
        __init__(self, Matrix2 mat) -> Matrix2
        __init__(self, float a00, float a01, float a10, float a11) -> Matrix2
        """
        this = _osg.new_Matrix2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Matrix2
    __del__ = lambda self : None;
    def __call__(self, *args):
        """__call__(self, int row, int col) -> float"""
        return _osg.Matrix2___call__(self, *args)

    def set(self, *args):
        """
        set(self, Matrix2 rhs)
        set(self, float ptr)
        set(self, float a00, float a01, float a10, float a11)
        """
        return _osg.Matrix2_set(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> float
        ptr(self) -> float
        """
        return _osg.Matrix2_ptr(self, *args)

    def makeIdentity(self):
        """makeIdentity(self)"""
        return _osg.Matrix2_makeIdentity(self)

Matrix2_swigregister = _osg.Matrix2_swigregister
Matrix2_swigregister(Matrix2)

class Matrix3(_object):
    """Proxy of C++ osg::Matrix3 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Matrix3
        __init__(self, Matrix3 mat) -> Matrix3
        __init__(self, float a00, float a01, float a02, float a10, float a11, 
            float a12, float a20, float a21, float a22) -> Matrix3
        """
        this = _osg.new_Matrix3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Matrix3
    __del__ = lambda self : None;
    def __call__(self, *args):
        """__call__(self, int row, int col) -> float"""
        return _osg.Matrix3___call__(self, *args)

    def set(self, *args):
        """
        set(self, Matrix3 rhs)
        set(self, float ptr)
        set(self, float a00, float a01, float a02, float a10, float a11, 
            float a12, float a20, float a21, float a22)
        """
        return _osg.Matrix3_set(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> float
        ptr(self) -> float
        """
        return _osg.Matrix3_ptr(self, *args)

    def makeIdentity(self):
        """makeIdentity(self)"""
        return _osg.Matrix3_makeIdentity(self)

Matrix3_swigregister = _osg.Matrix3_swigregister
Matrix3_swigregister(Matrix3)

class Uniform(Object):
    """Proxy of C++ osg::Uniform class"""
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uniform, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Uniform, name)
    __repr__ = _swig_repr
    FLOAT = _osg.Uniform_FLOAT
    FLOAT_VEC2 = _osg.Uniform_FLOAT_VEC2
    FLOAT_VEC3 = _osg.Uniform_FLOAT_VEC3
    FLOAT_VEC4 = _osg.Uniform_FLOAT_VEC4
    INT = _osg.Uniform_INT
    INT_VEC2 = _osg.Uniform_INT_VEC2
    INT_VEC3 = _osg.Uniform_INT_VEC3
    INT_VEC4 = _osg.Uniform_INT_VEC4
    BOOL = _osg.Uniform_BOOL
    BOOL_VEC2 = _osg.Uniform_BOOL_VEC2
    BOOL_VEC3 = _osg.Uniform_BOOL_VEC3
    BOOL_VEC4 = _osg.Uniform_BOOL_VEC4
    FLOAT_MAT2 = _osg.Uniform_FLOAT_MAT2
    FLOAT_MAT3 = _osg.Uniform_FLOAT_MAT3
    FLOAT_MAT4 = _osg.Uniform_FLOAT_MAT4
    SAMPLER_1D = _osg.Uniform_SAMPLER_1D
    SAMPLER_2D = _osg.Uniform_SAMPLER_2D
    SAMPLER_3D = _osg.Uniform_SAMPLER_3D
    SAMPLER_CUBE = _osg.Uniform_SAMPLER_CUBE
    SAMPLER_1D_SHADOW = _osg.Uniform_SAMPLER_1D_SHADOW
    SAMPLER_2D_SHADOW = _osg.Uniform_SAMPLER_2D_SHADOW
    SAMPLER_1D_ARRAY = _osg.Uniform_SAMPLER_1D_ARRAY
    SAMPLER_2D_ARRAY = _osg.Uniform_SAMPLER_2D_ARRAY
    SAMPLER_1D_ARRAY_SHADOW = _osg.Uniform_SAMPLER_1D_ARRAY_SHADOW
    SAMPLER_2D_ARRAY_SHADOW = _osg.Uniform_SAMPLER_2D_ARRAY_SHADOW
    FLOAT_MAT2x3 = _osg.Uniform_FLOAT_MAT2x3
    FLOAT_MAT2x4 = _osg.Uniform_FLOAT_MAT2x4
    FLOAT_MAT3x2 = _osg.Uniform_FLOAT_MAT3x2
    FLOAT_MAT3x4 = _osg.Uniform_FLOAT_MAT3x4
    FLOAT_MAT4x2 = _osg.Uniform_FLOAT_MAT4x2
    FLOAT_MAT4x3 = _osg.Uniform_FLOAT_MAT4x3
    SAMPLER_BUFFER = _osg.Uniform_SAMPLER_BUFFER
    SAMPLER_CUBE_SHADOW = _osg.Uniform_SAMPLER_CUBE_SHADOW
    UNSIGNED_INT = _osg.Uniform_UNSIGNED_INT
    UNSIGNED_INT_VEC2 = _osg.Uniform_UNSIGNED_INT_VEC2
    UNSIGNED_INT_VEC3 = _osg.Uniform_UNSIGNED_INT_VEC3
    UNSIGNED_INT_VEC4 = _osg.Uniform_UNSIGNED_INT_VEC4
    INT_SAMPLER_1D = _osg.Uniform_INT_SAMPLER_1D
    INT_SAMPLER_2D = _osg.Uniform_INT_SAMPLER_2D
    INT_SAMPLER_3D = _osg.Uniform_INT_SAMPLER_3D
    INT_SAMPLER_CUBE = _osg.Uniform_INT_SAMPLER_CUBE
    INT_SAMPLER_2D_RECT = _osg.Uniform_INT_SAMPLER_2D_RECT
    INT_SAMPLER_1D_ARRAY = _osg.Uniform_INT_SAMPLER_1D_ARRAY
    INT_SAMPLER_2D_ARRAY = _osg.Uniform_INT_SAMPLER_2D_ARRAY
    INT_SAMPLER_BUFFER = _osg.Uniform_INT_SAMPLER_BUFFER
    UNSIGNED_INT_SAMPLER_1D = _osg.Uniform_UNSIGNED_INT_SAMPLER_1D
    UNSIGNED_INT_SAMPLER_2D = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D
    UNSIGNED_INT_SAMPLER_3D = _osg.Uniform_UNSIGNED_INT_SAMPLER_3D
    UNSIGNED_INT_SAMPLER_CUBE = _osg.Uniform_UNSIGNED_INT_SAMPLER_CUBE
    UNSIGNED_INT_SAMPLER_2D_RECT = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D_RECT
    UNSIGNED_INT_SAMPLER_1D_ARRAY = _osg.Uniform_UNSIGNED_INT_SAMPLER_1D_ARRAY
    UNSIGNED_INT_SAMPLER_2D_ARRAY = _osg.Uniform_UNSIGNED_INT_SAMPLER_2D_ARRAY
    UNSIGNED_INT_SAMPLER_BUFFER = _osg.Uniform_UNSIGNED_INT_SAMPLER_BUFFER
    UNDEFINED = _osg.Uniform_UNDEFINED
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osg.Uniform_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osg.Uniform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osg.Uniform_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osg.Uniform_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osg.Uniform_className(self)

    def setType(self, *args):
        """setType(self, Type t) -> bool"""
        return _osg.Uniform_setType(self, *args)

    def getType(self):
        """getType(self) -> Type"""
        return _osg.Uniform_getType(self)

    def setName(self, *args):
        """setName(self, string name)"""
        return _osg.Uniform_setName(self, *args)

    def setNumElements(self, *args):
        """setNumElements(self, unsigned int numElements)"""
        return _osg.Uniform_setNumElements(self, *args)

    def getNumElements(self):
        """getNumElements(self) -> unsigned int"""
        return _osg.Uniform_getNumElements(self)

    def getInternalArrayNumElements(self):
        """getInternalArrayNumElements(self) -> unsigned int"""
        return _osg.Uniform_getInternalArrayNumElements(self)

    def getTypename(*args):
        """getTypename(Type t) -> char"""
        return _osg.Uniform_getTypename(*args)

    if _newclass:getTypename = staticmethod(getTypename)
    __swig_getmethods__["getTypename"] = lambda x: getTypename
    def getTypeNumComponents(*args):
        """getTypeNumComponents(Type t) -> int"""
        return _osg.Uniform_getTypeNumComponents(*args)

    if _newclass:getTypeNumComponents = staticmethod(getTypeNumComponents)
    __swig_getmethods__["getTypeNumComponents"] = lambda x: getTypeNumComponents
    def getTypeId(*args):
        """getTypeId(string tname) -> Type"""
        return _osg.Uniform_getTypeId(*args)

    if _newclass:getTypeId = staticmethod(getTypeId)
    __swig_getmethods__["getTypeId"] = lambda x: getTypeId
    def getGlApiType(*args):
        """getGlApiType(Type t) -> Type"""
        return _osg.Uniform_getGlApiType(*args)

    if _newclass:getGlApiType = staticmethod(getGlApiType)
    __swig_getmethods__["getGlApiType"] = lambda x: getGlApiType
    def getInternalArrayType(*args):
        """getInternalArrayType(Type t) -> GLenum"""
        return _osg.Uniform_getInternalArrayType(*args)

    if _newclass:getInternalArrayType = staticmethod(getInternalArrayType)
    __swig_getmethods__["getInternalArrayType"] = lambda x: getInternalArrayType
    def __init__(self, *args): 
        """
        __init__(self) -> Uniform
        __init__(self, Type type, string name, int numElements = 1) -> Uniform
        __init__(self, Type type, string name) -> Uniform
        __init__(self, Uniform rhs, CopyOp copyop = SHALLOW_COPY) -> Uniform
        __init__(self, Uniform rhs) -> Uniform
        __init__(self, char name, float f) -> Uniform
        __init__(self, char name, int i) -> Uniform
        __init__(self, char name, unsigned int i) -> Uniform
        __init__(self, char name, bool b) -> Uniform
        __init__(self, char name, Vec2 v2) -> Uniform
        __init__(self, char name, Vec3 v3) -> Uniform
        __init__(self, char name, Vec4 v4) -> Uniform
        __init__(self, char name, Matrix2 m2) -> Uniform
        __init__(self, char name, Matrix3 m3) -> Uniform
        __init__(self, char name, Matrixf m4) -> Uniform
        __init__(self, char name, Matrixd m4) -> Uniform
        __init__(self, char name, int i0, int i1) -> Uniform
        __init__(self, char name, int i0, int i1, int i2) -> Uniform
        __init__(self, char name, int i0, int i1, int i2, int i3) -> Uniform
        __init__(self, char name, unsigned int i0, unsigned int i1) -> Uniform
        __init__(self, char name, unsigned int i0, unsigned int i1, unsigned int i2) -> Uniform
        __init__(self, char name, unsigned int i0, unsigned int i1, unsigned int i2, 
            unsigned int i3) -> Uniform
        __init__(self, char name, bool b0, bool b1) -> Uniform
        __init__(self, char name, bool b0, bool b1, bool b2) -> Uniform
        __init__(self, char name, bool b0, bool b1, bool b2, bool b3) -> Uniform
        """
        this = _osg.new_Uniform(*args)
        try: self.this.append(this)
        except: self.this = this
    def compare(self, *args):
        """compare(self, Uniform rhs) -> int"""
        return _osg.Uniform_compare(self, *args)

    def compareData(self, *args):
        """compareData(self, Uniform rhs) -> int"""
        return _osg.Uniform_compareData(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Uniform rhs) -> bool"""
        return _osg.Uniform___lt__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, Uniform rhs) -> bool"""
        return _osg.Uniform___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Uniform rhs) -> bool"""
        return _osg.Uniform___ne__(self, *args)

    def copyData(self, *args):
        """copyData(self, Uniform rhs)"""
        return _osg.Uniform_copyData(self, *args)

    def getParents(self):
        """getParents(self) -> ParentList"""
        return _osg.Uniform_getParents(self)

    def getParent(self, *args):
        """
        getParent(self, unsigned int i) -> StateSet
        getParent(self, unsigned int i) -> StateSet
        """
        return _osg.Uniform_getParent(self, *args)

    def getNumParents(self):
        """getNumParents(self) -> unsigned int"""
        return _osg.Uniform_getNumParents(self)

    def set_float(self, *args):
        """set_float(self, float f) -> bool"""
        return _osg.Uniform_set_float(self, *args)

    def set_int(self, *args):
        """set_int(self, int i) -> bool"""
        return _osg.Uniform_set_int(self, *args)

    def set_uint(self, *args):
        """set_uint(self, unsigned int i) -> bool"""
        return _osg.Uniform_set_uint(self, *args)

    def set_bool(self, *args):
        """set_bool(self, bool b) -> bool"""
        return _osg.Uniform_set_bool(self, *args)

    def set_vec2(self, *args):
        """set_vec2(self, Vec2 v2) -> bool"""
        return _osg.Uniform_set_vec2(self, *args)

    def set_vec3(self, *args):
        """set_vec3(self, Vec3 v3) -> bool"""
        return _osg.Uniform_set_vec3(self, *args)

    def set_vec4(self, *args):
        """set_vec4(self, Vec4 v4) -> bool"""
        return _osg.Uniform_set_vec4(self, *args)

    def set_m2(self, *args):
        """set_m2(self, Matrix2 m2) -> bool"""
        return _osg.Uniform_set_m2(self, *args)

    def set_m3(self, *args):
        """set_m3(self, Matrix3 m3) -> bool"""
        return _osg.Uniform_set_m3(self, *args)

    def set_m4f(self, *args):
        """set_m4f(self, Matrixf m4) -> bool"""
        return _osg.Uniform_set_m4f(self, *args)

    def set_m4d(self, *args):
        """set_m4d(self, Matrixd m4) -> bool"""
        return _osg.Uniform_set_m4d(self, *args)

    def set_int2(self, *args):
        """set_int2(self, int i0, int i1) -> bool"""
        return _osg.Uniform_set_int2(self, *args)

    def set_int3(self, *args):
        """set_int3(self, int i0, int i1, int i2) -> bool"""
        return _osg.Uniform_set_int3(self, *args)

    def set_int4(self, *args):
        """set_int4(self, int i0, int i1, int i2, int i3) -> bool"""
        return _osg.Uniform_set_int4(self, *args)

    def set_uint2(self, *args):
        """set_uint2(self, unsigned int i0, unsigned int i1) -> bool"""
        return _osg.Uniform_set_uint2(self, *args)

    def set_uint3(self, *args):
        """set_uint3(self, unsigned int i0, unsigned int i1, unsigned int i2) -> bool"""
        return _osg.Uniform_set_uint3(self, *args)

    def set_uint4(self, *args):
        """
        set_uint4(self, unsigned int i0, unsigned int i1, unsigned int i2, 
            unsigned int i3) -> bool
        """
        return _osg.Uniform_set_uint4(self, *args)

    def set_bool2(self, *args):
        """set_bool2(self, bool b0, bool b1) -> bool"""
        return _osg.Uniform_set_bool2(self, *args)

    def set_bool3(self, *args):
        """set_bool3(self, bool b0, bool b1, bool b2) -> bool"""
        return _osg.Uniform_set_bool3(self, *args)

    def set_bool4(self, *args):
        """set_bool4(self, bool b0, bool b1, bool b2, bool b3) -> bool"""
        return _osg.Uniform_set_bool4(self, *args)

    def get_float(self):
        """get_float(self) -> bool"""
        return _osg.Uniform_get_float(self)

    def get_int(self):
        """get_int(self) -> bool"""
        return _osg.Uniform_get_int(self)

    def get(self, *args):
        """get(self, unsigned int i) -> bool"""
        return _osg.Uniform_get(self, *args)

    def get_blool(self, *args):
        """get_blool(self, bool b) -> bool"""
        return _osg.Uniform_get_blool(self, *args)

    def get_vec2(self, *args):
        """get_vec2(self, Vec2 v2) -> bool"""
        return _osg.Uniform_get_vec2(self, *args)

    def get_vec3(self, *args):
        """get_vec3(self, Vec3 v3) -> bool"""
        return _osg.Uniform_get_vec3(self, *args)

    def get_vec4(self, *args):
        """get_vec4(self, Vec4 v4) -> bool"""
        return _osg.Uniform_get_vec4(self, *args)

    def get_m2(self, *args):
        """get_m2(self, Matrix2 m2) -> bool"""
        return _osg.Uniform_get_m2(self, *args)

    def get_m3(self, *args):
        """get_m3(self, Matrix3 m3) -> bool"""
        return _osg.Uniform_get_m3(self, *args)

    def get_mf(self, *args):
        """get_mf(self, Matrixf m4) -> bool"""
        return _osg.Uniform_get_mf(self, *args)

    def get_m4(self, *args):
        """get_m4(self, Matrixd m4) -> bool"""
        return _osg.Uniform_get_m4(self, *args)

    def get_int2(self):
        """get_int2(self) -> bool"""
        return _osg.Uniform_get_int2(self)

    def get_int3(self):
        """get_int3(self) -> bool"""
        return _osg.Uniform_get_int3(self)

    def get_int4(self):
        """get_int4(self) -> bool"""
        return _osg.Uniform_get_int4(self)

    def get_uint2(self, *args):
        """get_uint2(self, unsigned int i0, unsigned int i1) -> bool"""
        return _osg.Uniform_get_uint2(self, *args)

    def get_uint3(self, *args):
        """get_uint3(self, unsigned int i0, unsigned int i1, unsigned int i2) -> bool"""
        return _osg.Uniform_get_uint3(self, *args)

    def get_uint4(self, *args):
        """
        get_uint4(self, unsigned int i0, unsigned int i1, unsigned int i2, 
            unsigned int i3) -> bool
        """
        return _osg.Uniform_get_uint4(self, *args)

    def get_bool2(self):
        """get_bool2(self) -> bool"""
        return _osg.Uniform_get_bool2(self)

    def get_bool3(self):
        """get_bool3(self) -> bool"""
        return _osg.Uniform_get_bool3(self)

    def get_bool4(self):
        """get_bool4(self) -> bool"""
        return _osg.Uniform_get_bool4(self)

    def set_int_float(self, *args):
        """set_int_float(self, unsigned int index, float f) -> bool"""
        return _osg.Uniform_set_int_float(self, *args)

    def set_int_int(self, *args):
        """set_int_int(self, unsigned int index, int i) -> bool"""
        return _osg.Uniform_set_int_int(self, *args)

    def set_int_uint(self, *args):
        """set_int_uint(self, unsigned int index, unsigned int i) -> bool"""
        return _osg.Uniform_set_int_uint(self, *args)

    def set_int_bool(self, *args):
        """set_int_bool(self, unsigned int index, bool b) -> bool"""
        return _osg.Uniform_set_int_bool(self, *args)

    def set_int_vec2(self, *args):
        """set_int_vec2(self, unsigned int index, Vec2 v2) -> bool"""
        return _osg.Uniform_set_int_vec2(self, *args)

    def set_int_vec3(self, *args):
        """set_int_vec3(self, unsigned int index, Vec3 v3) -> bool"""
        return _osg.Uniform_set_int_vec3(self, *args)

    def set_int_vec4(self, *args):
        """set_int_vec4(self, unsigned int index, Vec4 v4) -> bool"""
        return _osg.Uniform_set_int_vec4(self, *args)

    def set_int_m2(self, *args):
        """set_int_m2(self, unsigned int index, Matrix2 m2) -> bool"""
        return _osg.Uniform_set_int_m2(self, *args)

    def set_int_m3(self, *args):
        """set_int_m3(self, unsigned int index, Matrix3 m3) -> bool"""
        return _osg.Uniform_set_int_m3(self, *args)

    def set_int_mf(self, *args):
        """set_int_mf(self, unsigned int index, Matrixf m4) -> bool"""
        return _osg.Uniform_set_int_mf(self, *args)

    def set_int_md(self, *args):
        """set_int_md(self, unsigned int index, Matrixd m4) -> bool"""
        return _osg.Uniform_set_int_md(self, *args)

    def set_int_int2(self, *args):
        """set_int_int2(self, unsigned int index, int i0, int i1) -> bool"""
        return _osg.Uniform_set_int_int2(self, *args)

    def set_int_int3(self, *args):
        """set_int_int3(self, unsigned int index, int i0, int i1, int i2) -> bool"""
        return _osg.Uniform_set_int_int3(self, *args)

    def set_int_int4(self, *args):
        """set_int_int4(self, unsigned int index, int i0, int i1, int i2, int i3) -> bool"""
        return _osg.Uniform_set_int_int4(self, *args)

    def set_int_uint2(self, *args):
        """set_int_uint2(self, unsigned int index, unsigned int i0, unsigned int i1) -> bool"""
        return _osg.Uniform_set_int_uint2(self, *args)

    def set_int_uint3(self, *args):
        """
        set_int_uint3(self, unsigned int index, unsigned int i0, unsigned int i1, 
            unsigned int i2) -> bool
        """
        return _osg.Uniform_set_int_uint3(self, *args)

    def set_int_uint4(self, *args):
        """
        set_int_uint4(self, unsigned int index, unsigned int i0, unsigned int i1, 
            unsigned int i2, unsigned int i3) -> bool
        """
        return _osg.Uniform_set_int_uint4(self, *args)

    def set_int_bool2(self, *args):
        """set_int_bool2(self, unsigned int index, bool b0, bool b1) -> bool"""
        return _osg.Uniform_set_int_bool2(self, *args)

    def set_int_bool3(self, *args):
        """set_int_bool3(self, unsigned int index, bool b0, bool b1, bool b2) -> bool"""
        return _osg.Uniform_set_int_bool3(self, *args)

    def set_int_bool4(self, *args):
        """set_int_bool4(self, unsigned int index, bool b0, bool b1, bool b2, bool b3) -> bool"""
        return _osg.Uniform_set_int_bool4(self, *args)

    def get_int_float(self, *args):
        """get_int_float(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_float(self, *args)

    def get_int_int(self, *args):
        """get_int_int(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int(self, *args)

    def get_int_uint(self, *args):
        """get_int_uint(self, unsigned int index, unsigned int i) -> bool"""
        return _osg.Uniform_get_int_uint(self, *args)

    def get_int_bool(self, *args):
        """get_int_bool(self, unsigned int index, bool b) -> bool"""
        return _osg.Uniform_get_int_bool(self, *args)

    def get_int_vec2(self, *args):
        """get_int_vec2(self, unsigned int index, Vec2 v2) -> bool"""
        return _osg.Uniform_get_int_vec2(self, *args)

    def get_int_vec3(self, *args):
        """get_int_vec3(self, unsigned int index, Vec3 v3) -> bool"""
        return _osg.Uniform_get_int_vec3(self, *args)

    def get_int_vec4(self, *args):
        """get_int_vec4(self, unsigned int index, Vec4 v4) -> bool"""
        return _osg.Uniform_get_int_vec4(self, *args)

    def get_int_m2(self, *args):
        """get_int_m2(self, unsigned int index, Matrix2 m2) -> bool"""
        return _osg.Uniform_get_int_m2(self, *args)

    def get_int_m3(self, *args):
        """get_int_m3(self, unsigned int index, Matrix3 m3) -> bool"""
        return _osg.Uniform_get_int_m3(self, *args)

    def get_int_mf(self, *args):
        """get_int_mf(self, unsigned int index, Matrixf m4) -> bool"""
        return _osg.Uniform_get_int_mf(self, *args)

    def get_int_md(self, *args):
        """get_int_md(self, unsigned int index, Matrixd m4) -> bool"""
        return _osg.Uniform_get_int_md(self, *args)

    def get_int_int2(self, *args):
        """get_int_int2(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int2(self, *args)

    def get_int_int3(self, *args):
        """get_int_int3(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int3(self, *args)

    def get_int_int4(self, *args):
        """get_int_int4(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_int4(self, *args)

    def get_int_uint2(self, *args):
        """get_int_uint2(self, unsigned int index, unsigned int i0, unsigned int i1) -> bool"""
        return _osg.Uniform_get_int_uint2(self, *args)

    def get_int_uint3(self, *args):
        """
        get_int_uint3(self, unsigned int index, unsigned int i0, unsigned int i1, 
            unsigned int i2) -> bool
        """
        return _osg.Uniform_get_int_uint3(self, *args)

    def get_int_uint4(self, *args):
        """
        get_int_uint4(self, unsigned int index, unsigned int i0, unsigned int i1, 
            unsigned int i2, unsigned int i3) -> bool
        """
        return _osg.Uniform_get_int_uint4(self, *args)

    def get_int_bool2(self, *args):
        """get_int_bool2(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_bool2(self, *args)

    def get_int_bool3(self, *args):
        """get_int_bool3(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_bool3(self, *args)

    def get_int_bool4(self, *args):
        """get_int_bool4(self, unsigned int index) -> bool"""
        return _osg.Uniform_get_int_bool4(self, *args)

    def dirty(self):
        """dirty(self)"""
        return _osg.Uniform_dirty(self)

    def setArray(self, *args):
        """
        setArray(self, FloatArray array) -> bool
        setArray(self, IntArray array) -> bool
        setArray(self, UIntArray array) -> bool
        """
        return _osg.Uniform_setArray(self, *args)

    def getFloatArray(self, *args):
        """
        getFloatArray(self) -> FloatArray
        getFloatArray(self) -> FloatArray
        """
        return _osg.Uniform_getFloatArray(self, *args)

    def getIntArray(self, *args):
        """
        getIntArray(self) -> IntArray
        getIntArray(self) -> IntArray
        """
        return _osg.Uniform_getIntArray(self, *args)

    def getUIntArray(self, *args):
        """
        getUIntArray(self) -> UIntArray
        getUIntArray(self) -> UIntArray
        """
        return _osg.Uniform_getUIntArray(self, *args)

    def setModifiedCount(self, *args):
        """setModifiedCount(self, unsigned int mc)"""
        return _osg.Uniform_setModifiedCount(self, *args)

    def getModifiedCount(self):
        """getModifiedCount(self) -> unsigned int"""
        return _osg.Uniform_getModifiedCount(self)

    def getNameID(self, *args):
        """
        getNameID(self, string name) -> unsigned int
        getNameID(self) -> unsigned int
        """
        return _osg.Uniform_getNameID(self, *args)

    def apply(self, *args):
        """apply(self, GL2Extensions ext, GLint location)"""
        return _osg.Uniform_apply(self, *args)

Uniform_swigregister = _osg.Uniform_swigregister
Uniform_swigregister(Uniform)

def Uniform_getTypename(*args):
  """Uniform_getTypename(Type t) -> char"""
  return _osg.Uniform_getTypename(*args)

def Uniform_getTypeNumComponents(*args):
  """Uniform_getTypeNumComponents(Type t) -> int"""
  return _osg.Uniform_getTypeNumComponents(*args)

def Uniform_getTypeId(*args):
  """Uniform_getTypeId(string tname) -> Type"""
  return _osg.Uniform_getTypeId(*args)

def Uniform_getGlApiType(*args):
  """Uniform_getGlApiType(Type t) -> Type"""
  return _osg.Uniform_getGlApiType(*args)

def Uniform_getInternalArrayType(*args):
  """Uniform_getInternalArrayType(Type t) -> GLenum"""
  return _osg.Uniform_getInternalArrayType(*args)

OSG_STATS = _osg.OSG_STATS
class Stats(Referenced):
    """Proxy of C++ osg::Stats class"""
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stats, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stats, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string name) -> Stats
        __init__(self, string name, unsigned int numberOfFrames) -> Stats
        """
        this = _osg.new_Stats(*args)
        try: self.this.append(this)
        except: self.this = this
    def setName(self, *args):
        """setName(self, string name)"""
        return _osg.Stats_setName(self, *args)

    def getName(self):
        """getName(self) -> string"""
        return _osg.Stats_getName(self)

    def allocate(self, *args):
        """allocate(self, unsigned int numberOfFrames)"""
        return _osg.Stats_allocate(self, *args)

    def getEarliestFrameNumber(self):
        """getEarliestFrameNumber(self) -> unsigned int"""
        return _osg.Stats_getEarliestFrameNumber(self)

    def getLatestFrameNumber(self):
        """getLatestFrameNumber(self) -> unsigned int"""
        return _osg.Stats_getLatestFrameNumber(self)

    def setAttribute(self, *args):
        """setAttribute(self, unsigned int frameNumber, string attributeName, double value) -> bool"""
        return _osg.Stats_setAttribute(self, *args)

    def getAttribute(self, *args):
        """getAttribute(self, unsigned int frameNumber, string attributeName) -> bool"""
        return _osg.Stats_getAttribute(self, *args)

    def getAveragedAttribute(self, *args):
        """
        getAveragedAttribute(self, string attributeName, bool averageInInverseSpace = False) -> bool
        getAveragedAttribute(self, string attributeName) -> bool
        getAveragedAttribute(self, unsigned int startFrameNumber, unsigned int endFrameNumber, 
            string attributeName, bool averageInInverseSpace = False) -> bool
        getAveragedAttribute(self, unsigned int startFrameNumber, unsigned int endFrameNumber, 
            string attributeName) -> bool
        """
        return _osg.Stats_getAveragedAttribute(self, *args)

    def collectStats(self, *args):
        """
        collectStats(self, string str, bool flag)
        collectStats(self, string str) -> bool
        """
        return _osg.Stats_collectStats(self, *args)

Stats_swigregister = _osg.Stats_swigregister
Stats_swigregister(Stats)

OSG_TIMER = _osg.OSG_TIMER
class Timer(_object):
    """Proxy of C++ osg::Timer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> Timer"""
        this = _osg.new_Timer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_Timer
    __del__ = lambda self : None;
    def instance():
        """instance() -> Timer"""
        return _osg.Timer_instance()

    if _newclass:instance = staticmethod(instance)
    __swig_getmethods__["instance"] = lambda x: instance
    def tick(self):
        """tick(self) -> Timer_t"""
        return _osg.Timer_tick(self)

    def setStartTick(self, *args):
        """
        setStartTick(self)
        setStartTick(self, Timer_t t)
        """
        return _osg.Timer_setStartTick(self, *args)

    def getStartTick(self):
        """getStartTick(self) -> Timer_t"""
        return _osg.Timer_getStartTick(self)

    def time_s(self):
        """time_s(self) -> double"""
        return _osg.Timer_time_s(self)

    def time_m(self):
        """time_m(self) -> double"""
        return _osg.Timer_time_m(self)

    def time_u(self):
        """time_u(self) -> double"""
        return _osg.Timer_time_u(self)

    def time_n(self):
        """time_n(self) -> double"""
        return _osg.Timer_time_n(self)

    def delta_s(self, *args):
        """delta_s(self, Timer_t t1, Timer_t t2) -> double"""
        return _osg.Timer_delta_s(self, *args)

    def delta_m(self, *args):
        """delta_m(self, Timer_t t1, Timer_t t2) -> double"""
        return _osg.Timer_delta_m(self, *args)

    def delta_u(self, *args):
        """delta_u(self, Timer_t t1, Timer_t t2) -> double"""
        return _osg.Timer_delta_u(self, *args)

    def delta_n(self, *args):
        """delta_n(self, Timer_t t1, Timer_t t2) -> double"""
        return _osg.Timer_delta_n(self, *args)

    def getSecondsPerTick(self):
        """getSecondsPerTick(self) -> double"""
        return _osg.Timer_getSecondsPerTick(self)

Timer_swigregister = _osg.Timer_swigregister
Timer_swigregister(Timer)

def Timer_instance():
  """Timer_instance() -> Timer"""
  return _osg.Timer_instance()

class ElapsedTime(_object):
    """Proxy of C++ osg::ElapsedTime class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElapsedTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElapsedTime, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double elapsedTime, Timer timer = None) -> ElapsedTime
        __init__(self, double elapsedTime) -> ElapsedTime
        __init__(self, Timer timer = None) -> ElapsedTime
        __init__(self) -> ElapsedTime
        """
        this = _osg.new_ElapsedTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osg.delete_ElapsedTime
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _osg.ElapsedTime_reset(self)

    def elapsedTime(self):
        """elapsedTime(self) -> double"""
        return _osg.ElapsedTime_elapsedTime(self)

    def elapsedTime_m(self):
        """elapsedTime_m(self) -> double"""
        return _osg.ElapsedTime_elapsedTime_m(self)

    def elapsedTime_u(self):
        """elapsedTime_u(self) -> double"""
        return _osg.ElapsedTime_elapsedTime_u(self)

    def elapsedTime_n(self):
        """elapsedTime_n(self) -> double"""
        return _osg.ElapsedTime_elapsedTime_n(self)

    def finish(self):
        """finish(self)"""
        return _osg.ElapsedTime_finish(self)

ElapsedTime_swigregister = _osg.ElapsedTime_swigregister
ElapsedTime_swigregister(ElapsedTime)


def NodeToGeode(*args):
  """NodeToGeode(Node b) -> Geode"""
  return _osg.NodeToGeode(*args)

def NodeToPositionAttitudeTransform(*args):
  """NodeToPositionAttitudeTransform(Node b) -> PositionAttitudeTransform"""
  return _osg.NodeToPositionAttitudeTransform(*args)

def NodeToMatrixTransform(*args):
  """NodeToMatrixTransform(Node b) -> MatrixTransform"""
  return _osg.NodeToMatrixTransform(*args)

def StateAttributeToTexture(*args):
  """StateAttributeToTexture(StateAttribute b) -> Texture"""
  return _osg.StateAttributeToTexture(*args)

def NodeToLOD(*args):
  """NodeToLOD(Node b) -> LOD"""
  return _osg.NodeToLOD(*args)

def NodeToPagedLOD(*args):
  """NodeToPagedLOD(Node b) -> PagedLOD"""
  return _osg.NodeToPagedLOD(*args)

def NodeToProxyNode(*args):
  """NodeToProxyNode(Node b) -> ProxyNode"""
  return _osg.NodeToProxyNode(*args)

def ReferencedToNode(*args):
  """ReferencedToNode(Referenced b) -> Node"""
  return _osg.ReferencedToNode(*args)


