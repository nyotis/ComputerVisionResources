# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgViewer', [dirname(__file__)])
        except ImportError:
            import _osgViewer
            return _osgViewer
        if fp is not None:
            try:
                _mod = imp.load_module('_osgViewer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgViewer = swig_import_helper()
    del swig_import_helper
else:
    import _osgViewer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgViewer.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _osgViewer.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _osgViewer.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _osgViewer.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgViewer.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _osgViewer.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _osgViewer.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _osgViewer.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _osgViewer.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _osgViewer.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgViewer.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _osgViewer.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _osgViewer.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgViewer.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgViewer.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgViewer.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgViewer.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgViewer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
import osgGA
OSGVIEWER_VERSION = _osgViewer.OSGVIEWER_VERSION

def osgViewerGetVersion():
  """osgViewerGetVersion() -> char"""
  return _osgViewer.osgViewerGetVersion()

def osgViewerGetLibraryName():
  """osgViewerGetLibraryName() -> char"""
  return _osgViewer.osgViewerGetLibraryName()
OSGVIEWER_VIEW = _osgViewer.OSGVIEWER_VIEW
class DepthPartitionSettings(osg.Referenced):
    """Proxy of C++ osgViewer::DepthPartitionSettings class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DepthPartitionSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DepthPartitionSettings, name)
    __repr__ = _swig_repr
    FIXED_RANGE = _osgViewer.DepthPartitionSettings_FIXED_RANGE
    BOUNDING_VOLUME = _osgViewer.DepthPartitionSettings_BOUNDING_VOLUME
    def __init__(self, *args): 
        """
        __init__(self, DepthMode mode = BOUNDING_VOLUME) -> DepthPartitionSettings
        __init__(self) -> DepthPartitionSettings
        """
        this = _osgViewer.new_DepthPartitionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDepthRange(self, *args):
        """getDepthRange(self, View view, unsigned int partition, double zNear, double zFar) -> bool"""
        return _osgViewer.DepthPartitionSettings_getDepthRange(self, *args)

    __swig_setmethods__["_mode"] = _osgViewer.DepthPartitionSettings__mode_set
    __swig_getmethods__["_mode"] = _osgViewer.DepthPartitionSettings__mode_get
    if _newclass:_mode = _swig_property(_osgViewer.DepthPartitionSettings__mode_get, _osgViewer.DepthPartitionSettings__mode_set)
    __swig_setmethods__["_zNear"] = _osgViewer.DepthPartitionSettings__zNear_set
    __swig_getmethods__["_zNear"] = _osgViewer.DepthPartitionSettings__zNear_get
    if _newclass:_zNear = _swig_property(_osgViewer.DepthPartitionSettings__zNear_get, _osgViewer.DepthPartitionSettings__zNear_set)
    __swig_setmethods__["_zMid"] = _osgViewer.DepthPartitionSettings__zMid_set
    __swig_getmethods__["_zMid"] = _osgViewer.DepthPartitionSettings__zMid_get
    if _newclass:_zMid = _swig_property(_osgViewer.DepthPartitionSettings__zMid_get, _osgViewer.DepthPartitionSettings__zMid_set)
    __swig_setmethods__["_zFar"] = _osgViewer.DepthPartitionSettings__zFar_set
    __swig_getmethods__["_zFar"] = _osgViewer.DepthPartitionSettings__zFar_get
    if _newclass:_zFar = _swig_property(_osgViewer.DepthPartitionSettings__zFar_get, _osgViewer.DepthPartitionSettings__zFar_set)
    __swig_destroy__ = _osgViewer.delete_DepthPartitionSettings
    __del__ = lambda self : None;
DepthPartitionSettings_swigregister = _osgViewer.DepthPartitionSettings_swigregister
DepthPartitionSettings_swigregister(DepthPartitionSettings)

class View(osg.View,osgGA.GUIActionAdapter):
    """Proxy of C++ osgViewer::View class"""
    __swig_setmethods__ = {}
    for _s in [osg.View,osgGA.GUIActionAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, View, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.View,osgGA.GUIActionAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, View, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> View
        __init__(self, View view, CopyOp copyop = SHALLOW_COPY) -> View
        __init__(self, View view) -> View
        """
        this = _osgViewer.new_View(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgViewer.View_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.View_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.View_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgViewer.View_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgViewer.View_className(self)

    def asView(self):
        """asView(self) -> View"""
        return _osgViewer.View_asView(self)

    def getViewerBase(self):
        """getViewerBase(self) -> ViewerBase"""
        return _osgViewer.View_getViewerBase(self)

    def take(self, *args):
        """take(self, View rhs)"""
        return _osgViewer.View_take(self, *args)

    def setStartTick(self, *args):
        """setStartTick(self, Timer_t tick)"""
        return _osgViewer.View_setStartTick(self, *args)

    def getStartTick(self):
        """getStartTick(self) -> Timer_t"""
        return _osgViewer.View_getStartTick(self)

    def getScene(self, *args):
        """
        getScene(self) -> Scene
        getScene(self) -> Scene
        """
        return _osgViewer.View_getScene(self, *args)

    def setSceneData(self, *args):
        """setSceneData(self, Node node)"""
        return _osgViewer.View_setSceneData(self, *args)

    def getSceneData(self, *args):
        """
        getSceneData(self) -> Node
        getSceneData(self) -> Node
        """
        return _osgViewer.View_getSceneData(self, *args)

    def setDatabasePager(self, *args):
        """setDatabasePager(self, osgDB::DatabasePager dp)"""
        return _osgViewer.View_setDatabasePager(self, *args)

    def getDatabasePager(self, *args):
        """
        getDatabasePager(self) -> osgDB::DatabasePager
        getDatabasePager(self) -> osgDB::DatabasePager
        """
        return _osgViewer.View_getDatabasePager(self, *args)

    def setImagePager(self, *args):
        """setImagePager(self, osgDB::ImagePager ip)"""
        return _osgViewer.View_setImagePager(self, *args)

    def getImagePager(self, *args):
        """
        getImagePager(self) -> osgDB::ImagePager
        getImagePager(self) -> osgDB::ImagePager
        """
        return _osgViewer.View_getImagePager(self, *args)

    def setEventQueue(self, *args):
        """setEventQueue(self, EventQueue eventQueue)"""
        return _osgViewer.View_setEventQueue(self, *args)

    def getEventQueue(self, *args):
        """
        getEventQueue(self) -> EventQueue
        getEventQueue(self) -> EventQueue
        """
        return _osgViewer.View_getEventQueue(self, *args)

    def setCameraManipulator(self, *args):
        """setCameraManipulator(self, CameraManipulator manipulator, bool resetPosition = True)"""
        return _osgViewer.View_setCameraManipulator(self, *args)

    def getCameraManipulator(self, *args):
        """
        getCameraManipulator(self) -> CameraManipulator
        getCameraManipulator(self) -> CameraManipulator
        """
        return _osgViewer.View_getCameraManipulator(self, *args)

    def home(self):
        """home(self)"""
        return _osgViewer.View_home(self)

    def addEventHandler(self, *args):
        """addEventHandler(self, GUIEventHandler eventHandler)"""
        return _osgViewer.View_addEventHandler(self, *args)

    def removeEventHandler(self, *args):
        """removeEventHandler(self, GUIEventHandler eventHandler)"""
        return _osgViewer.View_removeEventHandler(self, *args)

    def getEventHandlers(self, *args):
        """
        getEventHandlers(self) -> EventHandlers
        getEventHandlers(self) -> EventHandlers
        """
        return _osgViewer.View_getEventHandlers(self, *args)

    def setCoordinateSystemNodePath(self, *args):
        """setCoordinateSystemNodePath(self, NodePath nodePath)"""
        return _osgViewer.View_setCoordinateSystemNodePath(self, *args)

    def getCoordinateSystemNodePath(self):
        """getCoordinateSystemNodePath(self) -> NodePath"""
        return _osgViewer.View_getCoordinateSystemNodePath(self)

    def computeActiveCoordinateSystemNodePath(self):
        """computeActiveCoordinateSystemNodePath(self)"""
        return _osgViewer.View_computeActiveCoordinateSystemNodePath(self)

    def setDisplaySettings(self, *args):
        """setDisplaySettings(self, DisplaySettings ds)"""
        return _osgViewer.View_setDisplaySettings(self, *args)

    def getDisplaySettings(self, *args):
        """
        getDisplaySettings(self) -> DisplaySettings
        getDisplaySettings(self) -> DisplaySettings
        """
        return _osgViewer.View_getDisplaySettings(self, *args)

    def setFusionDistance(self, *args):
        """
        setFusionDistance(self, osgUtil::SceneView::FusionDistanceMode mode, float value = 1.0)
        setFusionDistance(self, osgUtil::SceneView::FusionDistanceMode mode)
        """
        return _osgViewer.View_setFusionDistance(self, *args)

    def getFusionDistanceMode(self):
        """getFusionDistanceMode(self) -> osgUtil::SceneView::FusionDistanceMode"""
        return _osgViewer.View_getFusionDistanceMode(self)

    def getFusionDistanceValue(self):
        """getFusionDistanceValue(self) -> float"""
        return _osgViewer.View_getFusionDistanceValue(self)

    def setUpViewAcrossAllScreens(self):
        """setUpViewAcrossAllScreens(self)"""
        return _osgViewer.View_setUpViewAcrossAllScreens(self)

    def setUpViewInWindow(self, *args):
        """
        setUpViewInWindow(self, int x, int y, int width, int height, unsigned int screenNum = 0)
        setUpViewInWindow(self, int x, int y, int width, int height)
        """
        return _osgViewer.View_setUpViewInWindow(self, *args)

    def setUpViewOnSingleScreen(self, screenNum = 0):
        """
        setUpViewOnSingleScreen(self, unsigned int screenNum = 0)
        setUpViewOnSingleScreen(self)
        """
        return _osgViewer.View_setUpViewOnSingleScreen(self, screenNum)

    def setUpViewFor3DSphericalDisplay(self, *args):
        """
        setUpViewFor3DSphericalDisplay(self, double radius = 1.0, double collar = 0.45, unsigned int screenNum = 0, 
            Image intensityMap = None, 
            Matrixd projectorMatrix = osg::Matrixd())
        setUpViewFor3DSphericalDisplay(self, double radius = 1.0, double collar = 0.45, unsigned int screenNum = 0, 
            Image intensityMap = None)
        setUpViewFor3DSphericalDisplay(self, double radius = 1.0, double collar = 0.45, unsigned int screenNum = 0)
        setUpViewFor3DSphericalDisplay(self, double radius = 1.0, double collar = 0.45)
        setUpViewFor3DSphericalDisplay(self, double radius = 1.0)
        setUpViewFor3DSphericalDisplay(self)
        """
        return _osgViewer.View_setUpViewFor3DSphericalDisplay(self, *args)

    def setUpViewForPanoramicSphericalDisplay(self, *args):
        """
        setUpViewForPanoramicSphericalDisplay(self, double radius = 1.0, double collar = 0.45, unsigned int screenNum = 0, 
            Image intensityMap = None, 
            Matrixd projectorMatrix = osg::Matrixd())
        setUpViewForPanoramicSphericalDisplay(self, double radius = 1.0, double collar = 0.45, unsigned int screenNum = 0, 
            Image intensityMap = None)
        setUpViewForPanoramicSphericalDisplay(self, double radius = 1.0, double collar = 0.45, unsigned int screenNum = 0)
        setUpViewForPanoramicSphericalDisplay(self, double radius = 1.0, double collar = 0.45)
        setUpViewForPanoramicSphericalDisplay(self, double radius = 1.0)
        setUpViewForPanoramicSphericalDisplay(self)
        """
        return _osgViewer.View_setUpViewForPanoramicSphericalDisplay(self, *args)

    def setUpViewForWoWVxDisplay(self, *args):
        """
        setUpViewForWoWVxDisplay(self, unsigned int screenNum, unsigned char wow_content, 
            unsigned char wow_factor, unsigned char wow_offset, 
            float wow_disparity_Zd, float wow_disparity_vz, 
            float wow_disparity_M, float wow_disparity_C)
        """
        return _osgViewer.View_setUpViewForWoWVxDisplay(self, *args)

    def setUpDepthPartitionForCamera(self, *args):
        """
        setUpDepthPartitionForCamera(self, Camera cameraToPartition, DepthPartitionSettings dps = None) -> bool
        setUpDepthPartitionForCamera(self, Camera cameraToPartition) -> bool
        """
        return _osgViewer.View_setUpDepthPartitionForCamera(self, *args)

    def setUpDepthPartition(self, dsp = None):
        """
        setUpDepthPartition(self, DepthPartitionSettings dsp = None) -> bool
        setUpDepthPartition(self) -> bool
        """
        return _osgViewer.View_setUpDepthPartition(self, dsp)

    def containsCamera(self, *args):
        """containsCamera(self, Camera camera) -> bool"""
        return _osgViewer.View_containsCamera(self, *args)

    def getCameraContainingPosition(self, *args):
        """getCameraContainingPosition(self, float x, float y, float local_x, float local_y) -> Camera"""
        return _osgViewer.View_getCameraContainingPosition(self, *args)

    def computeIntersections(self, *args):
        """
        computeIntersections(self, float x, float y, osgUtil::LineSegmentIntersector::Intersections intersections, 
            NodeMask traversalMask = 0xffffffff) -> bool
        computeIntersections(self, float x, float y, osgUtil::LineSegmentIntersector::Intersections intersections) -> bool
        computeIntersections(self, float x, float y, NodePath nodePath, osgUtil::LineSegmentIntersector::Intersections intersections, 
            NodeMask traversalMask = 0xffffffff) -> bool
        computeIntersections(self, float x, float y, NodePath nodePath, osgUtil::LineSegmentIntersector::Intersections intersections) -> bool
        """
        return _osgViewer.View_computeIntersections(self, *args)

    def requestRedraw(self):
        """requestRedraw(self)"""
        return _osgViewer.View_requestRedraw(self)

    def requestContinuousUpdate(self, needed = True):
        """
        requestContinuousUpdate(self, bool needed = True)
        requestContinuousUpdate(self)
        """
        return _osgViewer.View_requestContinuousUpdate(self, needed)

    def requestWarpPointer(self, *args):
        """requestWarpPointer(self, float x, float y)"""
        return _osgViewer.View_requestWarpPointer(self, *args)

    def assignSceneDataToCameras(self):
        """assignSceneDataToCameras(self)"""
        return _osgViewer.View_assignSceneDataToCameras(self)

    def init(self):
        """init(self)"""
        return _osgViewer.View_init(self)

View_swigregister = _osgViewer.View_swigregister
View_swigregister(View)

OSGVIEWER_GRAPHICWINDOW = _osgViewer.OSGVIEWER_GRAPHICWINDOW
class GraphicsWindow(osg.GraphicsContext,osgGA.GUIActionAdapter):
    """Proxy of C++ osgViewer::GraphicsWindow class"""
    __swig_setmethods__ = {}
    for _s in [osg.GraphicsContext,osgGA.GUIActionAdapter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.GraphicsContext,osgGA.GUIActionAdapter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsWindow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GraphicsWindow"""
        this = _osgViewer.new_GraphicsWindow()
        try: self.this.append(this)
        except: self.this = this
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object object) -> bool"""
        return _osgViewer.GraphicsWindow_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgViewer.GraphicsWindow_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgViewer.GraphicsWindow_className(self)

    def setEventQueue(self, *args):
        """setEventQueue(self, EventQueue eventQueue)"""
        return _osgViewer.GraphicsWindow_setEventQueue(self, *args)

    def getEventQueue(self, *args):
        """
        getEventQueue(self) -> EventQueue
        getEventQueue(self) -> EventQueue
        """
        return _osgViewer.GraphicsWindow_getEventQueue(self, *args)

    def checkEvents(self):
        """checkEvents(self)"""
        return _osgViewer.GraphicsWindow_checkEvents(self)

    def setWindowRectangle(self, *args):
        """setWindowRectangle(self, int x, int y, int width, int height)"""
        return _osgViewer.GraphicsWindow_setWindowRectangle(self, *args)

    def setWindowRectangleImplementation(self, *args):
        """setWindowRectangleImplementation(self, int arg0, int arg1, int arg2, int arg3) -> bool"""
        return _osgViewer.GraphicsWindow_setWindowRectangleImplementation(self, *args)

    def getWindowRectangle(self, *args):
        """getWindowRectangle(self, int x, int y, int width, int height)"""
        return _osgViewer.GraphicsWindow_getWindowRectangle(self, *args)

    def setWindowDecoration(self, *args):
        """setWindowDecoration(self, bool flag)"""
        return _osgViewer.GraphicsWindow_setWindowDecoration(self, *args)

    def setWindowDecorationImplementation(self, *args):
        """setWindowDecorationImplementation(self, bool arg0) -> bool"""
        return _osgViewer.GraphicsWindow_setWindowDecorationImplementation(self, *args)

    def getWindowDecoration(self):
        """getWindowDecoration(self) -> bool"""
        return _osgViewer.GraphicsWindow_getWindowDecoration(self)

    def grabFocus(self):
        """grabFocus(self)"""
        return _osgViewer.GraphicsWindow_grabFocus(self)

    def grabFocusIfPointerInWindow(self):
        """grabFocusIfPointerInWindow(self)"""
        return _osgViewer.GraphicsWindow_grabFocusIfPointerInWindow(self)

    def raiseWindow(self):
        """raiseWindow(self)"""
        return _osgViewer.GraphicsWindow_raiseWindow(self)

    InheritCursor = _osgViewer.GraphicsWindow_InheritCursor
    NoCursor = _osgViewer.GraphicsWindow_NoCursor
    RightArrowCursor = _osgViewer.GraphicsWindow_RightArrowCursor
    LeftArrowCursor = _osgViewer.GraphicsWindow_LeftArrowCursor
    InfoCursor = _osgViewer.GraphicsWindow_InfoCursor
    DestroyCursor = _osgViewer.GraphicsWindow_DestroyCursor
    HelpCursor = _osgViewer.GraphicsWindow_HelpCursor
    CycleCursor = _osgViewer.GraphicsWindow_CycleCursor
    SprayCursor = _osgViewer.GraphicsWindow_SprayCursor
    WaitCursor = _osgViewer.GraphicsWindow_WaitCursor
    TextCursor = _osgViewer.GraphicsWindow_TextCursor
    CrosshairCursor = _osgViewer.GraphicsWindow_CrosshairCursor
    HandCursor = _osgViewer.GraphicsWindow_HandCursor
    UpDownCursor = _osgViewer.GraphicsWindow_UpDownCursor
    LeftRightCursor = _osgViewer.GraphicsWindow_LeftRightCursor
    TopSideCursor = _osgViewer.GraphicsWindow_TopSideCursor
    BottomSideCursor = _osgViewer.GraphicsWindow_BottomSideCursor
    LeftSideCursor = _osgViewer.GraphicsWindow_LeftSideCursor
    RightSideCursor = _osgViewer.GraphicsWindow_RightSideCursor
    TopLeftCorner = _osgViewer.GraphicsWindow_TopLeftCorner
    TopRightCorner = _osgViewer.GraphicsWindow_TopRightCorner
    BottomRightCorner = _osgViewer.GraphicsWindow_BottomRightCorner
    BottomLeftCorner = _osgViewer.GraphicsWindow_BottomLeftCorner
    def setWindowName(self, *args):
        """setWindowName(self, string arg0)"""
        return _osgViewer.GraphicsWindow_setWindowName(self, *args)

    def getWindowName(self):
        """getWindowName(self) -> string"""
        return _osgViewer.GraphicsWindow_getWindowName(self)

    def useCursor(self, *args):
        """useCursor(self, bool cursorOn)"""
        return _osgViewer.GraphicsWindow_useCursor(self, *args)

    def setCursor(self, *args):
        """setCursor(self, MouseCursor arg0)"""
        return _osgViewer.GraphicsWindow_setCursor(self, *args)

    def setSyncToVBlank(self, *args):
        """setSyncToVBlank(self, bool on)"""
        return _osgViewer.GraphicsWindow_setSyncToVBlank(self, *args)

    def getSyncToVBlank(self):
        """getSyncToVBlank(self) -> bool"""
        return _osgViewer.GraphicsWindow_getSyncToVBlank(self)

    def setSwapGroup(self, *args):
        """setSwapGroup(self, bool on, GLuint group, GLuint barrier)"""
        return _osgViewer.GraphicsWindow_setSwapGroup(self, *args)

    def getSwapGroup(self, *args):
        """getSwapGroup(self, bool on, GLuint group, GLuint barrier)"""
        return _osgViewer.GraphicsWindow_getSwapGroup(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osgViewer.GraphicsWindow_valid(self)

    def realizeImplementation(self):
        """realizeImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_realizeImplementation(self)

    def isRealizedImplementation(self):
        """isRealizedImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_isRealizedImplementation(self)

    def closeImplementation(self):
        """closeImplementation(self)"""
        return _osgViewer.GraphicsWindow_closeImplementation(self)

    def makeCurrentImplementation(self):
        """makeCurrentImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_makeCurrentImplementation(self)

    def makeContextCurrentImplementation(self, *args):
        """makeContextCurrentImplementation(self, GraphicsContext arg0) -> bool"""
        return _osgViewer.GraphicsWindow_makeContextCurrentImplementation(self, *args)

    def releaseContextImplementation(self):
        """releaseContextImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindow_releaseContextImplementation(self)

    def bindPBufferToTextureImplementation(self, *args):
        """bindPBufferToTextureImplementation(self, GLenum arg0)"""
        return _osgViewer.GraphicsWindow_bindPBufferToTextureImplementation(self, *args)

    def swapBuffersImplementation(self):
        """swapBuffersImplementation(self)"""
        return _osgViewer.GraphicsWindow_swapBuffersImplementation(self)

    def getViews(self, *args):
        """getViews(self, Views views)"""
        return _osgViewer.GraphicsWindow_getViews(self, *args)

    def requestRedraw(self):
        """requestRedraw(self)"""
        return _osgViewer.GraphicsWindow_requestRedraw(self)

    def requestContinuousUpdate(self, arg0 = True):
        """
        requestContinuousUpdate(self, bool arg0 = True)
        requestContinuousUpdate(self)
        """
        return _osgViewer.GraphicsWindow_requestContinuousUpdate(self, arg0)

    def requestWarpPointer(self, *args):
        """requestWarpPointer(self, float arg0, float arg1)"""
        return _osgViewer.GraphicsWindow_requestWarpPointer(self, *args)

    __swig_destroy__ = _osgViewer.delete_GraphicsWindow
    __del__ = lambda self : None;
GraphicsWindow_swigregister = _osgViewer.GraphicsWindow_swigregister
GraphicsWindow_swigregister(GraphicsWindow)

class GraphicsWindowEmbedded(GraphicsWindow):
    """Proxy of C++ osgViewer::GraphicsWindowEmbedded class"""
    __swig_setmethods__ = {}
    for _s in [GraphicsWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsWindowEmbedded, name, value)
    __swig_getmethods__ = {}
    for _s in [GraphicsWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsWindowEmbedded, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, osg::GraphicsContext::Traits traits = None) -> GraphicsWindowEmbedded
        __init__(self) -> GraphicsWindowEmbedded
        __init__(self, int x, int y, int width, int height) -> GraphicsWindowEmbedded
        """
        this = _osgViewer.new_GraphicsWindowEmbedded(*args)
        try: self.this.append(this)
        except: self.this = this
    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object object) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgViewer.GraphicsWindowEmbedded_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgViewer.GraphicsWindowEmbedded_className(self)

    def init(self):
        """init(self)"""
        return _osgViewer.GraphicsWindowEmbedded_init(self)

    def valid(self):
        """valid(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_valid(self)

    def realizeImplementation(self):
        """realizeImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_realizeImplementation(self)

    def isRealizedImplementation(self):
        """isRealizedImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_isRealizedImplementation(self)

    def closeImplementation(self):
        """closeImplementation(self)"""
        return _osgViewer.GraphicsWindowEmbedded_closeImplementation(self)

    def makeCurrentImplementation(self):
        """makeCurrentImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_makeCurrentImplementation(self)

    def releaseContextImplementation(self):
        """releaseContextImplementation(self) -> bool"""
        return _osgViewer.GraphicsWindowEmbedded_releaseContextImplementation(self)

    def swapBuffersImplementation(self):
        """swapBuffersImplementation(self)"""
        return _osgViewer.GraphicsWindowEmbedded_swapBuffersImplementation(self)

    def grabFocus(self):
        """grabFocus(self)"""
        return _osgViewer.GraphicsWindowEmbedded_grabFocus(self)

    def grabFocusIfPointerInWindow(self):
        """grabFocusIfPointerInWindow(self)"""
        return _osgViewer.GraphicsWindowEmbedded_grabFocusIfPointerInWindow(self)

    def raiseWindow(self):
        """raiseWindow(self)"""
        return _osgViewer.GraphicsWindowEmbedded_raiseWindow(self)

    __swig_destroy__ = _osgViewer.delete_GraphicsWindowEmbedded
    __del__ = lambda self : None;
GraphicsWindowEmbedded_swigregister = _osgViewer.GraphicsWindowEmbedded_swigregister
GraphicsWindowEmbedded_swigregister(GraphicsWindowEmbedded)

class GraphicsWindowFunctionProxy(_object):
    """Proxy of C++ osgViewer::GraphicsWindowFunctionProxy class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GraphicsWindowFunctionProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GraphicsWindowFunctionProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, CGraphicsWindowFunction function) -> GraphicsWindowFunctionProxy"""
        this = _osgViewer.new_GraphicsWindowFunctionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgViewer.delete_GraphicsWindowFunctionProxy
    __del__ = lambda self : None;
GraphicsWindowFunctionProxy_swigregister = _osgViewer.GraphicsWindowFunctionProxy_swigregister
GraphicsWindowFunctionProxy_swigregister(GraphicsWindowFunctionProxy)

OSGVIEWER_SCENE = _osgViewer.OSGVIEWER_SCENE
class Scene(osg.Referenced):
    """Proxy of C++ osgViewer::Scene class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scene, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scene, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def className(self):
        """className(self) -> char"""
        return _osgViewer.Scene_className(self)

    def setSceneData(self, *args):
        """setSceneData(self, Node node)"""
        return _osgViewer.Scene_setSceneData(self, *args)

    def getSceneData(self, *args):
        """
        getSceneData(self) -> Node
        getSceneData(self) -> Node
        """
        return _osgViewer.Scene_getSceneData(self, *args)

    def setDatabasePager(self, *args):
        """setDatabasePager(self, osgDB::DatabasePager dp)"""
        return _osgViewer.Scene_setDatabasePager(self, *args)

    def getDatabasePager(self, *args):
        """
        getDatabasePager(self) -> osgDB::DatabasePager
        getDatabasePager(self) -> osgDB::DatabasePager
        """
        return _osgViewer.Scene_getDatabasePager(self, *args)

    def setImagePager(self, *args):
        """setImagePager(self, osgDB::ImagePager ip)"""
        return _osgViewer.Scene_setImagePager(self, *args)

    def getImagePager(self, *args):
        """
        getImagePager(self) -> osgDB::ImagePager
        getImagePager(self) -> osgDB::ImagePager
        """
        return _osgViewer.Scene_getImagePager(self, *args)

    def updateSceneGraph(self, *args):
        """updateSceneGraph(self, NodeVisitor updateVisitor)"""
        return _osgViewer.Scene_updateSceneGraph(self, *args)

    def getScene(*args):
        """getScene(Node node) -> Scene"""
        return _osgViewer.Scene_getScene(*args)

    if _newclass:getScene = staticmethod(getScene)
    __swig_getmethods__["getScene"] = lambda x: getScene
Scene_swigregister = _osgViewer.Scene_swigregister
Scene_swigregister(Scene)

def Scene_getScene(*args):
  """Scene_getScene(Node node) -> Scene"""
  return _osgViewer.Scene_getScene(*args)

class Windows(_object):
    """Proxy of C++ std::vector<(p.osgViewer::GraphicsWindow)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Windows, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Windows, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osgViewer.Windows_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Windows___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osgViewer.Windows___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osgViewer.Windows___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osgViewer.Windows_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> Windows"""
        return _osgViewer.Windows___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, Windows v)"""
        return _osgViewer.Windows___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Windows___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osgViewer.Windows___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Windows
        __getitem__(self, difference_type i) -> value_type
        """
        return _osgViewer.Windows___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Windows v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osgViewer.Windows___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osgViewer.Windows_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osgViewer.Windows_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osgViewer.Windows_size(self)

    def clear(self):
        """clear(self)"""
        return _osgViewer.Windows_clear(self)

    def swap(self, *args):
        """swap(self, Windows v)"""
        return _osgViewer.Windows_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Windows_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osgViewer.Windows_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osgViewer.Windows_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Windows_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Windows_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osgViewer.Windows_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Windows_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Windows
        __init__(self, Windows arg0) -> Windows
        __init__(self, size_type size) -> Windows
        __init__(self, size_type size, value_type value) -> Windows
        """
        this = _osgViewer.new_Windows(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osgViewer.Windows_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osgViewer.Windows_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osgViewer.Windows_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Windows_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Windows_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Windows_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osgViewer.Windows_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osgViewer.Windows_capacity(self)

    __swig_destroy__ = _osgViewer.delete_Windows
    __del__ = lambda self : None;
Windows_swigregister = _osgViewer.Windows_swigregister
Windows_swigregister(Windows)

class Contexts(_object):
    """Proxy of C++ std::vector<(p.osg::GraphicsContext)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contexts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contexts, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osgViewer.Contexts_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Contexts___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osgViewer.Contexts___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osgViewer.Contexts___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osgViewer.Contexts_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> Contexts"""
        return _osgViewer.Contexts___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, Contexts v)"""
        return _osgViewer.Contexts___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Contexts___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osgViewer.Contexts___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Contexts
        __getitem__(self, difference_type i) -> value_type
        """
        return _osgViewer.Contexts___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Contexts v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osgViewer.Contexts___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osgViewer.Contexts_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osgViewer.Contexts_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osgViewer.Contexts_size(self)

    def clear(self):
        """clear(self)"""
        return _osgViewer.Contexts_clear(self)

    def swap(self, *args):
        """swap(self, Contexts v)"""
        return _osgViewer.Contexts_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Contexts_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osgViewer.Contexts_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osgViewer.Contexts_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Contexts_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Contexts_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osgViewer.Contexts_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Contexts_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Contexts
        __init__(self, Contexts arg0) -> Contexts
        __init__(self, size_type size) -> Contexts
        __init__(self, size_type size, value_type value) -> Contexts
        """
        this = _osgViewer.new_Contexts(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osgViewer.Contexts_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osgViewer.Contexts_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osgViewer.Contexts_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Contexts_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Contexts_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Contexts_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osgViewer.Contexts_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osgViewer.Contexts_capacity(self)

    __swig_destroy__ = _osgViewer.delete_Contexts
    __del__ = lambda self : None;
Contexts_swigregister = _osgViewer.Contexts_swigregister
Contexts_swigregister(Contexts)

class Cameras(_object):
    """Proxy of C++ std::vector<(p.osg::Camera)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cameras, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cameras, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osgViewer.Cameras_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Cameras___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osgViewer.Cameras___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osgViewer.Cameras___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osgViewer.Cameras_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> Cameras"""
        return _osgViewer.Cameras___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, Cameras v)"""
        return _osgViewer.Cameras___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Cameras___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osgViewer.Cameras___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Cameras
        __getitem__(self, difference_type i) -> value_type
        """
        return _osgViewer.Cameras___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Cameras v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osgViewer.Cameras___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osgViewer.Cameras_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osgViewer.Cameras_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osgViewer.Cameras_size(self)

    def clear(self):
        """clear(self)"""
        return _osgViewer.Cameras_clear(self)

    def swap(self, *args):
        """swap(self, Cameras v)"""
        return _osgViewer.Cameras_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Cameras_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osgViewer.Cameras_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osgViewer.Cameras_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Cameras_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Cameras_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osgViewer.Cameras_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Cameras_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Cameras
        __init__(self, Cameras arg0) -> Cameras
        __init__(self, size_type size) -> Cameras
        __init__(self, size_type size, value_type value) -> Cameras
        """
        this = _osgViewer.new_Cameras(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osgViewer.Cameras_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osgViewer.Cameras_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osgViewer.Cameras_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Cameras_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Cameras_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Cameras_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osgViewer.Cameras_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osgViewer.Cameras_capacity(self)

    __swig_destroy__ = _osgViewer.delete_Cameras
    __del__ = lambda self : None;
Cameras_swigregister = _osgViewer.Cameras_swigregister
Cameras_swigregister(Cameras)

class Scenes(_object):
    """Proxy of C++ std::vector<(p.osgViewer::Scene)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scenes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scenes, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osgViewer.Scenes_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Scenes___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osgViewer.Scenes___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osgViewer.Scenes___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osgViewer.Scenes_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> Scenes"""
        return _osgViewer.Scenes___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, Scenes v)"""
        return _osgViewer.Scenes___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Scenes___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osgViewer.Scenes___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Scenes
        __getitem__(self, difference_type i) -> value_type
        """
        return _osgViewer.Scenes___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Scenes v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osgViewer.Scenes___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osgViewer.Scenes_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osgViewer.Scenes_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osgViewer.Scenes_size(self)

    def clear(self):
        """clear(self)"""
        return _osgViewer.Scenes_clear(self)

    def swap(self, *args):
        """swap(self, Scenes v)"""
        return _osgViewer.Scenes_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Scenes_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osgViewer.Scenes_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osgViewer.Scenes_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Scenes_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Scenes_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osgViewer.Scenes_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Scenes_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Scenes
        __init__(self, Scenes arg0) -> Scenes
        __init__(self, size_type size) -> Scenes
        __init__(self, size_type size, value_type value) -> Scenes
        """
        this = _osgViewer.new_Scenes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osgViewer.Scenes_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osgViewer.Scenes_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osgViewer.Scenes_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Scenes_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Scenes_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Scenes_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osgViewer.Scenes_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osgViewer.Scenes_capacity(self)

    __swig_destroy__ = _osgViewer.delete_Scenes
    __del__ = lambda self : None;
Scenes_swigregister = _osgViewer.Scenes_swigregister
Scenes_swigregister(Scenes)

class Views(_object):
    """Proxy of C++ std::vector<(p.osgViewer::View)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Views, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Views, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _osgViewer.Views_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _osgViewer.Views___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _osgViewer.Views___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _osgViewer.Views___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _osgViewer.Views_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> Views"""
        return _osgViewer.Views___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, Views v)"""
        return _osgViewer.Views___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _osgViewer.Views___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _osgViewer.Views___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Views
        __getitem__(self, difference_type i) -> value_type
        """
        return _osgViewer.Views___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Views v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _osgViewer.Views___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _osgViewer.Views_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _osgViewer.Views_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _osgViewer.Views_size(self)

    def clear(self):
        """clear(self)"""
        return _osgViewer.Views_clear(self)

    def swap(self, *args):
        """swap(self, Views v)"""
        return _osgViewer.Views_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _osgViewer.Views_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _osgViewer.Views_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _osgViewer.Views_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _osgViewer.Views_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _osgViewer.Views_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _osgViewer.Views_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _osgViewer.Views_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Views
        __init__(self, Views arg0) -> Views
        __init__(self, size_type size) -> Views
        __init__(self, size_type size, value_type value) -> Views
        """
        this = _osgViewer.new_Views(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _osgViewer.Views_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _osgViewer.Views_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _osgViewer.Views_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _osgViewer.Views_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _osgViewer.Views_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _osgViewer.Views_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _osgViewer.Views_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _osgViewer.Views_capacity(self)

    __swig_destroy__ = _osgViewer.delete_Views
    __del__ = lambda self : None;
Views_swigregister = _osgViewer.Views_swigregister
Views_swigregister(Views)

OSGVIEWER_VIEWERBASE = _osgViewer.OSGVIEWER_VIEWERBASE
class ViewerBase(osg.Object):
    """Proxy of C++ osgViewer::ViewerBase class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerBase, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setViewerStats(self, *args):
        """setViewerStats(self, Stats stats)"""
        return _osgViewer.ViewerBase_setViewerStats(self, *args)

    def getViewerStats(self, *args):
        """
        getViewerStats(self) -> Stats
        getViewerStats(self) -> Stats
        """
        return _osgViewer.ViewerBase_getViewerStats(self, *args)

    def readConfiguration(self, *args):
        """readConfiguration(self, string filename) -> bool"""
        return _osgViewer.ViewerBase_readConfiguration(self, *args)

    def isRealized(self):
        """isRealized(self) -> bool"""
        return _osgViewer.ViewerBase_isRealized(self)

    def realize(self):
        """realize(self)"""
        return _osgViewer.ViewerBase_realize(self)

    SingleThreaded = _osgViewer.ViewerBase_SingleThreaded
    CullDrawThreadPerContext = _osgViewer.ViewerBase_CullDrawThreadPerContext
    ThreadPerContext = _osgViewer.ViewerBase_ThreadPerContext
    DrawThreadPerContext = _osgViewer.ViewerBase_DrawThreadPerContext
    CullThreadPerCameraDrawThreadPerContext = _osgViewer.ViewerBase_CullThreadPerCameraDrawThreadPerContext
    ThreadPerCamera = _osgViewer.ViewerBase_ThreadPerCamera
    AutomaticSelection = _osgViewer.ViewerBase_AutomaticSelection
    def setThreadingModel(self, *args):
        """setThreadingModel(self, ThreadingModel threadingModel)"""
        return _osgViewer.ViewerBase_setThreadingModel(self, *args)

    def getThreadingModel(self):
        """getThreadingModel(self) -> ThreadingModel"""
        return _osgViewer.ViewerBase_getThreadingModel(self)

    def suggestBestThreadingModel(self):
        """suggestBestThreadingModel(self) -> ThreadingModel"""
        return _osgViewer.ViewerBase_suggestBestThreadingModel(self)

    def setUpThreading(self):
        """setUpThreading(self)"""
        return _osgViewer.ViewerBase_setUpThreading(self)

    def areThreadsRunning(self):
        """areThreadsRunning(self) -> bool"""
        return _osgViewer.ViewerBase_areThreadsRunning(self)

    def stopThreading(self):
        """stopThreading(self)"""
        return _osgViewer.ViewerBase_stopThreading(self)

    def startThreading(self):
        """startThreading(self)"""
        return _osgViewer.ViewerBase_startThreading(self)

    BeforeSwapBuffers = _osgViewer.ViewerBase_BeforeSwapBuffers
    AfterSwapBuffers = _osgViewer.ViewerBase_AfterSwapBuffers
    def setEndBarrierPosition(self, *args):
        """setEndBarrierPosition(self, BarrierPosition bp)"""
        return _osgViewer.ViewerBase_setEndBarrierPosition(self, *args)

    def getEndBarrierPosition(self):
        """getEndBarrierPosition(self) -> BarrierPosition"""
        return _osgViewer.ViewerBase_getEndBarrierPosition(self)

    def setDone(self, *args):
        """setDone(self, bool done)"""
        return _osgViewer.ViewerBase_setDone(self, *args)

    def done(self):
        """done(self) -> bool"""
        return _osgViewer.ViewerBase_done(self)

    def setEventVisitor(self, *args):
        """setEventVisitor(self, EventVisitor eventVisitor)"""
        return _osgViewer.ViewerBase_setEventVisitor(self, *args)

    def getEventVisitor(self, *args):
        """
        getEventVisitor(self) -> EventVisitor
        getEventVisitor(self) -> EventVisitor
        """
        return _osgViewer.ViewerBase_getEventVisitor(self, *args)

    def setKeyEventSetsDone(self, *args):
        """setKeyEventSetsDone(self, int key)"""
        return _osgViewer.ViewerBase_setKeyEventSetsDone(self, *args)

    def getKeyEventSetsDone(self):
        """getKeyEventSetsDone(self) -> int"""
        return _osgViewer.ViewerBase_getKeyEventSetsDone(self)

    def setQuitEventSetsDone(self, *args):
        """setQuitEventSetsDone(self, bool flag)"""
        return _osgViewer.ViewerBase_setQuitEventSetsDone(self, *args)

    def getQuitEventSetsDone(self):
        """getQuitEventSetsDone(self) -> bool"""
        return _osgViewer.ViewerBase_getQuitEventSetsDone(self)

    def setReleaseContextAtEndOfFrameHint(self, *args):
        """setReleaseContextAtEndOfFrameHint(self, bool hint)"""
        return _osgViewer.ViewerBase_setReleaseContextAtEndOfFrameHint(self, *args)

    def getReleaseContextAtEndOfFrameHint(self):
        """getReleaseContextAtEndOfFrameHint(self) -> bool"""
        return _osgViewer.ViewerBase_getReleaseContextAtEndOfFrameHint(self)

    def setUpdateVisitor(self, *args):
        """setUpdateVisitor(self, osgUtil::UpdateVisitor updateVisitor)"""
        return _osgViewer.ViewerBase_setUpdateVisitor(self, *args)

    def getUpdateVisitor(self, *args):
        """
        getUpdateVisitor(self) -> osgUtil::UpdateVisitor
        getUpdateVisitor(self) -> osgUtil::UpdateVisitor
        """
        return _osgViewer.ViewerBase_getUpdateVisitor(self, *args)

    def setUpdateOperations(self, *args):
        """setUpdateOperations(self, OperationQueue operations)"""
        return _osgViewer.ViewerBase_setUpdateOperations(self, *args)

    def getUpdateOperations(self, *args):
        """
        getUpdateOperations(self) -> OperationQueue
        getUpdateOperations(self) -> OperationQueue
        """
        return _osgViewer.ViewerBase_getUpdateOperations(self, *args)

    def addUpdateOperation(self, *args):
        """addUpdateOperation(self, Operation operation)"""
        return _osgViewer.ViewerBase_addUpdateOperation(self, *args)

    def removeUpdateOperation(self, *args):
        """removeUpdateOperation(self, Operation operation)"""
        return _osgViewer.ViewerBase_removeUpdateOperation(self, *args)

    def setRealizeOperation(self, *args):
        """setRealizeOperation(self, Operation op)"""
        return _osgViewer.ViewerBase_setRealizeOperation(self, *args)

    def getRealizeOperation(self):
        """getRealizeOperation(self) -> Operation"""
        return _osgViewer.ViewerBase_getRealizeOperation(self)

    def setIncrementalCompileOperation(self, *args):
        """setIncrementalCompileOperation(self, osgUtil::IncrementalCompileOperation ico)"""
        return _osgViewer.ViewerBase_setIncrementalCompileOperation(self, *args)

    def getIncrementalCompileOperation(self):
        """getIncrementalCompileOperation(self) -> osgUtil::IncrementalCompileOperation"""
        return _osgViewer.ViewerBase_getIncrementalCompileOperation(self)

    ON_DEMAND = _osgViewer.ViewerBase_ON_DEMAND
    CONTINUOUS = _osgViewer.ViewerBase_CONTINUOUS
    def setRunFrameScheme(self, *args):
        """setRunFrameScheme(self, FrameScheme fs)"""
        return _osgViewer.ViewerBase_setRunFrameScheme(self, *args)

    def getRunFrameScheme(self):
        """getRunFrameScheme(self) -> FrameScheme"""
        return _osgViewer.ViewerBase_getRunFrameScheme(self)

    def setRunMaxFrameRate(self, *args):
        """setRunMaxFrameRate(self, double frameRate)"""
        return _osgViewer.ViewerBase_setRunMaxFrameRate(self, *args)

    def getRunMaxFrameRate(self):
        """getRunMaxFrameRate(self) -> double"""
        return _osgViewer.ViewerBase_getRunMaxFrameRate(self)

    def run(self):
        """run(self) -> int"""
        return _osgViewer.ViewerBase_run(self)

    def checkNeedToDoFrame(self):
        """checkNeedToDoFrame(self) -> bool"""
        return _osgViewer.ViewerBase_checkNeedToDoFrame(self)

    def frameAtTime(self, *args):
        """frameAtTime(self, double simulationTime = DBL_MAX)"""
        return _osgViewer.ViewerBase_frameAtTime(self, *args)

    def frame(self, *args):
        """frame(self)"""
        return _osgViewer.ViewerBase_frame(self, *args)

    def advance(self, *args):
        """
        advance(self, double simulationTime = DBL_MAX)
        advance(self)
        """
        return _osgViewer.ViewerBase_advance(self, *args)

    def eventTraversal(self):
        """eventTraversal(self)"""
        return _osgViewer.ViewerBase_eventTraversal(self)

    def updateTraversal(self):
        """updateTraversal(self)"""
        return _osgViewer.ViewerBase_updateTraversal(self)

    def renderingTraversals(self):
        """renderingTraversals(self)"""
        return _osgViewer.ViewerBase_renderingTraversals(self)

    def getCameras(self, *args):
        """
        getCameras(self, Cameras cameras, bool onlyActive = True)
        getCameras(self, Cameras cameras)
        """
        return _osgViewer.ViewerBase_getCameras(self, *args)

    def getContexts(self, *args):
        """
        getContexts(self, Contexts contexts, bool onlyValid = True)
        getContexts(self, Contexts contexts)
        """
        return _osgViewer.ViewerBase_getContexts(self, *args)

    def getWindows(self, *args):
        """
        getWindows(self, Windows windows, bool onlyValid = True)
        getWindows(self, Windows windows)
        """
        return _osgViewer.ViewerBase_getWindows(self, *args)

    def getAllThreads(self, *args):
        """
        getAllThreads(self, Threads threads, bool onlyActive = True)
        getAllThreads(self, Threads threads)
        """
        return _osgViewer.ViewerBase_getAllThreads(self, *args)

    def getOperationThreads(self, *args):
        """
        getOperationThreads(self, OperationThreads threads, bool onlyActive = True)
        getOperationThreads(self, OperationThreads threads)
        """
        return _osgViewer.ViewerBase_getOperationThreads(self, *args)

    def getScenes(self, *args):
        """
        getScenes(self, Scenes scenes, bool onlyValid = True)
        getScenes(self, Scenes scenes)
        """
        return _osgViewer.ViewerBase_getScenes(self, *args)

    def getViews(self, *args):
        """
        getViews(self, Views views, bool onlyValid = True)
        getViews(self, Views views)
        """
        return _osgViewer.ViewerBase_getViews(self, *args)

    def checkWindowStatus(self, *args):
        """
        checkWindowStatus(self)
        checkWindowStatus(self, Contexts contexts)
        """
        return _osgViewer.ViewerBase_checkWindowStatus(self, *args)

    def elapsedTime(self):
        """elapsedTime(self) -> double"""
        return _osgViewer.ViewerBase_elapsedTime(self)

    def getViewerFrameStamp(self):
        """getViewerFrameStamp(self) -> FrameStamp"""
        return _osgViewer.ViewerBase_getViewerFrameStamp(self)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.ViewerBase_getUsage(self, *args)

    __swig_destroy__ = _osgViewer.delete_ViewerBase
    __del__ = lambda self : None;
ViewerBase_swigregister = _osgViewer.ViewerBase_swigregister
ViewerBase_swigregister(ViewerBase)

OSGVIEWER_Viewer = _osgViewer.OSGVIEWER_Viewer
class Viewer(ViewerBase,View):
    """Proxy of C++ osgViewer::Viewer class"""
    __swig_setmethods__ = {}
    for _s in [ViewerBase,View]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewer, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewerBase,View]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Viewer
        __init__(self, ArgumentParser arguments) -> Viewer
        __init__(self, Viewer viewer, CopyOp copyop = SHALLOW_COPY) -> Viewer
        __init__(self, Viewer viewer) -> Viewer
        """
        this = _osgViewer.new_Viewer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgViewer.delete_Viewer
    __del__ = lambda self : None;
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgViewer.Viewer_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.Viewer_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.Viewer_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgViewer.Viewer_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgViewer.Viewer_className(self)

    def take(self, *args):
        """take(self, View rhs)"""
        return _osgViewer.Viewer_take(self, *args)

    def setViewerStats(self, *args):
        """setViewerStats(self, Stats stats)"""
        return _osgViewer.Viewer_setViewerStats(self, *args)

    def getViewerStats(self, *args):
        """
        getViewerStats(self) -> Stats
        getViewerStats(self) -> Stats
        """
        return _osgViewer.Viewer_getViewerStats(self, *args)

    def readConfiguration(self, *args):
        """readConfiguration(self, string filename) -> bool"""
        return _osgViewer.Viewer_readConfiguration(self, *args)

    def isRealized(self):
        """isRealized(self) -> bool"""
        return _osgViewer.Viewer_isRealized(self)

    def realize(self):
        """realize(self)"""
        return _osgViewer.Viewer_realize(self)

    def setStartTick(self, *args):
        """setStartTick(self, Timer_t tick)"""
        return _osgViewer.Viewer_setStartTick(self, *args)

    def setReferenceTime(self, time = 0.0):
        """
        setReferenceTime(self, double time = 0.0)
        setReferenceTime(self)
        """
        return _osgViewer.Viewer_setReferenceTime(self, time)

    def setSceneData(self, *args):
        """setSceneData(self, Node node)"""
        return _osgViewer.Viewer_setSceneData(self, *args)

    def setUpViewerAsEmbeddedInWindow(self, *args):
        """setUpViewerAsEmbeddedInWindow(self, int x, int y, int width, int height) -> GraphicsWindowEmbedded"""
        return _osgViewer.Viewer_setUpViewerAsEmbeddedInWindow(self, *args)

    def elapsedTime(self):
        """elapsedTime(self) -> double"""
        return _osgViewer.Viewer_elapsedTime(self)

    def getViewerFrameStamp(self):
        """getViewerFrameStamp(self) -> FrameStamp"""
        return _osgViewer.Viewer_getViewerFrameStamp(self)

    def run(self):
        """run(self) -> int"""
        return _osgViewer.Viewer_run(self)

    def checkNeedToDoFrame(self):
        """checkNeedToDoFrame(self) -> bool"""
        return _osgViewer.Viewer_checkNeedToDoFrame(self)

    def advance(self, *args):
        """
        advance(self, double simulationTime = DBL_MAX)
        advance(self)
        """
        return _osgViewer.Viewer_advance(self, *args)

    def eventTraversal(self):
        """eventTraversal(self)"""
        return _osgViewer.Viewer_eventTraversal(self)

    def updateTraversal(self):
        """updateTraversal(self)"""
        return _osgViewer.Viewer_updateTraversal(self)

    def setCameraWithFocus(self, *args):
        """setCameraWithFocus(self, Camera camera)"""
        return _osgViewer.Viewer_setCameraWithFocus(self, *args)

    def getCameraWithFocus(self, *args):
        """
        getCameraWithFocus(self) -> Camera
        getCameraWithFocus(self) -> Camera
        """
        return _osgViewer.Viewer_getCameraWithFocus(self, *args)

    def getCameras(self, *args):
        """
        getCameras(self, Cameras cameras, bool onlyActive = True)
        getCameras(self, Cameras cameras)
        """
        return _osgViewer.Viewer_getCameras(self, *args)

    def getContexts(self, *args):
        """
        getContexts(self, Contexts contexts, bool onlyValid = True)
        getContexts(self, Contexts contexts)
        """
        return _osgViewer.Viewer_getContexts(self, *args)

    def getAllThreads(self, *args):
        """
        getAllThreads(self, Threads threads, bool onlyActive = True)
        getAllThreads(self, Threads threads)
        """
        return _osgViewer.Viewer_getAllThreads(self, *args)

    def getOperationThreads(self, *args):
        """
        getOperationThreads(self, OperationThreads threads, bool onlyActive = True)
        getOperationThreads(self, OperationThreads threads)
        """
        return _osgViewer.Viewer_getOperationThreads(self, *args)

    def getScenes(self, *args):
        """
        getScenes(self, Scenes scenes, bool onlyValid = True)
        getScenes(self, Scenes scenes)
        """
        return _osgViewer.Viewer_getScenes(self, *args)

    def getViews(self, *args):
        """
        getViews(self, Views views, bool onlyValid = True)
        getViews(self, Views views)
        """
        return _osgViewer.Viewer_getViews(self, *args)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.Viewer_getUsage(self, *args)

Viewer_swigregister = _osgViewer.Viewer_swigregister
Viewer_swigregister(Viewer)

OSGVIEWER_CompositeViewer = _osgViewer.OSGVIEWER_CompositeViewer
class CompositeViewer(ViewerBase):
    """Proxy of C++ osgViewer::CompositeViewer class"""
    __swig_setmethods__ = {}
    for _s in [ViewerBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompositeViewer, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewerBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CompositeViewer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CompositeViewer
        __init__(self, CompositeViewer arg0, CopyOp copyop = SHALLOW_COPY) -> CompositeViewer
        __init__(self, CompositeViewer arg0) -> CompositeViewer
        __init__(self, ArgumentParser arguments) -> CompositeViewer
        """
        this = _osgViewer.new_CompositeViewer(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgViewer.CompositeViewer_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.CompositeViewer_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.CompositeViewer_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgViewer.CompositeViewer_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgViewer.CompositeViewer_className(self)

    __swig_destroy__ = _osgViewer.delete_CompositeViewer
    __del__ = lambda self : None;
    def readConfiguration(self, *args):
        """readConfiguration(self, string filename) -> bool"""
        return _osgViewer.CompositeViewer_readConfiguration(self, *args)

    def setViewerStats(self, *args):
        """setViewerStats(self, Stats stats)"""
        return _osgViewer.CompositeViewer_setViewerStats(self, *args)

    def getViewerStats(self, *args):
        """
        getViewerStats(self) -> Stats
        getViewerStats(self) -> Stats
        """
        return _osgViewer.CompositeViewer_getViewerStats(self, *args)

    def addView(self, *args):
        """addView(self, View view)"""
        return _osgViewer.CompositeViewer_addView(self, *args)

    def removeView(self, *args):
        """removeView(self, View view)"""
        return _osgViewer.CompositeViewer_removeView(self, *args)

    def getView(self, *args):
        """
        getView(self, unsigned int i) -> View
        getView(self, unsigned int i) -> View
        """
        return _osgViewer.CompositeViewer_getView(self, *args)

    def getNumViews(self):
        """getNumViews(self) -> unsigned int"""
        return _osgViewer.CompositeViewer_getNumViews(self)

    def isRealized(self):
        """isRealized(self) -> bool"""
        return _osgViewer.CompositeViewer_isRealized(self)

    def realize(self):
        """realize(self)"""
        return _osgViewer.CompositeViewer_realize(self)

    def setStartTick(self, *args):
        """setStartTick(self, Timer_t tick)"""
        return _osgViewer.CompositeViewer_setStartTick(self, *args)

    def setReferenceTime(self, time = 0.0):
        """
        setReferenceTime(self, double time = 0.0)
        setReferenceTime(self)
        """
        return _osgViewer.CompositeViewer_setReferenceTime(self, time)

    def getFrameStamp(self, *args):
        """
        getFrameStamp(self) -> FrameStamp
        getFrameStamp(self) -> FrameStamp
        """
        return _osgViewer.CompositeViewer_getFrameStamp(self, *args)

    def elapsedTime(self):
        """elapsedTime(self) -> double"""
        return _osgViewer.CompositeViewer_elapsedTime(self)

    def getViewerFrameStamp(self):
        """getViewerFrameStamp(self) -> FrameStamp"""
        return _osgViewer.CompositeViewer_getViewerFrameStamp(self)

    def run(self):
        """run(self) -> int"""
        return _osgViewer.CompositeViewer_run(self)

    def checkNeedToDoFrame(self):
        """checkNeedToDoFrame(self) -> bool"""
        return _osgViewer.CompositeViewer_checkNeedToDoFrame(self)

    def advance(self, *args):
        """
        advance(self, double simulationTime = DBL_MAX)
        advance(self)
        """
        return _osgViewer.CompositeViewer_advance(self, *args)

    def eventTraversal(self):
        """eventTraversal(self)"""
        return _osgViewer.CompositeViewer_eventTraversal(self)

    def updateTraversal(self):
        """updateTraversal(self)"""
        return _osgViewer.CompositeViewer_updateTraversal(self)

    def setCameraWithFocus(self, *args):
        """setCameraWithFocus(self, Camera camera)"""
        return _osgViewer.CompositeViewer_setCameraWithFocus(self, *args)

    def getCameraWithFocus(self, *args):
        """
        getCameraWithFocus(self) -> Camera
        getCameraWithFocus(self) -> Camera
        """
        return _osgViewer.CompositeViewer_getCameraWithFocus(self, *args)

    def getViewWithFocus(self, *args):
        """
        getViewWithFocus(self) -> View
        getViewWithFocus(self) -> View
        """
        return _osgViewer.CompositeViewer_getViewWithFocus(self, *args)

    def getCameras(self, *args):
        """
        getCameras(self, Cameras cameras, bool onlyActive = True)
        getCameras(self, Cameras cameras)
        """
        return _osgViewer.CompositeViewer_getCameras(self, *args)

    def getContexts(self, *args):
        """
        getContexts(self, Contexts contexts, bool onlyValid = True)
        getContexts(self, Contexts contexts)
        """
        return _osgViewer.CompositeViewer_getContexts(self, *args)

    def getScenes(self, *args):
        """
        getScenes(self, Scenes scenes, bool onlyValid = True)
        getScenes(self, Scenes scenes)
        """
        return _osgViewer.CompositeViewer_getScenes(self, *args)

    def getViews(self, *args):
        """
        getViews(self, Views views, bool onlyValid = True)
        getViews(self, Views views)
        """
        return _osgViewer.CompositeViewer_getViews(self, *args)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.CompositeViewer_getUsage(self, *args)

CompositeViewer_swigregister = _osgViewer.CompositeViewer_swigregister
CompositeViewer_swigregister(CompositeViewer)

OSGVIEWER_VIEWEREVENTHANDLERS = _osgViewer.OSGVIEWER_VIEWEREVENTHANDLERS
class HelpHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::HelpHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelpHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HelpHandler, name)
    __repr__ = _swig_repr
    def __init__(self, au = None): 
        """
        __init__(self, ApplicationUsage au = None) -> HelpHandler
        __init__(self) -> HelpHandler
        """
        this = _osgViewer.new_HelpHandler(au)
        try: self.this.append(this)
        except: self.this = this
    def setApplicationUsage(self, *args):
        """setApplicationUsage(self, ApplicationUsage au)"""
        return _osgViewer.HelpHandler_setApplicationUsage(self, *args)

    def getApplicationUsage(self, *args):
        """
        getApplicationUsage(self) -> ApplicationUsage
        getApplicationUsage(self) -> ApplicationUsage
        """
        return _osgViewer.HelpHandler_getApplicationUsage(self, *args)

    def setKeyEventTogglesOnScreenHelp(self, *args):
        """setKeyEventTogglesOnScreenHelp(self, int key)"""
        return _osgViewer.HelpHandler_setKeyEventTogglesOnScreenHelp(self, *args)

    def getKeyEventTogglesOnScreenHelp(self):
        """getKeyEventTogglesOnScreenHelp(self) -> int"""
        return _osgViewer.HelpHandler_getKeyEventTogglesOnScreenHelp(self)

    def reset(self):
        """reset(self)"""
        return _osgViewer.HelpHandler_reset(self)

    def getCamera(self, *args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgViewer.HelpHandler_getCamera(self, *args)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.HelpHandler_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.HelpHandler_getUsage(self, *args)

    __swig_destroy__ = _osgViewer.delete_HelpHandler
    __del__ = lambda self : None;
HelpHandler_swigregister = _osgViewer.HelpHandler_swigregister
HelpHandler_swigregister(HelpHandler)

class StatsHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::StatsHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatsHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> StatsHandler"""
        this = _osgViewer.new_StatsHandler()
        try: self.this.append(this)
        except: self.this = this
    NO_STATS = _osgViewer.StatsHandler_NO_STATS
    FRAME_RATE = _osgViewer.StatsHandler_FRAME_RATE
    VIEWER_STATS = _osgViewer.StatsHandler_VIEWER_STATS
    CAMERA_SCENE_STATS = _osgViewer.StatsHandler_CAMERA_SCENE_STATS
    VIEWER_SCENE_STATS = _osgViewer.StatsHandler_VIEWER_SCENE_STATS
    LAST = _osgViewer.StatsHandler_LAST
    def setKeyEventTogglesOnScreenStats(self, *args):
        """setKeyEventTogglesOnScreenStats(self, int key)"""
        return _osgViewer.StatsHandler_setKeyEventTogglesOnScreenStats(self, *args)

    def getKeyEventTogglesOnScreenStats(self):
        """getKeyEventTogglesOnScreenStats(self) -> int"""
        return _osgViewer.StatsHandler_getKeyEventTogglesOnScreenStats(self)

    def setKeyEventPrintsOutStats(self, *args):
        """setKeyEventPrintsOutStats(self, int key)"""
        return _osgViewer.StatsHandler_setKeyEventPrintsOutStats(self, *args)

    def getKeyEventPrintsOutStats(self):
        """getKeyEventPrintsOutStats(self) -> int"""
        return _osgViewer.StatsHandler_getKeyEventPrintsOutStats(self)

    def setKeyEventToggleVSync(self, *args):
        """setKeyEventToggleVSync(self, int key)"""
        return _osgViewer.StatsHandler_setKeyEventToggleVSync(self, *args)

    def getKeyEventToggleVSync(self):
        """getKeyEventToggleVSync(self) -> int"""
        return _osgViewer.StatsHandler_getKeyEventToggleVSync(self)

    def getBlockMultiplier(self):
        """getBlockMultiplier(self) -> double"""
        return _osgViewer.StatsHandler_getBlockMultiplier(self)

    def reset(self):
        """reset(self)"""
        return _osgViewer.StatsHandler_reset(self)

    def getCamera(self, *args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgViewer.StatsHandler_getCamera(self, *args)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.StatsHandler_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.StatsHandler_getUsage(self, *args)

    def addUserStatsLine(self, *args):
        """
        addUserStatsLine(self, string label, Vec4 textColor, Vec4 barColor, string timeTakenName, 
            float multiplier, bool average, 
            bool averageInInverseSpace, string beginTimeName, 
            string endTimeName, float maxValue)
        """
        return _osgViewer.StatsHandler_addUserStatsLine(self, *args)

    def removeUserStatsLine(self, *args):
        """removeUserStatsLine(self, string label)"""
        return _osgViewer.StatsHandler_removeUserStatsLine(self, *args)

    __swig_destroy__ = _osgViewer.delete_StatsHandler
    __del__ = lambda self : None;
StatsHandler_swigregister = _osgViewer.StatsHandler_swigregister
StatsHandler_swigregister(StatsHandler)

class WindowSizeHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::WindowSizeHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowSizeHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WindowSizeHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> WindowSizeHandler"""
        this = _osgViewer.new_WindowSizeHandler()
        try: self.this.append(this)
        except: self.this = this
    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.WindowSizeHandler_getUsage(self, *args)

    def setKeyEventToggleFullscreen(self, *args):
        """setKeyEventToggleFullscreen(self, int key)"""
        return _osgViewer.WindowSizeHandler_setKeyEventToggleFullscreen(self, *args)

    def getKeyEventToggleFullscreen(self):
        """getKeyEventToggleFullscreen(self) -> int"""
        return _osgViewer.WindowSizeHandler_getKeyEventToggleFullscreen(self)

    def setToggleFullscreen(self, *args):
        """setToggleFullscreen(self, bool flag)"""
        return _osgViewer.WindowSizeHandler_setToggleFullscreen(self, *args)

    def getToggleFullscreen(self):
        """getToggleFullscreen(self) -> bool"""
        return _osgViewer.WindowSizeHandler_getToggleFullscreen(self)

    def setKeyEventWindowedResolutionUp(self, *args):
        """setKeyEventWindowedResolutionUp(self, int key)"""
        return _osgViewer.WindowSizeHandler_setKeyEventWindowedResolutionUp(self, *args)

    def getKeyEventWindowedResolutionUp(self):
        """getKeyEventWindowedResolutionUp(self) -> int"""
        return _osgViewer.WindowSizeHandler_getKeyEventWindowedResolutionUp(self)

    def setKeyEventWindowedResolutionDown(self, *args):
        """setKeyEventWindowedResolutionDown(self, int key)"""
        return _osgViewer.WindowSizeHandler_setKeyEventWindowedResolutionDown(self, *args)

    def getKeyEventWindowedResolutionDown(self):
        """getKeyEventWindowedResolutionDown(self) -> int"""
        return _osgViewer.WindowSizeHandler_getKeyEventWindowedResolutionDown(self)

    def setChangeWindowedResolution(self, *args):
        """setChangeWindowedResolution(self, bool flag)"""
        return _osgViewer.WindowSizeHandler_setChangeWindowedResolution(self, *args)

    def getChangeWindowedResolution(self):
        """getChangeWindowedResolution(self) -> bool"""
        return _osgViewer.WindowSizeHandler_getChangeWindowedResolution(self)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.WindowSizeHandler_handle(self, *args)

    __swig_destroy__ = _osgViewer.delete_WindowSizeHandler
    __del__ = lambda self : None;
WindowSizeHandler_swigregister = _osgViewer.WindowSizeHandler_swigregister
WindowSizeHandler_swigregister(WindowSizeHandler)

class ThreadingHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::ThreadingHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThreadingHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThreadingHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ThreadingHandler"""
        this = _osgViewer.new_ThreadingHandler()
        try: self.this.append(this)
        except: self.this = this
    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.ThreadingHandler_getUsage(self, *args)

    def setKeyEventChangeThreadingModel(self, *args):
        """setKeyEventChangeThreadingModel(self, int key)"""
        return _osgViewer.ThreadingHandler_setKeyEventChangeThreadingModel(self, *args)

    def getKeyEventChangeThreadingModel(self):
        """getKeyEventChangeThreadingModel(self) -> int"""
        return _osgViewer.ThreadingHandler_getKeyEventChangeThreadingModel(self)

    def setChangeThreadingModel(self, *args):
        """setChangeThreadingModel(self, bool flag)"""
        return _osgViewer.ThreadingHandler_setChangeThreadingModel(self, *args)

    def getChangeThreadingModel(self):
        """getChangeThreadingModel(self) -> bool"""
        return _osgViewer.ThreadingHandler_getChangeThreadingModel(self)

    def setKeyEventChangeEndBarrierPosition(self, *args):
        """setKeyEventChangeEndBarrierPosition(self, int key)"""
        return _osgViewer.ThreadingHandler_setKeyEventChangeEndBarrierPosition(self, *args)

    def getKeyEventChangeEndBarrierPosition(self):
        """getKeyEventChangeEndBarrierPosition(self) -> int"""
        return _osgViewer.ThreadingHandler_getKeyEventChangeEndBarrierPosition(self)

    def setChangeEndBarrierPosition(self, *args):
        """setChangeEndBarrierPosition(self, bool flag)"""
        return _osgViewer.ThreadingHandler_setChangeEndBarrierPosition(self, *args)

    def getChangeEndBarrierPosition(self):
        """getChangeEndBarrierPosition(self) -> bool"""
        return _osgViewer.ThreadingHandler_getChangeEndBarrierPosition(self)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.ThreadingHandler_handle(self, *args)

    __swig_destroy__ = _osgViewer.delete_ThreadingHandler
    __del__ = lambda self : None;
ThreadingHandler_swigregister = _osgViewer.ThreadingHandler_swigregister
ThreadingHandler_swigregister(ThreadingHandler)

class RecordCameraPathHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::RecordCameraPathHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RecordCameraPathHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RecordCameraPathHandler, name)
    __repr__ = _swig_repr
    def __init__(self, filename = "saved_animation.path", fps = 25.0): 
        """
        __init__(self, string filename = "saved_animation.path", float fps = 25.0) -> RecordCameraPathHandler
        __init__(self, string filename = "saved_animation.path") -> RecordCameraPathHandler
        __init__(self) -> RecordCameraPathHandler
        """
        this = _osgViewer.new_RecordCameraPathHandler(filename, fps)
        try: self.this.append(this)
        except: self.this = this
    def setKeyEventToggleRecord(self, *args):
        """setKeyEventToggleRecord(self, int key)"""
        return _osgViewer.RecordCameraPathHandler_setKeyEventToggleRecord(self, *args)

    def getKeyEventToggleRecord(self):
        """getKeyEventToggleRecord(self) -> int"""
        return _osgViewer.RecordCameraPathHandler_getKeyEventToggleRecord(self)

    def setKeyEventTogglePlayback(self, *args):
        """setKeyEventTogglePlayback(self, int key)"""
        return _osgViewer.RecordCameraPathHandler_setKeyEventTogglePlayback(self, *args)

    def getKeyEventTogglePlayback(self):
        """getKeyEventTogglePlayback(self) -> int"""
        return _osgViewer.RecordCameraPathHandler_getKeyEventTogglePlayback(self)

    def setAutoIncrementFilename(self, autoinc = True):
        """
        setAutoIncrementFilename(self, bool autoinc = True)
        setAutoIncrementFilename(self)
        """
        return _osgViewer.RecordCameraPathHandler_setAutoIncrementFilename(self, autoinc)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.RecordCameraPathHandler_getUsage(self, *args)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.RecordCameraPathHandler_handle(self, *args)

    __swig_destroy__ = _osgViewer.delete_RecordCameraPathHandler
    __del__ = lambda self : None;
RecordCameraPathHandler_swigregister = _osgViewer.RecordCameraPathHandler_swigregister
RecordCameraPathHandler_swigregister(RecordCameraPathHandler)

class LODScaleHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::LODScaleHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LODScaleHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LODScaleHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> LODScaleHandler"""
        this = _osgViewer.new_LODScaleHandler()
        try: self.this.append(this)
        except: self.this = this
    def setKeyEventIncreaseLODScale(self, *args):
        """setKeyEventIncreaseLODScale(self, int key)"""
        return _osgViewer.LODScaleHandler_setKeyEventIncreaseLODScale(self, *args)

    def getKeyEventIncreaseLODScale(self):
        """getKeyEventIncreaseLODScale(self) -> int"""
        return _osgViewer.LODScaleHandler_getKeyEventIncreaseLODScale(self)

    def setKeyEventDecreaseLODScale(self, *args):
        """setKeyEventDecreaseLODScale(self, int key)"""
        return _osgViewer.LODScaleHandler_setKeyEventDecreaseLODScale(self, *args)

    def getKeyEventDecreaseLODScale(self):
        """getKeyEventDecreaseLODScale(self) -> int"""
        return _osgViewer.LODScaleHandler_getKeyEventDecreaseLODScale(self)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.LODScaleHandler_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.LODScaleHandler_getUsage(self, *args)

    __swig_destroy__ = _osgViewer.delete_LODScaleHandler
    __del__ = lambda self : None;
LODScaleHandler_swigregister = _osgViewer.LODScaleHandler_swigregister
LODScaleHandler_swigregister(LODScaleHandler)

class ToggleSyncToVBlankHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::ToggleSyncToVBlankHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToggleSyncToVBlankHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ToggleSyncToVBlankHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ToggleSyncToVBlankHandler"""
        this = _osgViewer.new_ToggleSyncToVBlankHandler()
        try: self.this.append(this)
        except: self.this = this
    def setKeyEventToggleSyncToVBlankHandler(self, *args):
        """setKeyEventToggleSyncToVBlankHandler(self, int key)"""
        return _osgViewer.ToggleSyncToVBlankHandler_setKeyEventToggleSyncToVBlankHandler(self, *args)

    def getKeyEventToggleSyncToVBlankHandler(self):
        """getKeyEventToggleSyncToVBlankHandler(self) -> int"""
        return _osgViewer.ToggleSyncToVBlankHandler_getKeyEventToggleSyncToVBlankHandler(self)

    def handle(self, *args):
        """handle(self, GUIEventAdapter ea, GUIActionAdapter aa) -> bool"""
        return _osgViewer.ToggleSyncToVBlankHandler_handle(self, *args)

    def getUsage(self, *args):
        """getUsage(self, ApplicationUsage usage)"""
        return _osgViewer.ToggleSyncToVBlankHandler_getUsage(self, *args)

    __swig_destroy__ = _osgViewer.delete_ToggleSyncToVBlankHandler
    __del__ = lambda self : None;
ToggleSyncToVBlankHandler_swigregister = _osgViewer.ToggleSyncToVBlankHandler_swigregister
ToggleSyncToVBlankHandler_swigregister(ToggleSyncToVBlankHandler)

class InteractiveImageHandler(osgGA.GUIEventHandler):
    """Proxy of C++ osgViewer::InteractiveImageHandler class"""
    __swig_setmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InteractiveImageHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [osgGA.GUIEventHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InteractiveImageHandler, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Image image) -> InteractiveImageHandler
        __init__(self, Image image, Texture2D texture, Camera camera) -> InteractiveImageHandler
        """
        this = _osgViewer.new_InteractiveImageHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgViewer.InteractiveImageHandler_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgViewer.InteractiveImageHandler_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgViewer.InteractiveImageHandler_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgViewer.InteractiveImageHandler_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgViewer.InteractiveImageHandler_className(self)

    def handle(self, *args):
        """
        handle(self, GUIEventAdapter ea, GUIActionAdapter aa, Object arg2, 
            NodeVisitor nv) -> bool
        """
        return _osgViewer.InteractiveImageHandler_handle(self, *args)

    def cull(self, *args):
        """cull(self, NodeVisitor nv, Drawable drawable, RenderInfo renderInfo) -> bool"""
        return _osgViewer.InteractiveImageHandler_cull(self, *args)

InteractiveImageHandler_swigregister = _osgViewer.InteractiveImageHandler_swigregister
InteractiveImageHandler_swigregister(InteractiveImageHandler)


def GUIActionAdapterToViewer(*args):
  """GUIActionAdapterToViewer(GUIActionAdapter aa) -> Viewer"""
  return _osgViewer.GUIActionAdapterToViewer(*args)


