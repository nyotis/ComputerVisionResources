# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgShadow', [dirname(__file__)])
        except ImportError:
            import _osgShadow
            return _osgShadow
        if fp is not None:
            try:
                _mod = imp.load_module('_osgShadow', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgShadow = swig_import_helper()
    del swig_import_helper
else:
    import _osgShadow
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgShadow.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _osgShadow.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _osgShadow.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _osgShadow.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgShadow.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _osgShadow.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _osgShadow.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _osgShadow.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _osgShadow.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _osgShadow.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgShadow.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _osgShadow.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _osgShadow.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgShadow.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgShadow.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgShadow.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgShadow.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgShadow.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
OSGSHADOW_SHADOWEDTECHNIQUE = _osgShadow.OSGSHADOW_SHADOWEDTECHNIQUE
class ShadowTechnique(osg.Object):
    """Proxy of C++ osgShadow::ShadowTechnique class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowTechnique, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShadowTechnique
        __init__(self, ShadowTechnique es, CopyOp copyop = SHALLOW_COPY) -> ShadowTechnique
        __init__(self, ShadowTechnique es) -> ShadowTechnique
        """
        this = _osgShadow.new_ShadowTechnique(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ShadowTechnique_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ShadowTechnique_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ShadowTechnique_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ShadowTechnique_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ShadowTechnique_className(self)

    def getShadowedScene(self):
        """getShadowedScene(self) -> ShadowedScene"""
        return _osgShadow.ShadowTechnique_getShadowedScene(self)

    def init(self):
        """init(self)"""
        return _osgShadow.ShadowTechnique_init(self)

    def update(self, *args):
        """update(self, NodeVisitor nv)"""
        return _osgShadow.ShadowTechnique_update(self, *args)

    def cull(self, *args):
        """cull(self, osgUtil::CullVisitor cv)"""
        return _osgShadow.ShadowTechnique_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(self)"""
        return _osgShadow.ShadowTechnique_cleanSceneGraph(self)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgShadow.ShadowTechnique_traverse(self, *args)

    def dirty(self):
        """dirty(self)"""
        return _osgShadow.ShadowTechnique_dirty(self)

ShadowTechnique_swigregister = _osgShadow.ShadowTechnique_swigregister
ShadowTechnique_swigregister(ShadowTechnique)

OSGSHADOW_VIEWDEPENDENTSHADOWTECHINIQUE = _osgShadow.OSGSHADOW_VIEWDEPENDENTSHADOWTECHINIQUE
class ViewDependentShadowTechnique(ShadowTechnique):
    """Proxy of C++ osgShadow::ViewDependentShadowTechnique class"""
    __swig_setmethods__ = {}
    for _s in [ShadowTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewDependentShadowTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadowTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewDependentShadowTechnique, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ViewDependentShadowTechnique
        __init__(self, ViewDependentShadowTechnique vdst, CopyOp copyop = SHALLOW_COPY) -> ViewDependentShadowTechnique
        __init__(self, ViewDependentShadowTechnique vdst) -> ViewDependentShadowTechnique
        """
        this = _osgShadow.new_ViewDependentShadowTechnique(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ViewDependentShadowTechnique_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ViewDependentShadowTechnique_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ViewDependentShadowTechnique_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ViewDependentShadowTechnique_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ViewDependentShadowTechnique_className(self)

    def dirty(self):
        """dirty(self)"""
        return _osgShadow.ViewDependentShadowTechnique_dirty(self)

    def init(self):
        """init(self)"""
        return _osgShadow.ViewDependentShadowTechnique_init(self)

    def update(self, *args):
        """update(self, NodeVisitor nv)"""
        return _osgShadow.ViewDependentShadowTechnique_update(self, *args)

    def cull(self, *args):
        """cull(self, osgUtil::CullVisitor cv)"""
        return _osgShadow.ViewDependentShadowTechnique_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(self)"""
        return _osgShadow.ViewDependentShadowTechnique_cleanSceneGraph(self)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgShadow.ViewDependentShadowTechnique_traverse(self, *args)

ViewDependentShadowTechnique_swigregister = _osgShadow.ViewDependentShadowTechnique_swigregister
ViewDependentShadowTechnique_swigregister(ViewDependentShadowTechnique)

OSGSHADOW_SHADOWEDSCENE = _osgShadow.OSGSHADOW_SHADOWEDSCENE
class ShadowedScene(osg.Group):
    """Proxy of C++ osgShadow::ShadowedScene class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowedScene, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowedScene, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ShadowTechnique st = None) -> ShadowedScene
        __init__(self) -> ShadowedScene
        __init__(self, ShadowedScene es, CopyOp copyop = SHALLOW_COPY) -> ShadowedScene
        __init__(self, ShadowedScene es) -> ShadowedScene
        """
        this = _osgShadow.new_ShadowedScene(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ShadowedScene_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ShadowedScene_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ShadowedScene_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ShadowedScene_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ShadowedScene_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgShadow.ShadowedScene_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgShadow.ShadowedScene_traverse(self, *args)

    def setReceivesShadowTraversalMask(self, *args):
        """setReceivesShadowTraversalMask(self, unsigned int mask)"""
        return _osgShadow.ShadowedScene_setReceivesShadowTraversalMask(self, *args)

    def getReceivesShadowTraversalMask(self):
        """getReceivesShadowTraversalMask(self) -> unsigned int"""
        return _osgShadow.ShadowedScene_getReceivesShadowTraversalMask(self)

    def setCastsShadowTraversalMask(self, *args):
        """setCastsShadowTraversalMask(self, unsigned int mask)"""
        return _osgShadow.ShadowedScene_setCastsShadowTraversalMask(self, *args)

    def getCastsShadowTraversalMask(self):
        """getCastsShadowTraversalMask(self) -> unsigned int"""
        return _osgShadow.ShadowedScene_getCastsShadowTraversalMask(self)

    def setShadowTechnique(self, *args):
        """setShadowTechnique(self, ShadowTechnique technique)"""
        return _osgShadow.ShadowedScene_setShadowTechnique(self, *args)

    def getShadowTechnique(self, *args):
        """
        getShadowTechnique(self) -> ShadowTechnique
        getShadowTechnique(self) -> ShadowTechnique
        """
        return _osgShadow.ShadowedScene_getShadowTechnique(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(self)"""
        return _osgShadow.ShadowedScene_cleanSceneGraph(self)

    def dirty(self):
        """dirty(self)"""
        return _osgShadow.ShadowedScene_dirty(self)

ShadowedScene_swigregister = _osgShadow.ShadowedScene_swigregister
ShadowedScene_swigregister(ShadowedScene)

OSGSHADOW_SHADOWVOLUME = _osgShadow.OSGSHADOW_SHADOWVOLUME
class ShadowVolume(ShadowTechnique):
    """Proxy of C++ osgShadow::ShadowVolume class"""
    __swig_setmethods__ = {}
    for _s in [ShadowTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadowTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowVolume, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShadowVolume
        __init__(self, ShadowVolume es, CopyOp copyop = SHALLOW_COPY) -> ShadowVolume
        __init__(self, ShadowVolume es) -> ShadowVolume
        """
        this = _osgShadow.new_ShadowVolume(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ShadowVolume_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ShadowVolume_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ShadowVolume_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ShadowVolume_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ShadowVolume_className(self)

    def setDrawMode(self, *args):
        """setDrawMode(self, DrawMode drawMode)"""
        return _osgShadow.ShadowVolume_setDrawMode(self, *args)

    def getDrawMode(self):
        """getDrawMode(self) -> DrawMode"""
        return _osgShadow.ShadowVolume_getDrawMode(self)

    def setDynamicShadowVolumes(self, *args):
        """setDynamicShadowVolumes(self, bool dynamicShadowVolumes)"""
        return _osgShadow.ShadowVolume_setDynamicShadowVolumes(self, *args)

    def getDynamicShadowVolumes(self):
        """getDynamicShadowVolumes(self) -> bool"""
        return _osgShadow.ShadowVolume_getDynamicShadowVolumes(self)

    def init(self):
        """init(self)"""
        return _osgShadow.ShadowVolume_init(self)

    def update(self, *args):
        """update(self, NodeVisitor nv)"""
        return _osgShadow.ShadowVolume_update(self, *args)

    def cull(self, *args):
        """cull(self, osgUtil::CullVisitor cv)"""
        return _osgShadow.ShadowVolume_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(self)"""
        return _osgShadow.ShadowVolume_cleanSceneGraph(self)

ShadowVolume_swigregister = _osgShadow.ShadowVolume_swigregister
ShadowVolume_swigregister(ShadowVolume)

OSGSHADOW_OCCLUDERGEOMETRY = _osgShadow.OSGSHADOW_OCCLUDERGEOMETRY
class OccluderGeometry(osg.Drawable):
    """Proxy of C++ osgShadow::OccluderGeometry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OccluderGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OccluderGeometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OccluderGeometry
        __init__(self, OccluderGeometry oc, CopyOp copyop = SHALLOW_COPY) -> OccluderGeometry
        __init__(self, OccluderGeometry oc) -> OccluderGeometry
        """
        this = _osgShadow.new_OccluderGeometry(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.OccluderGeometry_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.OccluderGeometry_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.OccluderGeometry_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.OccluderGeometry_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.OccluderGeometry_className(self)

    def computeOccluderGeometry(self, *args):
        """
        computeOccluderGeometry(self, Node subgraph, Matrix matrix = None, float sampleRatio = 1.0)
        computeOccluderGeometry(self, Node subgraph, Matrix matrix = None)
        computeOccluderGeometry(self, Node subgraph)
        computeOccluderGeometry(self, Drawable drawable, Matrix matrix = None, float sampleRatio = 1.0)
        computeOccluderGeometry(self, Drawable drawable, Matrix matrix = None)
        computeOccluderGeometry(self, Drawable drawable)
        """
        return _osgShadow.OccluderGeometry_computeOccluderGeometry(self, *args)

    def computeShadowVolumeGeometry(self, *args):
        """computeShadowVolumeGeometry(self, Vec4 lightpos, ShadowVolumeGeometry svg)"""
        return _osgShadow.OccluderGeometry_computeShadowVolumeGeometry(self, *args)

    def setBoundingPolytope(self, *args):
        """setBoundingPolytope(self, Polytope polytope)"""
        return _osgShadow.OccluderGeometry_setBoundingPolytope(self, *args)

    def getBoundingPolytope(self, *args):
        """
        getBoundingPolytope(self) -> Polytope
        getBoundingPolytope(self) -> Polytope
        """
        return _osgShadow.OccluderGeometry_getBoundingPolytope(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osgShadow.OccluderGeometry_drawImplementation(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingBox"""
        return _osgShadow.OccluderGeometry_computeBound(self)

    def processGeometry(self, *args):
        """
        processGeometry(self, Drawable drawable, Matrix matrix = None, float sampleRatio = 1.0)
        processGeometry(self, Drawable drawable, Matrix matrix = None)
        processGeometry(self, Drawable drawable)
        """
        return _osgShadow.OccluderGeometry_processGeometry(self, *args)

OccluderGeometry_swigregister = _osgShadow.OccluderGeometry_swigregister
OccluderGeometry_swigregister(OccluderGeometry)

class ShadowVolumeGeometry(osg.Drawable):
    """Proxy of C++ osgShadow::ShadowVolumeGeometry class"""
    __swig_setmethods__ = {}
    for _s in [osg.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowVolumeGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowVolumeGeometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShadowVolumeGeometry
        __init__(self, ShadowVolumeGeometry oc, CopyOp copyop = SHALLOW_COPY) -> ShadowVolumeGeometry
        __init__(self, ShadowVolumeGeometry oc) -> ShadowVolumeGeometry
        """
        this = _osgShadow.new_ShadowVolumeGeometry(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ShadowVolumeGeometry_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ShadowVolumeGeometry_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ShadowVolumeGeometry_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ShadowVolumeGeometry_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ShadowVolumeGeometry_className(self)

    GEOMETRY = _osgShadow.ShadowVolumeGeometry_GEOMETRY
    STENCIL_TWO_PASS = _osgShadow.ShadowVolumeGeometry_STENCIL_TWO_PASS
    STENCIL_TWO_SIDED = _osgShadow.ShadowVolumeGeometry_STENCIL_TWO_SIDED
    def setDrawMode(self, *args):
        """setDrawMode(self, DrawMode mode)"""
        return _osgShadow.ShadowVolumeGeometry_setDrawMode(self, *args)

    def getDrawMode(self):
        """getDrawMode(self) -> DrawMode"""
        return _osgShadow.ShadowVolumeGeometry_getDrawMode(self)

    def setVertices(self, *args):
        """setVertices(self, Vec3List vertices)"""
        return _osgShadow.ShadowVolumeGeometry_setVertices(self, *args)

    def getVertices(self, *args):
        """
        getVertices(self) -> Vec3List
        getVertices(self) -> Vec3List
        """
        return _osgShadow.ShadowVolumeGeometry_getVertices(self, *args)

    def setNormals(self, *args):
        """setNormals(self, Vec3List normals)"""
        return _osgShadow.ShadowVolumeGeometry_setNormals(self, *args)

    def getNormals(self, *args):
        """
        getNormals(self) -> Vec3List
        getNormals(self) -> Vec3List
        """
        return _osgShadow.ShadowVolumeGeometry_getNormals(self, *args)

    def drawImplementation(self, *args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osgShadow.ShadowVolumeGeometry_drawImplementation(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingBox"""
        return _osgShadow.ShadowVolumeGeometry_computeBound(self)

ShadowVolumeGeometry_swigregister = _osgShadow.ShadowVolumeGeometry_swigregister
ShadowVolumeGeometry_swigregister(ShadowVolumeGeometry)

OSGSHADOW_SHADOWETEXTURE = _osgShadow.OSGSHADOW_SHADOWETEXTURE
class ShadowTexture(ShadowTechnique):
    """Proxy of C++ osgShadow::ShadowTexture class"""
    __swig_setmethods__ = {}
    for _s in [ShadowTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadowTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowTexture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShadowTexture
        __init__(self, ShadowTexture es, CopyOp copyop = SHALLOW_COPY) -> ShadowTexture
        __init__(self, ShadowTexture es) -> ShadowTexture
        """
        this = _osgShadow.new_ShadowTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ShadowTexture_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ShadowTexture_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ShadowTexture_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ShadowTexture_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ShadowTexture_className(self)

    def setTextureUnit(self, *args):
        """setTextureUnit(self, unsigned int unit)"""
        return _osgShadow.ShadowTexture_setTextureUnit(self, *args)

    def getTextureUnit(self):
        """getTextureUnit(self) -> unsigned int"""
        return _osgShadow.ShadowTexture_getTextureUnit(self)

    def init(self):
        """init(self)"""
        return _osgShadow.ShadowTexture_init(self)

    def update(self, *args):
        """update(self, NodeVisitor nv)"""
        return _osgShadow.ShadowTexture_update(self, *args)

    def cull(self, *args):
        """cull(self, osgUtil::CullVisitor cv)"""
        return _osgShadow.ShadowTexture_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(self)"""
        return _osgShadow.ShadowTexture_cleanSceneGraph(self)

ShadowTexture_swigregister = _osgShadow.ShadowTexture_swigregister
ShadowTexture_swigregister(ShadowTexture)

OSGSHADOW_SHADOWEMAP = _osgShadow.OSGSHADOW_SHADOWEMAP
class ShadowMap(ShadowTechnique):
    """Proxy of C++ osgShadow::ShadowMap class"""
    __swig_setmethods__ = {}
    for _s in [ShadowTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadowTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ShadowMap
        __init__(self, ShadowMap es, CopyOp copyop = SHALLOW_COPY) -> ShadowMap
        __init__(self, ShadowMap es) -> ShadowMap
        """
        this = _osgShadow.new_ShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.ShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.ShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.ShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.ShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.ShadowMap_className(self)

    def setTextureUnit(self, *args):
        """setTextureUnit(self, unsigned int unit)"""
        return _osgShadow.ShadowMap_setTextureUnit(self, *args)

    def getTextureUnit(self):
        """getTextureUnit(self) -> unsigned int"""
        return _osgShadow.ShadowMap_getTextureUnit(self)

    def setPolygonOffset(self, *args):
        """setPolygonOffset(self, Vec2 polyOffset)"""
        return _osgShadow.ShadowMap_setPolygonOffset(self, *args)

    def getPolygonOffset(self):
        """getPolygonOffset(self) -> Vec2"""
        return _osgShadow.ShadowMap_getPolygonOffset(self)

    def setAmbientBias(self, *args):
        """setAmbientBias(self, Vec2 ambientBias)"""
        return _osgShadow.ShadowMap_setAmbientBias(self, *args)

    def getAmbientBias(self):
        """getAmbientBias(self) -> Vec2"""
        return _osgShadow.ShadowMap_getAmbientBias(self)

    def setTextureSize(self, *args):
        """setTextureSize(self, Vec2s textureSize)"""
        return _osgShadow.ShadowMap_setTextureSize(self, *args)

    def getTextureSize(self):
        """getTextureSize(self) -> Vec2s"""
        return _osgShadow.ShadowMap_getTextureSize(self)

    def setLight(self, *args):
        """
        setLight(self, Light light)
        setLight(self, LightSource ls)
        """
        return _osgShadow.ShadowMap_setLight(self, *args)

    def addShader(self, *args):
        """addShader(self, Shader shader)"""
        return _osgShadow.ShadowMap_addShader(self, *args)

    def clearShaderList(self):
        """clearShaderList(self)"""
        return _osgShadow.ShadowMap_clearShaderList(self)

    def init(self):
        """init(self)"""
        return _osgShadow.ShadowMap_init(self)

    def update(self, *args):
        """update(self, NodeVisitor nv)"""
        return _osgShadow.ShadowMap_update(self, *args)

    def cull(self, *args):
        """cull(self, osgUtil::CullVisitor cv)"""
        return _osgShadow.ShadowMap_cull(self, *args)

    def cleanSceneGraph(self):
        """cleanSceneGraph(self)"""
        return _osgShadow.ShadowMap_cleanSceneGraph(self)

    def makeDebugHUD(self):
        """makeDebugHUD(self) -> CameraRef"""
        return _osgShadow.ShadowMap_makeDebugHUD(self)

ShadowMap_swigregister = _osgShadow.ShadowMap_swigregister
ShadowMap_swigregister(ShadowMap)

OSGSHADOW_STANDARDSHADOWMAP = _osgShadow.OSGSHADOW_STANDARDSHADOWMAP
class StandardShadowMap(_object):
    """Proxy of C++ osgShadow::StandardShadowMap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandardShadowMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StandardShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StandardShadowMap
        __init__(self, StandardShadowMap ssm, CopyOp copyop = SHALLOW_COPY) -> StandardShadowMap
        __init__(self, StandardShadowMap ssm) -> StandardShadowMap
        """
        this = _osgShadow.new_StandardShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.StandardShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.StandardShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.StandardShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.StandardShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.StandardShadowMap_className(self)

    def setBaseTextureUnit(self, *args):
        """setBaseTextureUnit(self, unsigned int unit)"""
        return _osgShadow.StandardShadowMap_setBaseTextureUnit(self, *args)

    def getBaseTextureUnit(self):
        """getBaseTextureUnit(self) -> unsigned int"""
        return _osgShadow.StandardShadowMap_getBaseTextureUnit(self)

    def setShadowTextureUnit(self, *args):
        """setShadowTextureUnit(self, unsigned int unit)"""
        return _osgShadow.StandardShadowMap_setShadowTextureUnit(self, *args)

    def getShadowTextureUnit(self):
        """getShadowTextureUnit(self) -> unsigned int"""
        return _osgShadow.StandardShadowMap_getShadowTextureUnit(self)

    def setBaseTextureCoordIndex(self, *args):
        """setBaseTextureCoordIndex(self, unsigned int index)"""
        return _osgShadow.StandardShadowMap_setBaseTextureCoordIndex(self, *args)

    def getBaseTextureCoordIndex(self):
        """getBaseTextureCoordIndex(self) -> unsigned int"""
        return _osgShadow.StandardShadowMap_getBaseTextureCoordIndex(self)

    def setShadowTextureCoordIndex(self, *args):
        """setShadowTextureCoordIndex(self, unsigned int index)"""
        return _osgShadow.StandardShadowMap_setShadowTextureCoordIndex(self, *args)

    def getShadowTextureCoordIndex(self):
        """getShadowTextureCoordIndex(self) -> unsigned int"""
        return _osgShadow.StandardShadowMap_getShadowTextureCoordIndex(self)

    def setTextureSize(self, *args):
        """setTextureSize(self, Vec2s textureSize)"""
        return _osgShadow.StandardShadowMap_setTextureSize(self, *args)

    def getTextureSize(self):
        """getTextureSize(self) -> Vec2s"""
        return _osgShadow.StandardShadowMap_getTextureSize(self)

    def setLight(self, *args):
        """setLight(self, Light light)"""
        return _osgShadow.StandardShadowMap_setLight(self, *args)

    def getLight(self, *args):
        """
        getLight(self) -> Light
        getLight(self) -> Light
        """
        return _osgShadow.StandardShadowMap_getLight(self, *args)

    def getShadowVertexShader(self):
        """getShadowVertexShader(self) -> Shader"""
        return _osgShadow.StandardShadowMap_getShadowVertexShader(self)

    def getShadowFragmentShader(self):
        """getShadowFragmentShader(self) -> Shader"""
        return _osgShadow.StandardShadowMap_getShadowFragmentShader(self)

    def getMainVertexShader(self):
        """getMainVertexShader(self) -> Shader"""
        return _osgShadow.StandardShadowMap_getMainVertexShader(self)

    def getMainFragmentShader(self):
        """getMainFragmentShader(self) -> Shader"""
        return _osgShadow.StandardShadowMap_getMainFragmentShader(self)

    def setShadowVertexShader(self, *args):
        """setShadowVertexShader(self, Shader shader)"""
        return _osgShadow.StandardShadowMap_setShadowVertexShader(self, *args)

    def setShadowFragmentShader(self, *args):
        """setShadowFragmentShader(self, Shader shader)"""
        return _osgShadow.StandardShadowMap_setShadowFragmentShader(self, *args)

    def setMainVertexShader(self, *args):
        """setMainVertexShader(self, Shader shader)"""
        return _osgShadow.StandardShadowMap_setMainVertexShader(self, *args)

    def setMainFragmentShader(self, *args):
        """setMainFragmentShader(self, Shader shader)"""
        return _osgShadow.StandardShadowMap_setMainFragmentShader(self, *args)

StandardShadowMap_swigregister = _osgShadow.StandardShadowMap_swigregister
StandardShadowMap_swigregister(StandardShadowMap)

OSGSHADOW_MINIMALSHADOWMAP = _osgShadow.OSGSHADOW_MINIMALSHADOWMAP
class MinimalShadowMap(StandardShadowMap):
    """Proxy of C++ osgShadow::MinimalShadowMap class"""
    __swig_setmethods__ = {}
    for _s in [StandardShadowMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimalShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [StandardShadowMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinimalShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MinimalShadowMap
        __init__(self, MinimalShadowMap msm, CopyOp copyop = SHALLOW_COPY) -> MinimalShadowMap
        __init__(self, MinimalShadowMap msm) -> MinimalShadowMap
        """
        this = _osgShadow.new_MinimalShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.MinimalShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.MinimalShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.MinimalShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.MinimalShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.MinimalShadowMap_className(self)

    def setModellingSpaceToWorldTransform(self, *args):
        """setModellingSpaceToWorldTransform(self, Matrix modellingSpaceToWorld)"""
        return _osgShadow.MinimalShadowMap_setModellingSpaceToWorldTransform(self, *args)

    def getModellingSpaceToWorldTransform(self):
        """getModellingSpaceToWorldTransform(self) -> Matrix"""
        return _osgShadow.MinimalShadowMap_getModellingSpaceToWorldTransform(self)

    def getMaxFarPlane(self):
        """getMaxFarPlane(self) -> float"""
        return _osgShadow.MinimalShadowMap_getMaxFarPlane(self)

    def setMaxFarPlane(self, *args):
        """setMaxFarPlane(self, float maxFarPlane)"""
        return _osgShadow.MinimalShadowMap_setMaxFarPlane(self, *args)

    def getMinLightMargin(self):
        """getMinLightMargin(self) -> float"""
        return _osgShadow.MinimalShadowMap_getMinLightMargin(self)

    def setMinLightMargin(self, *args):
        """setMinLightMargin(self, float minLightMargin)"""
        return _osgShadow.MinimalShadowMap_setMinLightMargin(self, *args)

    EMPTY_BOX = _osgShadow.MinimalShadowMap_EMPTY_BOX
    BOUNDING_SPHERE = _osgShadow.MinimalShadowMap_BOUNDING_SPHERE
    BOUNDING_BOX = _osgShadow.MinimalShadowMap_BOUNDING_BOX
    DEFAULT_ACCURACY = _osgShadow.MinimalShadowMap_DEFAULT_ACCURACY
    def setShadowReceivingCoarseBoundAccuracy(self, *args):
        """setShadowReceivingCoarseBoundAccuracy(self, ShadowReceivingCoarseBoundAccuracy accuracy)"""
        return _osgShadow.MinimalShadowMap_setShadowReceivingCoarseBoundAccuracy(self, *args)

    def getShadowReceivingCoarseBoundAccuracy(self):
        """getShadowReceivingCoarseBoundAccuracy(self) -> ShadowReceivingCoarseBoundAccuracy"""
        return _osgShadow.MinimalShadowMap_getShadowReceivingCoarseBoundAccuracy(self)

MinimalShadowMap_swigregister = _osgShadow.MinimalShadowMap_swigregister
MinimalShadowMap_swigregister(MinimalShadowMap)

OSGSHADOW_SOFTSHADOWMAP = _osgShadow.OSGSHADOW_SOFTSHADOWMAP
class SoftShadowMap(ShadowMap):
    """Proxy of C++ osgShadow::SoftShadowMap class"""
    __swig_setmethods__ = {}
    for _s in [ShadowMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ShadowMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SoftShadowMap
        __init__(self, SoftShadowMap es, CopyOp copyop = SHALLOW_COPY) -> SoftShadowMap
        __init__(self, SoftShadowMap es) -> SoftShadowMap
        """
        this = _osgShadow.new_SoftShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.SoftShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.SoftShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.SoftShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.SoftShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.SoftShadowMap_className(self)

    def setSoftnessWidth(self, *args):
        """setSoftnessWidth(self, float softnessWidth)"""
        return _osgShadow.SoftShadowMap_setSoftnessWidth(self, *args)

    def getSoftnessWidth(self):
        """getSoftnessWidth(self) -> float"""
        return _osgShadow.SoftShadowMap_getSoftnessWidth(self)

    def setJitteringScale(self, *args):
        """setJitteringScale(self, float jitteringScale)"""
        return _osgShadow.SoftShadowMap_setJitteringScale(self, *args)

    def getJitteringScale(self):
        """getJitteringScale(self) -> float"""
        return _osgShadow.SoftShadowMap_getJitteringScale(self)

    def setJitterTextureUnit(self, *args):
        """setJitterTextureUnit(self, unsigned int jitterTextureUnit)"""
        return _osgShadow.SoftShadowMap_setJitterTextureUnit(self, *args)

    def getJitterTextureUnit(self):
        """getJitterTextureUnit(self) -> unsigned int"""
        return _osgShadow.SoftShadowMap_getJitterTextureUnit(self)

    def setBias(self, *args):
        """setBias(self, float bias)"""
        return _osgShadow.SoftShadowMap_setBias(self, *args)

    def getBias(self):
        """getBias(self) -> float"""
        return _osgShadow.SoftShadowMap_getBias(self)

SoftShadowMap_swigregister = _osgShadow.SoftShadowMap_swigregister
SoftShadowMap_swigregister(SoftShadowMap)

OSGSHADOW_PROJECTIONSHADOWMAP = _osgShadow.OSGSHADOW_PROJECTIONSHADOWMAP
OSGSHADOW_DEBUGSHADOWMAP = _osgShadow.OSGSHADOW_DEBUGSHADOWMAP
class DebugShadowMap(ViewDependentShadowTechnique):
    """Proxy of C++ osgShadow::DebugShadowMap class"""
    __swig_setmethods__ = {}
    for _s in [ViewDependentShadowTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewDependentShadowTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DebugShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DebugShadowMap
        __init__(self, DebugShadowMap dsm, CopyOp copyop = SHALLOW_COPY) -> DebugShadowMap
        __init__(self, DebugShadowMap dsm) -> DebugShadowMap
        """
        this = _osgShadow.new_DebugShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.DebugShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.DebugShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.DebugShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.DebugShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.DebugShadowMap_className(self)

    def setDebugDraw(self, *args):
        """setDebugDraw(self, bool draw)"""
        return _osgShadow.DebugShadowMap_setDebugDraw(self, *args)

    def getDebugDraw(self):
        """getDebugDraw(self) -> bool"""
        return _osgShadow.DebugShadowMap_getDebugDraw(self)

    def getDebugDump(self):
        """getDebugDump(self) -> string"""
        return _osgShadow.DebugShadowMap_getDebugDump(self)

    def setDebugDump(self, *args):
        """setDebugDump(self, string debugDumpFile)"""
        return _osgShadow.DebugShadowMap_setDebugDump(self, *args)

DebugShadowMap_swigregister = _osgShadow.DebugShadowMap_swigregister
DebugShadowMap_swigregister(DebugShadowMap)

OSGSHADOW_MINIMALDRAWBOUNDSSHADOWMAP = _osgShadow.OSGSHADOW_MINIMALDRAWBOUNDSSHADOWMAP
class MinimalDrawBoundsShadowMap(MinimalShadowMap):
    """Proxy of C++ osgShadow::MinimalDrawBoundsShadowMap class"""
    __swig_setmethods__ = {}
    for _s in [MinimalShadowMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimalDrawBoundsShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [MinimalShadowMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinimalDrawBoundsShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MinimalDrawBoundsShadowMap
        __init__(self, MinimalDrawBoundsShadowMap mdbsm, CopyOp copyop = SHALLOW_COPY) -> MinimalDrawBoundsShadowMap
        __init__(self, MinimalDrawBoundsShadowMap mdbsm) -> MinimalDrawBoundsShadowMap
        """
        this = _osgShadow.new_MinimalDrawBoundsShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.MinimalDrawBoundsShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.MinimalDrawBoundsShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.MinimalDrawBoundsShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.MinimalDrawBoundsShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.MinimalDrawBoundsShadowMap_className(self)

MinimalDrawBoundsShadowMap_swigregister = _osgShadow.MinimalDrawBoundsShadowMap_swigregister
MinimalDrawBoundsShadowMap_swigregister(MinimalDrawBoundsShadowMap)

OSGSHADOW_MINIMALCULLBOUNDSSHADOWMAP = _osgShadow.OSGSHADOW_MINIMALCULLBOUNDSSHADOWMAP
class MinimalCullBoundsShadowMap(MinimalShadowMap):
    """Proxy of C++ osgShadow::MinimalCullBoundsShadowMap class"""
    __swig_setmethods__ = {}
    for _s in [MinimalShadowMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimalCullBoundsShadowMap, name, value)
    __swig_getmethods__ = {}
    for _s in [MinimalShadowMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinimalCullBoundsShadowMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MinimalCullBoundsShadowMap
        __init__(self, MinimalCullBoundsShadowMap mcbsm, CopyOp copyop = SHALLOW_COPY) -> MinimalCullBoundsShadowMap
        __init__(self, MinimalCullBoundsShadowMap mcbsm) -> MinimalCullBoundsShadowMap
        """
        this = _osgShadow.new_MinimalCullBoundsShadowMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.MinimalCullBoundsShadowMap_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.MinimalCullBoundsShadowMap_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.MinimalCullBoundsShadowMap_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.MinimalCullBoundsShadowMap_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.MinimalCullBoundsShadowMap_className(self)

MinimalCullBoundsShadowMap_swigregister = _osgShadow.MinimalCullBoundsShadowMap_swigregister
MinimalCullBoundsShadowMap_swigregister(MinimalCullBoundsShadowMap)

OSGSHADOW_LIGHTSPACEPERSPECTIVESHADOWMAP = _osgShadow.OSGSHADOW_LIGHTSPACEPERSPECTIVESHADOWMAP
class LightSpacePerspectiveShadowMapAlgorithm(_object):
    """Proxy of C++ osgShadow::LightSpacePerspectiveShadowMapAlgorithm class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSpacePerspectiveShadowMapAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightSpacePerspectiveShadowMapAlgorithm, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> LightSpacePerspectiveShadowMapAlgorithm"""
        this = _osgShadow.new_LightSpacePerspectiveShadowMapAlgorithm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgShadow.delete_LightSpacePerspectiveShadowMapAlgorithm
    __del__ = lambda self : None;
    def __call__(self, *args):
        """
        __call__(self, osgShadow::ConvexPolyhedron hullShadowedView, Camera cameraMain, 
            Camera cameraShadow)
        """
        return _osgShadow.LightSpacePerspectiveShadowMapAlgorithm___call__(self, *args)

LightSpacePerspectiveShadowMapAlgorithm_swigregister = _osgShadow.LightSpacePerspectiveShadowMapAlgorithm_swigregister
LightSpacePerspectiveShadowMapAlgorithm_swigregister(LightSpacePerspectiveShadowMapAlgorithm)

class LightSpacePerspectiveShadowMapDB(_object):
    """Proxy of C++ osgShadow::LightSpacePerspectiveShadowMapDB class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSpacePerspectiveShadowMapDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightSpacePerspectiveShadowMapDB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightSpacePerspectiveShadowMapDB
        __init__(self, LightSpacePerspectiveShadowMapDB copy, CopyOp copyop = SHALLOW_COPY) -> LightSpacePerspectiveShadowMapDB
        __init__(self, LightSpacePerspectiveShadowMapDB copy) -> LightSpacePerspectiveShadowMapDB
        """
        this = _osgShadow.new_LightSpacePerspectiveShadowMapDB(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.LightSpacePerspectiveShadowMapDB_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.LightSpacePerspectiveShadowMapDB_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.LightSpacePerspectiveShadowMapDB_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.LightSpacePerspectiveShadowMapDB_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.LightSpacePerspectiveShadowMapDB_className(self)

    __swig_destroy__ = _osgShadow.delete_LightSpacePerspectiveShadowMapDB
    __del__ = lambda self : None;
LightSpacePerspectiveShadowMapDB_swigregister = _osgShadow.LightSpacePerspectiveShadowMapDB_swigregister
LightSpacePerspectiveShadowMapDB_swigregister(LightSpacePerspectiveShadowMapDB)

class LightSpacePerspectiveShadowMapCB(_object):
    """Proxy of C++ osgShadow::LightSpacePerspectiveShadowMapCB class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSpacePerspectiveShadowMapCB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightSpacePerspectiveShadowMapCB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightSpacePerspectiveShadowMapCB
        __init__(self, LightSpacePerspectiveShadowMapCB copy, CopyOp copyop = SHALLOW_COPY) -> LightSpacePerspectiveShadowMapCB
        __init__(self, LightSpacePerspectiveShadowMapCB copy) -> LightSpacePerspectiveShadowMapCB
        """
        this = _osgShadow.new_LightSpacePerspectiveShadowMapCB(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.LightSpacePerspectiveShadowMapCB_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.LightSpacePerspectiveShadowMapCB_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.LightSpacePerspectiveShadowMapCB_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.LightSpacePerspectiveShadowMapCB_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.LightSpacePerspectiveShadowMapCB_className(self)

    __swig_destroy__ = _osgShadow.delete_LightSpacePerspectiveShadowMapCB
    __del__ = lambda self : None;
LightSpacePerspectiveShadowMapCB_swigregister = _osgShadow.LightSpacePerspectiveShadowMapCB_swigregister
LightSpacePerspectiveShadowMapCB_swigregister(LightSpacePerspectiveShadowMapCB)

class LightSpacePerspectiveShadowMapVB(_object):
    """Proxy of C++ osgShadow::LightSpacePerspectiveShadowMapVB class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightSpacePerspectiveShadowMapVB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightSpacePerspectiveShadowMapVB, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightSpacePerspectiveShadowMapVB
        __init__(self, LightSpacePerspectiveShadowMapVB copy, CopyOp copyop = SHALLOW_COPY) -> LightSpacePerspectiveShadowMapVB
        __init__(self, LightSpacePerspectiveShadowMapVB copy) -> LightSpacePerspectiveShadowMapVB
        """
        this = _osgShadow.new_LightSpacePerspectiveShadowMapVB(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgShadow.LightSpacePerspectiveShadowMapVB_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgShadow.LightSpacePerspectiveShadowMapVB_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgShadow.LightSpacePerspectiveShadowMapVB_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgShadow.LightSpacePerspectiveShadowMapVB_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgShadow.LightSpacePerspectiveShadowMapVB_className(self)

    __swig_destroy__ = _osgShadow.delete_LightSpacePerspectiveShadowMapVB
    __del__ = lambda self : None;
LightSpacePerspectiveShadowMapVB_swigregister = _osgShadow.LightSpacePerspectiveShadowMapVB_swigregister
LightSpacePerspectiveShadowMapVB_swigregister(LightSpacePerspectiveShadowMapVB)



