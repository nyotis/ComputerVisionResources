# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_osgSim', [dirname(__file__)])
        except ImportError:
            import _osgSim
            return _osgSim
        if fp is not None:
            try:
                _mod = imp.load_module('_osgSim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _osgSim = swig_import_helper()
    del swig_import_helper
else:
    import _osgSim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _osgSim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _osgSim.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _osgSim.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _osgSim.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _osgSim.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _osgSim.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _osgSim.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _osgSim.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _osgSim.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _osgSim.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgSim.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _osgSim.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _osgSim.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgSim.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgSim.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _osgSim.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _osgSim.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _osgSim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import osg
OSGSIM_BLINKSQUENCE = _osgSim.OSGSIM_BLINKSQUENCE
class SequenceGroup(osg.Object):
    """Proxy of C++ osgSim::SequenceGroup class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> SequenceGroup
        __init__(self, SequenceGroup bs, CopyOp copyop = SHALLOW_COPY) -> SequenceGroup
        __init__(self, SequenceGroup bs) -> SequenceGroup
        __init__(self, double baseTime) -> SequenceGroup
        """
        this = _osgSim.new_SequenceGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.SequenceGroup_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.SequenceGroup_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.SequenceGroup_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.SequenceGroup_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.SequenceGroup_className(self)

    def setBaseTime(self, *args):
        """setBaseTime(self, double t)"""
        return _osgSim.SequenceGroup_setBaseTime(self, *args)

    def getBaseTime(self):
        """getBaseTime(self) -> double"""
        return _osgSim.SequenceGroup_getBaseTime(self)

    __swig_setmethods__["_baseTime"] = _osgSim.SequenceGroup__baseTime_set
    __swig_getmethods__["_baseTime"] = _osgSim.SequenceGroup__baseTime_get
    if _newclass:_baseTime = _swig_property(_osgSim.SequenceGroup__baseTime_get, _osgSim.SequenceGroup__baseTime_set)
    __swig_destroy__ = _osgSim.delete_SequenceGroup
    __del__ = lambda self : None;
SequenceGroup_swigregister = _osgSim.SequenceGroup_swigregister
SequenceGroup_swigregister(SequenceGroup)

class BlinkSequence(osg.Object):
    """Proxy of C++ osgSim::BlinkSequence class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlinkSequence, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlinkSequence, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> BlinkSequence
        __init__(self, BlinkSequence bs, CopyOp copyop = SHALLOW_COPY) -> BlinkSequence
        __init__(self, BlinkSequence bs) -> BlinkSequence
        """
        this = _osgSim.new_BlinkSequence(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.BlinkSequence_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.BlinkSequence_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.BlinkSequence_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.BlinkSequence_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.BlinkSequence_className(self)

    def addPulse(self, *args):
        """addPulse(self, double length, Vec4 color)"""
        return _osgSim.BlinkSequence_addPulse(self, *args)

    def getNumPulses(self):
        """getNumPulses(self) -> int"""
        return _osgSim.BlinkSequence_getNumPulses(self)

    def getPulse(self, *args):
        """getPulse(self, unsigned int i, double length, Vec4 color)"""
        return _osgSim.BlinkSequence_getPulse(self, *args)

    def setPulse(self, *args):
        """setPulse(self, unsigned int i, double length, Vec4 color)"""
        return _osgSim.BlinkSequence_setPulse(self, *args)

    def getPulsePeriod(self):
        """getPulsePeriod(self) -> double"""
        return _osgSim.BlinkSequence_getPulsePeriod(self)

    def setSequenceGroup(self, *args):
        """setSequenceGroup(self, SequenceGroup sg)"""
        return _osgSim.BlinkSequence_setSequenceGroup(self, *args)

    def getSequenceGroup(self, *args):
        """
        getSequenceGroup(self) -> SequenceGroup
        getSequenceGroup(self) -> SequenceGroup
        """
        return _osgSim.BlinkSequence_getSequenceGroup(self, *args)

    def setPhaseShift(self, *args):
        """setPhaseShift(self, double ps)"""
        return _osgSim.BlinkSequence_setPhaseShift(self, *args)

    def getPhaseShift(self):
        """getPhaseShift(self) -> double"""
        return _osgSim.BlinkSequence_getPhaseShift(self)

    def localTime(self, *args):
        """localTime(self, double time) -> double"""
        return _osgSim.BlinkSequence_localTime(self, *args)

    def color(self, *args):
        """color(self, double time, double length) -> Vec4"""
        return _osgSim.BlinkSequence_color(self, *args)

    __swig_destroy__ = _osgSim.delete_BlinkSequence
    __del__ = lambda self : None;
BlinkSequence_swigregister = _osgSim.BlinkSequence_swigregister
BlinkSequence_swigregister(BlinkSequence)

OSGSIM_COLORRANGE = _osgSim.OSGSIM_COLORRANGE
class ColorRange(_object):
    """Proxy of C++ osgSim::ColorRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorRange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, float min, float max) -> ColorRange
        __init__(self, float min, float max, std::vector<(osg::Vec4,std::allocator<(osg::Vec4)>)> colors) -> ColorRange
        """
        this = _osgSim.new_ColorRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def setColors(self, *args):
        """setColors(self, std::vector<(osg::Vec4,std::allocator<(osg::Vec4)>)> colors)"""
        return _osgSim.ColorRange_setColors(self, *args)

    def getColors(self):
        """getColors(self) -> std::vector<(osg::Vec4,std::allocator<(osg::Vec4)>)>"""
        return _osgSim.ColorRange_getColors(self)

    def getColor(self, *args):
        """getColor(self, float scalar) -> Vec4"""
        return _osgSim.ColorRange_getColor(self, *args)

    __swig_destroy__ = _osgSim.delete_ColorRange
    __del__ = lambda self : None;
ColorRange_swigregister = _osgSim.ColorRange_swigregister
ColorRange_swigregister(ColorRange)

OSGSIM_DOFTRANSFORM = _osgSim.OSGSIM_DOFTRANSFORM
class DOFTransform(osg.Transform):
    """Proxy of C++ osgSim::DOFTransform class"""
    __swig_setmethods__ = {}
    for _s in [osg.Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DOFTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DOFTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DOFTransform
        __init__(self, DOFTransform dof, CopyOp copyop = SHALLOW_COPY) -> DOFTransform
        __init__(self, DOFTransform dof) -> DOFTransform
        """
        this = _osgSim.new_DOFTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.DOFTransform_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.DOFTransform_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.DOFTransform_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.DOFTransform_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.DOFTransform_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.DOFTransform_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.DOFTransform_traverse(self, *args)

    def setMinHPR(self, *args):
        """setMinHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setMinHPR(self, *args)

    def getMinHPR(self):
        """getMinHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getMinHPR(self)

    def setMaxHPR(self, *args):
        """setMaxHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setMaxHPR(self, *args)

    def getMaxHPR(self):
        """getMaxHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getMaxHPR(self)

    def setIncrementHPR(self, *args):
        """setIncrementHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setIncrementHPR(self, *args)

    def getIncrementHPR(self):
        """getIncrementHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getIncrementHPR(self)

    def setCurrentHPR(self, *args):
        """setCurrentHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_setCurrentHPR(self, *args)

    def getCurrentHPR(self):
        """getCurrentHPR(self) -> Vec3"""
        return _osgSim.DOFTransform_getCurrentHPR(self)

    def updateCurrentHPR(self, *args):
        """updateCurrentHPR(self, Vec3 hpr)"""
        return _osgSim.DOFTransform_updateCurrentHPR(self, *args)

    def setMinTranslate(self, *args):
        """setMinTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setMinTranslate(self, *args)

    def getMinTranslate(self):
        """getMinTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getMinTranslate(self)

    def setMaxTranslate(self, *args):
        """setMaxTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setMaxTranslate(self, *args)

    def getMaxTranslate(self):
        """getMaxTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getMaxTranslate(self)

    def setIncrementTranslate(self, *args):
        """setIncrementTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setIncrementTranslate(self, *args)

    def getIncrementTranslate(self):
        """getIncrementTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getIncrementTranslate(self)

    def setCurrentTranslate(self, *args):
        """setCurrentTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_setCurrentTranslate(self, *args)

    def getCurrentTranslate(self):
        """getCurrentTranslate(self) -> Vec3"""
        return _osgSim.DOFTransform_getCurrentTranslate(self)

    def updateCurrentTranslate(self, *args):
        """updateCurrentTranslate(self, Vec3 translate)"""
        return _osgSim.DOFTransform_updateCurrentTranslate(self, *args)

    def setMinScale(self, *args):
        """setMinScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setMinScale(self, *args)

    def getMinScale(self):
        """getMinScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getMinScale(self)

    def setMaxScale(self, *args):
        """setMaxScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setMaxScale(self, *args)

    def getMaxScale(self):
        """getMaxScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getMaxScale(self)

    def setIncrementScale(self, *args):
        """setIncrementScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setIncrementScale(self, *args)

    def getIncrementScale(self):
        """getIncrementScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getIncrementScale(self)

    def setCurrentScale(self, *args):
        """setCurrentScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_setCurrentScale(self, *args)

    def getCurrentScale(self):
        """getCurrentScale(self) -> Vec3"""
        return _osgSim.DOFTransform_getCurrentScale(self)

    def updateCurrentScale(self, *args):
        """updateCurrentScale(self, Vec3 scale)"""
        return _osgSim.DOFTransform_updateCurrentScale(self, *args)

    def setPutMatrix(self, *args):
        """setPutMatrix(self, Matrix put)"""
        return _osgSim.DOFTransform_setPutMatrix(self, *args)

    def getPutMatrix(self):
        """getPutMatrix(self) -> Matrix"""
        return _osgSim.DOFTransform_getPutMatrix(self)

    def setInversePutMatrix(self, *args):
        """setInversePutMatrix(self, Matrix inversePut)"""
        return _osgSim.DOFTransform_setInversePutMatrix(self, *args)

    def getInversePutMatrix(self):
        """getInversePutMatrix(self) -> Matrix"""
        return _osgSim.DOFTransform_getInversePutMatrix(self)

    def setLimitationFlags(self, *args):
        """setLimitationFlags(self, unsigned long flags)"""
        return _osgSim.DOFTransform_setLimitationFlags(self, *args)

    def getLimitationFlags(self):
        """getLimitationFlags(self) -> unsigned long"""
        return _osgSim.DOFTransform_getLimitationFlags(self)

    PRH = _osgSim.DOFTransform_PRH
    PHR = _osgSim.DOFTransform_PHR
    HPR = _osgSim.DOFTransform_HPR
    HRP = _osgSim.DOFTransform_HRP
    RPH = _osgSim.DOFTransform_RPH
    RHP = _osgSim.DOFTransform_RHP
    def setHPRMultOrder(self, *args):
        """setHPRMultOrder(self, MultOrder order)"""
        return _osgSim.DOFTransform_setHPRMultOrder(self, *args)

    def getHPRMultOrder(self):
        """getHPRMultOrder(self) -> MultOrder"""
        return _osgSim.DOFTransform_getHPRMultOrder(self)

    def setAnimationOn(self, *args):
        """setAnimationOn(self, bool do_animate)"""
        return _osgSim.DOFTransform_setAnimationOn(self, *args)

    def getAnimationOn(self):
        """getAnimationOn(self) -> bool"""
        return _osgSim.DOFTransform_getAnimationOn(self)

    def animate(self, *args):
        """animate(self, float deltaTime)"""
        return _osgSim.DOFTransform_animate(self, *args)

    def computeLocalToWorldMatrix(self, *args):
        """computeLocalToWorldMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osgSim.DOFTransform_computeLocalToWorldMatrix(self, *args)

    def computeWorldToLocalMatrix(self, *args):
        """computeWorldToLocalMatrix(self, Matrix matrix, NodeVisitor nv) -> bool"""
        return _osgSim.DOFTransform_computeWorldToLocalMatrix(self, *args)

DOFTransform_swigregister = _osgSim.DOFTransform_swigregister
DOFTransform_swigregister(DOFTransform)

OSGSIM_ELEVATIONSLICE = _osgSim.OSGSIM_ELEVATIONSLICE
class ElevationSlice(_object):
    """Proxy of C++ osgSim::ElevationSlice class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElevationSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElevationSlice, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ElevationSlice"""
        this = _osgSim.new_ElevationSlice()
        try: self.this.append(this)
        except: self.this = this
    def setStartPoint(self, *args):
        """setStartPoint(self, Vec3d startPoint)"""
        return _osgSim.ElevationSlice_setStartPoint(self, *args)

    def getStartPoint(self):
        """getStartPoint(self) -> Vec3d"""
        return _osgSim.ElevationSlice_getStartPoint(self)

    def setEndPoint(self, *args):
        """setEndPoint(self, Vec3d endPoint)"""
        return _osgSim.ElevationSlice_setEndPoint(self, *args)

    def getEndPoint(self):
        """getEndPoint(self) -> Vec3d"""
        return _osgSim.ElevationSlice_getEndPoint(self)

    def getIntersections(self):
        """getIntersections(self) -> Vec3dList"""
        return _osgSim.ElevationSlice_getIntersections(self)

    def getDistanceHeightIntersections(self):
        """getDistanceHeightIntersections(self) -> DistanceHeightList"""
        return _osgSim.ElevationSlice_getDistanceHeightIntersections(self)

    def computeIntersections(self, *args):
        """
        computeIntersections(self, Node scene, NodeMask traversalMask = 0xffffffff)
        computeIntersections(self, Node scene)
        """
        return _osgSim.ElevationSlice_computeIntersections(self, *args)

    def computeElevationSlice(*args):
        """
        computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint, NodeMask traversalMask = 0xffffffff) -> Vec3dList
        computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint) -> Vec3dList
        """
        return _osgSim.ElevationSlice_computeElevationSlice(*args)

    if _newclass:computeElevationSlice = staticmethod(computeElevationSlice)
    __swig_getmethods__["computeElevationSlice"] = lambda x: computeElevationSlice
    def clearDatabaseCache(self):
        """clearDatabaseCache(self)"""
        return _osgSim.ElevationSlice_clearDatabaseCache(self)

    def setDatabaseCacheReadCallback(self, *args):
        """setDatabaseCacheReadCallback(self, DatabaseCacheReadCallback dcrc)"""
        return _osgSim.ElevationSlice_setDatabaseCacheReadCallback(self, *args)

    def getDatabaseCacheReadCallback(self):
        """getDatabaseCacheReadCallback(self) -> DatabaseCacheReadCallback"""
        return _osgSim.ElevationSlice_getDatabaseCacheReadCallback(self)

    __swig_destroy__ = _osgSim.delete_ElevationSlice
    __del__ = lambda self : None;
ElevationSlice_swigregister = _osgSim.ElevationSlice_swigregister
ElevationSlice_swigregister(ElevationSlice)

def ElevationSlice_computeElevationSlice(*args):
  """
    computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint, NodeMask traversalMask = 0xffffffff) -> Vec3dList
    ElevationSlice_computeElevationSlice(Node scene, Vec3d startPoint, Vec3d endPoint) -> Vec3dList
    """
  return _osgSim.ElevationSlice_computeElevationSlice(*args)

OSGSIM_EXPORT_ = _osgSim.OSGSIM_EXPORT_
NULL = _osgSim.NULL
OSGSIM_GEOGRAPHICLOCATION = _osgSim.OSGSIM_GEOGRAPHICLOCATION
class GeographicLocation(osg.Referenced):
    """Proxy of C++ osgSim::GeographicLocation class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeographicLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeographicLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GeographicLocation
        __init__(self, double lat, double lon) -> GeographicLocation
        """
        this = _osgSim.new_GeographicLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args):
        """__eq__(self, GeographicLocation v) -> bool"""
        return _osgSim.GeographicLocation___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, GeographicLocation v) -> bool"""
        return _osgSim.GeographicLocation___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, GeographicLocation v) -> bool"""
        return _osgSim.GeographicLocation___lt__(self, *args)

    def ptr(self, *args):
        """
        ptr(self) -> double
        ptr(self) -> double
        """
        return _osgSim.GeographicLocation_ptr(self, *args)

    def set(self, *args):
        """set(self, double lat, double lon)"""
        return _osgSim.GeographicLocation_set(self, *args)

    def latitude(self, *args):
        """
        latitude(self) -> double
        latitude(self) -> double
        """
        return _osgSim.GeographicLocation_latitude(self, *args)

    def longitude(self, *args):
        """
        longitude(self) -> double
        longitude(self) -> double
        """
        return _osgSim.GeographicLocation_longitude(self, *args)

    def valid(self):
        """valid(self) -> bool"""
        return _osgSim.GeographicLocation_valid(self)

    def isNaN(self):
        """isNaN(self) -> bool"""
        return _osgSim.GeographicLocation_isNaN(self)

    def __add__(self, *args):
        """__add__(self, GeographicLocation rhs) -> GeographicLocation"""
        return _osgSim.GeographicLocation___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, GeographicLocation rhs) -> GeographicLocation"""
        return _osgSim.GeographicLocation___sub__(self, *args)

    __swig_destroy__ = _osgSim.delete_GeographicLocation
    __del__ = lambda self : None;
GeographicLocation_swigregister = _osgSim.GeographicLocation_swigregister
GeographicLocation_swigregister(GeographicLocation)

OSGSIM_HEIGHTABOVETERRAIN = _osgSim.OSGSIM_HEIGHTABOVETERRAIN
class HeightAboveTerrain(_object):
    """Proxy of C++ osgSim::HeightAboveTerrain class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeightAboveTerrain, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeightAboveTerrain, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> HeightAboveTerrain"""
        this = _osgSim.new_HeightAboveTerrain()
        try: self.this.append(this)
        except: self.this = this
    def clear(self):
        """clear(self)"""
        return _osgSim.HeightAboveTerrain_clear(self)

    def addPoint(self, *args):
        """addPoint(self, Vec3d point) -> unsigned int"""
        return _osgSim.HeightAboveTerrain_addPoint(self, *args)

    def getNumPoints(self):
        """getNumPoints(self) -> unsigned int"""
        return _osgSim.HeightAboveTerrain_getNumPoints(self)

    def setPoint(self, *args):
        """setPoint(self, unsigned int i, Vec3d point)"""
        return _osgSim.HeightAboveTerrain_setPoint(self, *args)

    def getPoint(self, *args):
        """getPoint(self, unsigned int i) -> Vec3d"""
        return _osgSim.HeightAboveTerrain_getPoint(self, *args)

    def getHeightAboveTerrain(self, *args):
        """getHeightAboveTerrain(self, unsigned int i) -> double"""
        return _osgSim.HeightAboveTerrain_getHeightAboveTerrain(self, *args)

    def setLowestHeight(self, *args):
        """setLowestHeight(self, double lowestHeight)"""
        return _osgSim.HeightAboveTerrain_setLowestHeight(self, *args)

    def getLowestHeight(self):
        """getLowestHeight(self) -> double"""
        return _osgSim.HeightAboveTerrain_getLowestHeight(self)

    def computeIntersections(self, *args):
        """
        computeIntersections(self, Node scene, NodeMask traversalMask = 0xffffffff)
        computeIntersections(self, Node scene)
        """
        return _osgSim.HeightAboveTerrain_computeIntersections(self, *args)

    def computeHeightAboveTerrain(*args):
        """
        computeHeightAboveTerrain(Node scene, Vec3d point, NodeMask traversalMask = 0xffffffff) -> double
        computeHeightAboveTerrain(Node scene, Vec3d point) -> double
        """
        return _osgSim.HeightAboveTerrain_computeHeightAboveTerrain(*args)

    if _newclass:computeHeightAboveTerrain = staticmethod(computeHeightAboveTerrain)
    __swig_getmethods__["computeHeightAboveTerrain"] = lambda x: computeHeightAboveTerrain
    def clearDatabaseCache(self):
        """clearDatabaseCache(self)"""
        return _osgSim.HeightAboveTerrain_clearDatabaseCache(self)

    def setDatabaseCacheReadCallback(self, *args):
        """setDatabaseCacheReadCallback(self, DatabaseCacheReadCallback dcrc)"""
        return _osgSim.HeightAboveTerrain_setDatabaseCacheReadCallback(self, *args)

    def getDatabaseCacheReadCallback(self):
        """getDatabaseCacheReadCallback(self) -> DatabaseCacheReadCallback"""
        return _osgSim.HeightAboveTerrain_getDatabaseCacheReadCallback(self)

    __swig_destroy__ = _osgSim.delete_HeightAboveTerrain
    __del__ = lambda self : None;
HeightAboveTerrain_swigregister = _osgSim.HeightAboveTerrain_swigregister
HeightAboveTerrain_swigregister(HeightAboveTerrain)

def HeightAboveTerrain_computeHeightAboveTerrain(*args):
  """
    computeHeightAboveTerrain(Node scene, Vec3d point, NodeMask traversalMask = 0xffffffff) -> double
    HeightAboveTerrain_computeHeightAboveTerrain(Node scene, Vec3d point) -> double
    """
  return _osgSim.HeightAboveTerrain_computeHeightAboveTerrain(*args)

OSGSIM_IMPOSTOR = _osgSim.OSGSIM_IMPOSTOR
class Impostor(osg.LOD):
    """Proxy of C++ osgSim::Impostor class"""
    __swig_setmethods__ = {}
    for _s in [osg.LOD]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Impostor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.LOD]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Impostor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Impostor
        __init__(self, Impostor es, CopyOp copyop = SHALLOW_COPY) -> Impostor
        __init__(self, Impostor es) -> Impostor
        """
        this = _osgSim.new_Impostor(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.Impostor_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.Impostor_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.Impostor_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.Impostor_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.Impostor_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.Impostor_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.Impostor_traverse(self, *args)

    def setImpostorThreshold(self, *args):
        """setImpostorThreshold(self, float distance)"""
        return _osgSim.Impostor_setImpostorThreshold(self, *args)

    def getImpostorThreshold(self):
        """getImpostorThreshold(self) -> float"""
        return _osgSim.Impostor_getImpostorThreshold(self)

    def setImpostorThresholdToBound(self, ratio = 1.0):
        """
        setImpostorThresholdToBound(self, float ratio = 1.0)
        setImpostorThresholdToBound(self)
        """
        return _osgSim.Impostor_setImpostorThresholdToBound(self, ratio)

    def findBestImpostorSprite(self, *args):
        """findBestImpostorSprite(self, unsigned int contextID, Vec3 currLocalEyePoint) -> ImpostorSprite"""
        return _osgSim.Impostor_findBestImpostorSprite(self, *args)

    def addImpostorSprite(self, *args):
        """addImpostorSprite(self, unsigned int contextID, ImpostorSprite _is)"""
        return _osgSim.Impostor_addImpostorSprite(self, *args)

    def getImpostorSpriteList(self, *args):
        """
        getImpostorSpriteList(self, unsigned int contexID) -> ImpostorSpriteList
        getImpostorSpriteList(self, unsigned int contexID) -> ImpostorSpriteList
        """
        return _osgSim.Impostor_getImpostorSpriteList(self, *args)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osgSim.Impostor_computeBound(self)

Impostor_swigregister = _osgSim.Impostor_swigregister
Impostor_swigregister(Impostor)

OSG_ImpostorSprite = _osgSim.OSG_ImpostorSprite
class ImpostorSprite(osg.Drawable):
    """Proxy of C++ osgSim::ImpostorSprite class"""
    __swig_setmethods__ = {}
    for _s in [osg.Drawable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpostorSprite, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Drawable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpostorSprite, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ImpostorSprite"""
        this = _osgSim.new_ImpostorSprite()
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.ImpostorSprite_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp arg0) -> Object"""
        return _osgSim.ImpostorSprite_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ImpostorSprite_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.ImpostorSprite_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.ImpostorSprite_className(self)

    def setParent(self, *args):
        """setParent(self, Impostor parent)"""
        return _osgSim.ImpostorSprite_setParent(self, *args)

    def getParent(self, *args):
        """
        getParent(self) -> Impostor
        getParent(self) -> Impostor
        """
        return _osgSim.ImpostorSprite_getParent(self, *args)

    def setStoredLocalEyePoint(self, *args):
        """setStoredLocalEyePoint(self, Vec3 v)"""
        return _osgSim.ImpostorSprite_setStoredLocalEyePoint(self, *args)

    def getStoredLocalEyePoint(self):
        """getStoredLocalEyePoint(self) -> Vec3"""
        return _osgSim.ImpostorSprite_getStoredLocalEyePoint(self)

    def setLastFrameUsed(self, *args):
        """setLastFrameUsed(self, unsigned int frameNumber)"""
        return _osgSim.ImpostorSprite_setLastFrameUsed(self, *args)

    def getLastFrameUsed(self):
        """getLastFrameUsed(self) -> unsigned int"""
        return _osgSim.ImpostorSprite_getLastFrameUsed(self)

    def getCoords(self, *args):
        """
        getCoords(self) -> Vec3
        getCoords(self) -> Vec3
        """
        return _osgSim.ImpostorSprite_getCoords(self, *args)

    def getTexCoords(self, *args):
        """
        getTexCoords(self) -> Vec2
        getTexCoords(self) -> Vec2
        """
        return _osgSim.ImpostorSprite_getTexCoords(self, *args)

    def getControlCoords(self, *args):
        """
        getControlCoords(self) -> Vec3
        getControlCoords(self) -> Vec3
        """
        return _osgSim.ImpostorSprite_getControlCoords(self, *args)

    def calcPixelError(self, *args):
        """calcPixelError(self, Matrix MVPW) -> float"""
        return _osgSim.ImpostorSprite_calcPixelError(self, *args)

    def setTexture(self, *args):
        """setTexture(self, Texture2D tex, int s, int t)"""
        return _osgSim.ImpostorSprite_setTexture(self, *args)

    def getTexture(self, *args):
        """
        getTexture(self) -> Texture2D
        getTexture(self) -> Texture2D
        """
        return _osgSim.ImpostorSprite_getTexture(self, *args)

    def s(self):
        """s(self) -> int"""
        return _osgSim.ImpostorSprite_s(self)

    def t(self):
        """t(self) -> int"""
        return _osgSim.ImpostorSprite_t(self)

    def drawImplementation(self, *args):
        """drawImplementation(self, RenderInfo renderInfo)"""
        return _osgSim.ImpostorSprite_drawImplementation(self, *args)

    def accept(self, *args):
        """
        accept(self,  af)
        accept(self,  af)
        accept(self, PrimitiveFunctor pf)
        """
        return _osgSim.ImpostorSprite_accept(self, *args)

    __swig_setmethods__["_color"] = _osgSim.ImpostorSprite__color_set
    __swig_getmethods__["_color"] = _osgSim.ImpostorSprite__color_get
    if _newclass:_color = _swig_property(_osgSim.ImpostorSprite__color_get, _osgSim.ImpostorSprite__color_set)
    def computeBound(self):
        """computeBound(self) -> BoundingBox"""
        return _osgSim.ImpostorSprite_computeBound(self)

    def setCamera(self, *args):
        """setCamera(self, Camera camera)"""
        return _osgSim.ImpostorSprite_setCamera(self, *args)

    def getCamera(self, *args):
        """
        getCamera(self) -> Camera
        getCamera(self) -> Camera
        """
        return _osgSim.ImpostorSprite_getCamera(self, *args)

ImpostorSprite_swigregister = _osgSim.ImpostorSprite_swigregister
ImpostorSprite_swigregister(ImpostorSprite)

class ImpostorSpriteManager(osg.Referenced):
    """Proxy of C++ osgSim::ImpostorSpriteManager class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpostorSpriteManager, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpostorSpriteManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ImpostorSpriteManager"""
        this = _osgSim.new_ImpostorSpriteManager()
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(self) -> bool"""
        return _osgSim.ImpostorSpriteManager_empty(self)

    def first(self):
        """first(self) -> ImpostorSprite"""
        return _osgSim.ImpostorSpriteManager_first(self)

    def last(self):
        """last(self) -> ImpostorSprite"""
        return _osgSim.ImpostorSpriteManager_last(self)

    def push_back(self, *args):
        """push_back(self, ImpostorSprite _is)"""
        return _osgSim.ImpostorSpriteManager_push_back(self, *args)

    def remove(self, *args):
        """remove(self, ImpostorSprite _is)"""
        return _osgSim.ImpostorSpriteManager_remove(self, *args)

    def createOrReuseImpostorSprite(self, *args):
        """createOrReuseImpostorSprite(self, int s, int t, unsigned int frameNumber) -> ImpostorSprite"""
        return _osgSim.ImpostorSpriteManager_createOrReuseImpostorSprite(self, *args)

    def createOrReuseStateSet(self):
        """createOrReuseStateSet(self) -> StateSet"""
        return _osgSim.ImpostorSpriteManager_createOrReuseStateSet(self)

    def reset(self):
        """reset(self)"""
        return _osgSim.ImpostorSpriteManager_reset(self)

ImpostorSpriteManager_swigregister = _osgSim.ImpostorSpriteManager_swigregister
ImpostorSpriteManager_swigregister(ImpostorSpriteManager)

class InsertImpostorsVisitor(osg.NodeVisitor):
    """Proxy of C++ osgSim::InsertImpostorsVisitor class"""
    __swig_setmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InsertImpostorsVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.NodeVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InsertImpostorsVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> InsertImpostorsVisitor"""
        this = _osgSim.new_InsertImpostorsVisitor()
        try: self.this.append(this)
        except: self.this = this
    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.InsertImpostorsVisitor_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.InsertImpostorsVisitor_className(self)

    def setImpostorThresholdRatio(self, *args):
        """setImpostorThresholdRatio(self, float ratio)"""
        return _osgSim.InsertImpostorsVisitor_setImpostorThresholdRatio(self, *args)

    def getImpostorThresholdRatio(self):
        """getImpostorThresholdRatio(self) -> float"""
        return _osgSim.InsertImpostorsVisitor_getImpostorThresholdRatio(self)

    def setMaximumNumberOfNestedImpostors(self, *args):
        """setMaximumNumberOfNestedImpostors(self, unsigned int num)"""
        return _osgSim.InsertImpostorsVisitor_setMaximumNumberOfNestedImpostors(self, *args)

    def getMaximumNumberOfNestedImpostors(self):
        """getMaximumNumberOfNestedImpostors(self) -> unsigned int"""
        return _osgSim.InsertImpostorsVisitor_getMaximumNumberOfNestedImpostors(self)

    def reset(self):
        """reset(self)"""
        return _osgSim.InsertImpostorsVisitor_reset(self)

    def apply(self, *args):
        """
        apply(self, Node node)
        apply(self, Group node)
        apply(self, LOD node)
        """
        return _osgSim.InsertImpostorsVisitor_apply(self, *args)

    def insertImpostors(self):
        """insertImpostors(self)"""
        return _osgSim.InsertImpostorsVisitor_insertImpostors(self)

    __swig_destroy__ = _osgSim.delete_InsertImpostorsVisitor
    __del__ = lambda self : None;
InsertImpostorsVisitor_swigregister = _osgSim.InsertImpostorsVisitor_swigregister
InsertImpostorsVisitor_swigregister(InsertImpostorsVisitor)

OSGSIM_LIGHTPOINT = _osgSim.OSGSIM_LIGHTPOINT
class LightPoint(_object):
    """Proxy of C++ osgSim::LightPoint class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LightPoint, name)
    __repr__ = _swig_repr
    ADDITIVE = _osgSim.LightPoint_ADDITIVE
    BLENDED = _osgSim.LightPoint_BLENDED
    def __init__(self, *args): 
        """
        __init__(self) -> LightPoint
        __init__(self, Vec3 position, Vec4 color) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity = 1.0, 
            float radius = 1.0, Sector sector = None, 
            BlinkSequence blinkSequence = None, BlendingMode blendingMode = BLENDED) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity = 1.0, 
            float radius = 1.0, Sector sector = None, 
            BlinkSequence blinkSequence = None) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity = 1.0, 
            float radius = 1.0, Sector sector = None) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity = 1.0, 
            float radius = 1.0) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color, float intensity = 1.0) -> LightPoint
        __init__(self, bool on, Vec3 position, Vec4 color) -> LightPoint
        __init__(self, LightPoint lp) -> LightPoint
        """
        this = _osgSim.new_LightPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["_on"] = _osgSim.LightPoint__on_set
    __swig_getmethods__["_on"] = _osgSim.LightPoint__on_get
    if _newclass:_on = _swig_property(_osgSim.LightPoint__on_get, _osgSim.LightPoint__on_set)
    __swig_setmethods__["_position"] = _osgSim.LightPoint__position_set
    __swig_getmethods__["_position"] = _osgSim.LightPoint__position_get
    if _newclass:_position = _swig_property(_osgSim.LightPoint__position_get, _osgSim.LightPoint__position_set)
    __swig_setmethods__["_color"] = _osgSim.LightPoint__color_set
    __swig_getmethods__["_color"] = _osgSim.LightPoint__color_get
    if _newclass:_color = _swig_property(_osgSim.LightPoint__color_get, _osgSim.LightPoint__color_set)
    __swig_setmethods__["_intensity"] = _osgSim.LightPoint__intensity_set
    __swig_getmethods__["_intensity"] = _osgSim.LightPoint__intensity_get
    if _newclass:_intensity = _swig_property(_osgSim.LightPoint__intensity_get, _osgSim.LightPoint__intensity_set)
    __swig_setmethods__["_radius"] = _osgSim.LightPoint__radius_set
    __swig_getmethods__["_radius"] = _osgSim.LightPoint__radius_get
    if _newclass:_radius = _swig_property(_osgSim.LightPoint__radius_get, _osgSim.LightPoint__radius_set)
    __swig_setmethods__["_sector"] = _osgSim.LightPoint__sector_set
    __swig_getmethods__["_sector"] = _osgSim.LightPoint__sector_get
    if _newclass:_sector = _swig_property(_osgSim.LightPoint__sector_get, _osgSim.LightPoint__sector_set)
    __swig_setmethods__["_blinkSequence"] = _osgSim.LightPoint__blinkSequence_set
    __swig_getmethods__["_blinkSequence"] = _osgSim.LightPoint__blinkSequence_get
    if _newclass:_blinkSequence = _swig_property(_osgSim.LightPoint__blinkSequence_get, _osgSim.LightPoint__blinkSequence_set)
    __swig_setmethods__["_blendingMode"] = _osgSim.LightPoint__blendingMode_set
    __swig_getmethods__["_blendingMode"] = _osgSim.LightPoint__blendingMode_get
    if _newclass:_blendingMode = _swig_property(_osgSim.LightPoint__blendingMode_get, _osgSim.LightPoint__blendingMode_set)
    __swig_destroy__ = _osgSim.delete_LightPoint
    __del__ = lambda self : None;
LightPoint_swigregister = _osgSim.LightPoint_swigregister
LightPoint_swigregister(LightPoint)

OSGSIM_LIGHTPOINTNODE = _osgSim.OSGSIM_LIGHTPOINTNODE
class LightPointNode(osg.Node):
    """Proxy of C++ osgSim::LightPointNode class"""
    __swig_setmethods__ = {}
    for _s in [osg.Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightPointNode, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightPointNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightPointNode
        __init__(self, LightPointNode arg0, CopyOp copyop = SHALLOW_COPY) -> LightPointNode
        __init__(self, LightPointNode arg0) -> LightPointNode
        """
        this = _osgSim.new_LightPointNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.LightPointNode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.LightPointNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.LightPointNode_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.LightPointNode_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.LightPointNode_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.LightPointNode_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.LightPointNode_traverse(self, *args)

    def getNumLightPoints(self):
        """getNumLightPoints(self) -> unsigned int"""
        return _osgSim.LightPointNode_getNumLightPoints(self)

    def addLightPoint(self, *args):
        """addLightPoint(self, LightPoint lp) -> unsigned int"""
        return _osgSim.LightPointNode_addLightPoint(self, *args)

    def removeLightPoint(self, *args):
        """removeLightPoint(self, unsigned int pos)"""
        return _osgSim.LightPointNode_removeLightPoint(self, *args)

    def getLightPoint(self, *args):
        """
        getLightPoint(self, unsigned int pos) -> LightPoint
        getLightPoint(self, unsigned int pos) -> LightPoint
        """
        return _osgSim.LightPointNode_getLightPoint(self, *args)

    def setLightPointList(self, *args):
        """setLightPointList(self, LightPointList lpl)"""
        return _osgSim.LightPointNode_setLightPointList(self, *args)

    def getLightPointList(self, *args):
        """
        getLightPointList(self) -> LightPointList
        getLightPointList(self) -> LightPointList
        """
        return _osgSim.LightPointNode_getLightPointList(self, *args)

    def setMinPixelSize(self, *args):
        """setMinPixelSize(self, float minPixelSize)"""
        return _osgSim.LightPointNode_setMinPixelSize(self, *args)

    def getMinPixelSize(self):
        """getMinPixelSize(self) -> float"""
        return _osgSim.LightPointNode_getMinPixelSize(self)

    def setMaxPixelSize(self, *args):
        """setMaxPixelSize(self, float maxPixelSize)"""
        return _osgSim.LightPointNode_setMaxPixelSize(self, *args)

    def getMaxPixelSize(self):
        """getMaxPixelSize(self) -> float"""
        return _osgSim.LightPointNode_getMaxPixelSize(self)

    def setMaxVisibleDistance2(self, *args):
        """setMaxVisibleDistance2(self, float maxVisibleDistance2)"""
        return _osgSim.LightPointNode_setMaxVisibleDistance2(self, *args)

    def getMaxVisibleDistance2(self):
        """getMaxVisibleDistance2(self) -> float"""
        return _osgSim.LightPointNode_getMaxVisibleDistance2(self)

    def setLightPointSystem(self, *args):
        """setLightPointSystem(self, LightPointSystem lps)"""
        return _osgSim.LightPointNode_setLightPointSystem(self, *args)

    def getLightPointSystem(self, *args):
        """
        getLightPointSystem(self) -> LightPointSystem
        getLightPointSystem(self) -> LightPointSystem
        """
        return _osgSim.LightPointNode_getLightPointSystem(self, *args)

    def setPointSprite(self, enable = True):
        """
        setPointSprite(self, bool enable = True)
        setPointSprite(self)
        """
        return _osgSim.LightPointNode_setPointSprite(self, enable)

    def getPointSprite(self):
        """getPointSprite(self) -> bool"""
        return _osgSim.LightPointNode_getPointSprite(self)

    def computeBound(self):
        """computeBound(self) -> BoundingSphere"""
        return _osgSim.LightPointNode_computeBound(self)

LightPointNode_swigregister = _osgSim.LightPointNode_swigregister
LightPointNode_swigregister(LightPointNode)

OSGSIM_LIGHTPOINTSYSTEM = _osgSim.OSGSIM_LIGHTPOINTSYSTEM
class LightPointSystem(osg.Object):
    """Proxy of C++ osgSim::LightPointSystem class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LightPointSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LightPointSystem, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> LightPointSystem
        __init__(self, LightPointSystem lps, CopyOp copyop = SHALLOW_COPY) -> LightPointSystem
        __init__(self, LightPointSystem lps) -> LightPointSystem
        """
        this = _osgSim.new_LightPointSystem(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.LightPointSystem_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.LightPointSystem_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.LightPointSystem_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.LightPointSystem_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.LightPointSystem_className(self)

    ANIMATION_ON = _osgSim.LightPointSystem_ANIMATION_ON
    ANIMATION_OFF = _osgSim.LightPointSystem_ANIMATION_OFF
    ANIMATION_RANDOM = _osgSim.LightPointSystem_ANIMATION_RANDOM
    def setIntensity(self, *args):
        """setIntensity(self, float intensity)"""
        return _osgSim.LightPointSystem_setIntensity(self, *args)

    def getIntensity(self):
        """getIntensity(self) -> float"""
        return _osgSim.LightPointSystem_getIntensity(self)

    def setAnimationState(self, *args):
        """setAnimationState(self, AnimationState state)"""
        return _osgSim.LightPointSystem_setAnimationState(self, *args)

    def getAnimationState(self):
        """getAnimationState(self) -> AnimationState"""
        return _osgSim.LightPointSystem_getAnimationState(self)

LightPointSystem_swigregister = _osgSim.LightPointSystem_swigregister
LightPointSystem_swigregister(LightPointSystem)

OSGSIM_LINEOFSIGHT = _osgSim.OSGSIM_LINEOFSIGHT
class DatabaseCacheReadCallback(_object):
    """Proxy of C++ osgSim::DatabaseCacheReadCallback class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseCacheReadCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseCacheReadCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DatabaseCacheReadCallback"""
        this = _osgSim.new_DatabaseCacheReadCallback()
        try: self.this.append(this)
        except: self.this = this
    def setMaximumNumOfFilesToCache(self, *args):
        """setMaximumNumOfFilesToCache(self, unsigned int maxNumFilesToCache)"""
        return _osgSim.DatabaseCacheReadCallback_setMaximumNumOfFilesToCache(self, *args)

    def getMaximumNumOfFilesToCache(self):
        """getMaximumNumOfFilesToCache(self) -> unsigned int"""
        return _osgSim.DatabaseCacheReadCallback_getMaximumNumOfFilesToCache(self)

    def clearDatabaseCache(self):
        """clearDatabaseCache(self)"""
        return _osgSim.DatabaseCacheReadCallback_clearDatabaseCache(self)

    def pruneUnusedDatabaseCache(self):
        """pruneUnusedDatabaseCache(self)"""
        return _osgSim.DatabaseCacheReadCallback_pruneUnusedDatabaseCache(self)

    def readNodeFile(self, *args):
        """readNodeFile(self, string filename) -> Node"""
        return _osgSim.DatabaseCacheReadCallback_readNodeFile(self, *args)

    __swig_destroy__ = _osgSim.delete_DatabaseCacheReadCallback
    __del__ = lambda self : None;
DatabaseCacheReadCallback_swigregister = _osgSim.DatabaseCacheReadCallback_swigregister
DatabaseCacheReadCallback_swigregister(DatabaseCacheReadCallback)

class LineOfSight(_object):
    """Proxy of C++ osgSim::LineOfSight class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineOfSight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineOfSight, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> LineOfSight"""
        this = _osgSim.new_LineOfSight()
        try: self.this.append(this)
        except: self.this = this
    def clear(self):
        """clear(self)"""
        return _osgSim.LineOfSight_clear(self)

    def addLOS(self, *args):
        """addLOS(self, Vec3d start, Vec3d end) -> unsigned int"""
        return _osgSim.LineOfSight_addLOS(self, *args)

    def getNumLOS(self):
        """getNumLOS(self) -> unsigned int"""
        return _osgSim.LineOfSight_getNumLOS(self)

    def setStartPoint(self, *args):
        """setStartPoint(self, unsigned int i, Vec3d start)"""
        return _osgSim.LineOfSight_setStartPoint(self, *args)

    def getStartPoint(self, *args):
        """getStartPoint(self, unsigned int i) -> Vec3d"""
        return _osgSim.LineOfSight_getStartPoint(self, *args)

    def setEndPoint(self, *args):
        """setEndPoint(self, unsigned int i, Vec3d end)"""
        return _osgSim.LineOfSight_setEndPoint(self, *args)

    def getEndPoint(self, *args):
        """getEndPoint(self, unsigned int i) -> Vec3d"""
        return _osgSim.LineOfSight_getEndPoint(self, *args)

    def getIntersections(self, *args):
        """getIntersections(self, unsigned int i) -> Intersections"""
        return _osgSim.LineOfSight_getIntersections(self, *args)

    def computeIntersections(*args):
        """
        computeIntersections(Node scene, NodeMask traversalMask = 0xffffffff)
        computeIntersections(Node scene)
        computeIntersections(Node scene, Vec3d start, Vec3d end, NodeMask traversalMask = 0xffffffff) -> Intersections
        computeIntersections(Node scene, Vec3d start, Vec3d end) -> Intersections
        """
        return _osgSim.LineOfSight_computeIntersections(*args)

    if _newclass:computeIntersections = staticmethod(computeIntersections)
    __swig_getmethods__["computeIntersections"] = lambda x: computeIntersections
    def clearDatabaseCache(self):
        """clearDatabaseCache(self)"""
        return _osgSim.LineOfSight_clearDatabaseCache(self)

    def setDatabaseCacheReadCallback(self, *args):
        """setDatabaseCacheReadCallback(self, DatabaseCacheReadCallback dcrc)"""
        return _osgSim.LineOfSight_setDatabaseCacheReadCallback(self, *args)

    def getDatabaseCacheReadCallback(self):
        """getDatabaseCacheReadCallback(self) -> DatabaseCacheReadCallback"""
        return _osgSim.LineOfSight_getDatabaseCacheReadCallback(self)

    __swig_destroy__ = _osgSim.delete_LineOfSight
    __del__ = lambda self : None;
LineOfSight_swigregister = _osgSim.LineOfSight_swigregister
LineOfSight_swigregister(LineOfSight)

def LineOfSight_computeIntersections(*args):
  """
    computeIntersections(Node scene, NodeMask traversalMask = 0xffffffff)
    computeIntersections(Node scene)
    computeIntersections(Node scene, Vec3d start, Vec3d end, NodeMask traversalMask = 0xffffffff) -> Intersections
    LineOfSight_computeIntersections(Node scene, Vec3d start, Vec3d end) -> Intersections
    """
  return _osgSim.LineOfSight_computeIntersections(*args)

OSG_MULTISWITCH = _osgSim.OSG_MULTISWITCH
class MultiSwitch(osg.Group):
    """Proxy of C++ osgSim::MultiSwitch class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiSwitch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> MultiSwitch
        __init__(self, MultiSwitch arg0, CopyOp copyop = SHALLOW_COPY) -> MultiSwitch
        __init__(self, MultiSwitch arg0) -> MultiSwitch
        """
        this = _osgSim.new_MultiSwitch(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.MultiSwitch_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.MultiSwitch_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.MultiSwitch_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.MultiSwitch_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.MultiSwitch_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.MultiSwitch_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.MultiSwitch_traverse(self, *args)

    def setNewChildDefaultValue(self, *args):
        """setNewChildDefaultValue(self, bool value)"""
        return _osgSim.MultiSwitch_setNewChildDefaultValue(self, *args)

    def getNewChildDefaultValue(self):
        """getNewChildDefaultValue(self) -> bool"""
        return _osgSim.MultiSwitch_getNewChildDefaultValue(self)

    def addChild(self, *args):
        """addChild(self, Node child) -> bool"""
        return _osgSim.MultiSwitch_addChild(self, *args)

    def insertChild(self, *args):
        """insertChild(self, unsigned int index, Node child) -> bool"""
        return _osgSim.MultiSwitch_insertChild(self, *args)

    def removeChild(self, *args):
        """removeChild(self, Node child) -> bool"""
        return _osgSim.MultiSwitch_removeChild(self, *args)

    def setValue(self, *args):
        """setValue(self, unsigned int switchSet, unsigned int pos, bool value)"""
        return _osgSim.MultiSwitch_setValue(self, *args)

    def getValue(self, *args):
        """getValue(self, unsigned int switchSet, unsigned int pos) -> bool"""
        return _osgSim.MultiSwitch_getValue(self, *args)

    def setChildValue(self, *args):
        """setChildValue(self, Node child, unsigned int switchSet, bool value)"""
        return _osgSim.MultiSwitch_setChildValue(self, *args)

    def getChildValue(self, *args):
        """getChildValue(self, Node child, unsigned int switchSet) -> bool"""
        return _osgSim.MultiSwitch_getChildValue(self, *args)

    def setAllChildrenOff(self, *args):
        """setAllChildrenOff(self, unsigned int switchSet) -> bool"""
        return _osgSim.MultiSwitch_setAllChildrenOff(self, *args)

    def setAllChildrenOn(self, *args):
        """setAllChildrenOn(self, unsigned int switchSet) -> bool"""
        return _osgSim.MultiSwitch_setAllChildrenOn(self, *args)

    def setSingleChildOn(self, *args):
        """setSingleChildOn(self, unsigned int switchSet, unsigned int pos) -> bool"""
        return _osgSim.MultiSwitch_setSingleChildOn(self, *args)

    def setActiveSwitchSet(self, *args):
        """setActiveSwitchSet(self, unsigned int switchSet)"""
        return _osgSim.MultiSwitch_setActiveSwitchSet(self, *args)

    def getActiveSwitchSet(self):
        """getActiveSwitchSet(self) -> unsigned int"""
        return _osgSim.MultiSwitch_getActiveSwitchSet(self)

    def setSwitchSetList(self, *args):
        """setSwitchSetList(self, SwitchSetList switchSetList)"""
        return _osgSim.MultiSwitch_setSwitchSetList(self, *args)

    def getSwitchSetList(self):
        """getSwitchSetList(self) -> SwitchSetList"""
        return _osgSim.MultiSwitch_getSwitchSetList(self)

    def setValueList(self, *args):
        """setValueList(self, unsigned int switchSet, ValueList values)"""
        return _osgSim.MultiSwitch_setValueList(self, *args)

    def getValueList(self, *args):
        """getValueList(self, unsigned int switchSet) -> ValueList"""
        return _osgSim.MultiSwitch_getValueList(self, *args)

    def setValueName(self, *args):
        """setValueName(self, unsigned int switchSet, string name)"""
        return _osgSim.MultiSwitch_setValueName(self, *args)

    def getValueName(self, *args):
        """getValueName(self, unsigned int switchSet) -> string"""
        return _osgSim.MultiSwitch_getValueName(self, *args)

MultiSwitch_swigregister = _osgSim.MultiSwitch_swigregister
MultiSwitch_swigregister(MultiSwitch)

OSGSIM_OBJECTRECORDDATA = _osgSim.OSGSIM_OBJECTRECORDDATA
class ObjectRecordData(osg.Object):
    """Proxy of C++ osgSim::ObjectRecordData class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectRecordData, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectRecordData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ObjectRecordData
        __init__(self, ObjectRecordData copy, CopyOp copyop = SHALLOW_COPY) -> ObjectRecordData
        __init__(self, ObjectRecordData copy) -> ObjectRecordData
        """
        this = _osgSim.new_ObjectRecordData(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.ObjectRecordData_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.ObjectRecordData_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ObjectRecordData_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.ObjectRecordData_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.ObjectRecordData_className(self)

    DONT_DISPLAY_IN_DAYLIGHT = _osgSim.ObjectRecordData_DONT_DISPLAY_IN_DAYLIGHT
    DONT_DISPLAY_AT_DUSK = _osgSim.ObjectRecordData_DONT_DISPLAY_AT_DUSK
    DONT_DISPLAY_AT_NIGHT = _osgSim.ObjectRecordData_DONT_DISPLAY_AT_NIGHT
    DONT_ILLUMINATE = _osgSim.ObjectRecordData_DONT_ILLUMINATE
    FLAT_SHADED = _osgSim.ObjectRecordData_FLAT_SHADED
    GROUPS_SHADOW_OBJECT = _osgSim.ObjectRecordData_GROUPS_SHADOW_OBJECT
    __swig_setmethods__["_flags"] = _osgSim.ObjectRecordData__flags_set
    __swig_getmethods__["_flags"] = _osgSim.ObjectRecordData__flags_get
    if _newclass:_flags = _swig_property(_osgSim.ObjectRecordData__flags_get, _osgSim.ObjectRecordData__flags_set)
    __swig_setmethods__["_relativePriority"] = _osgSim.ObjectRecordData__relativePriority_set
    __swig_getmethods__["_relativePriority"] = _osgSim.ObjectRecordData__relativePriority_get
    if _newclass:_relativePriority = _swig_property(_osgSim.ObjectRecordData__relativePriority_get, _osgSim.ObjectRecordData__relativePriority_set)
    __swig_setmethods__["_transparency"] = _osgSim.ObjectRecordData__transparency_set
    __swig_getmethods__["_transparency"] = _osgSim.ObjectRecordData__transparency_get
    if _newclass:_transparency = _swig_property(_osgSim.ObjectRecordData__transparency_get, _osgSim.ObjectRecordData__transparency_set)
    __swig_setmethods__["_effectID1"] = _osgSim.ObjectRecordData__effectID1_set
    __swig_getmethods__["_effectID1"] = _osgSim.ObjectRecordData__effectID1_get
    if _newclass:_effectID1 = _swig_property(_osgSim.ObjectRecordData__effectID1_get, _osgSim.ObjectRecordData__effectID1_set)
    __swig_setmethods__["_effectID2"] = _osgSim.ObjectRecordData__effectID2_set
    __swig_getmethods__["_effectID2"] = _osgSim.ObjectRecordData__effectID2_get
    if _newclass:_effectID2 = _swig_property(_osgSim.ObjectRecordData__effectID2_get, _osgSim.ObjectRecordData__effectID2_set)
    __swig_setmethods__["_significance"] = _osgSim.ObjectRecordData__significance_set
    __swig_getmethods__["_significance"] = _osgSim.ObjectRecordData__significance_get
    if _newclass:_significance = _swig_property(_osgSim.ObjectRecordData__significance_get, _osgSim.ObjectRecordData__significance_set)
    __swig_destroy__ = _osgSim.delete_ObjectRecordData
    __del__ = lambda self : None;
ObjectRecordData_swigregister = _osgSim.ObjectRecordData_swigregister
ObjectRecordData_swigregister(ObjectRecordData)

OSGSIM_OVERLAYNODE = _osgSim.OSGSIM_OVERLAYNODE
class OverlayNode(osg.Group):
    """Proxy of C++ osgSim::OverlayNode class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverlayNode, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OverlayNode, name)
    __repr__ = _swig_repr
    OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY = _osgSim.OverlayNode_OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY
    VIEW_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY = _osgSim.OverlayNode_VIEW_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY
    VIEW_DEPENDENT_WITH_PERSPECTIVE_OVERLAY = _osgSim.OverlayNode_VIEW_DEPENDENT_WITH_PERSPECTIVE_OVERLAY
    def __init__(self, *args): 
        """
        __init__(self, OverlayTechnique technique = OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY) -> OverlayNode
        __init__(self) -> OverlayNode
        __init__(self, OverlayNode es, CopyOp copyop = SHALLOW_COPY) -> OverlayNode
        __init__(self, OverlayNode es) -> OverlayNode
        """
        this = _osgSim.new_OverlayNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.OverlayNode_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.OverlayNode_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.OverlayNode_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.OverlayNode_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.OverlayNode_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.OverlayNode_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.OverlayNode_traverse(self, *args)

    def setOverlayTechnique(self, *args):
        """setOverlayTechnique(self, OverlayTechnique technique)"""
        return _osgSim.OverlayNode_setOverlayTechnique(self, *args)

    def getOverlayTechnique(self):
        """getOverlayTechnique(self) -> OverlayTechnique"""
        return _osgSim.OverlayNode_getOverlayTechnique(self)

    def setRenderTargetImplementation(self, *args):
        """setRenderTargetImplementation(self, RenderTargetImplementation impl)"""
        return _osgSim.OverlayNode_setRenderTargetImplementation(self, *args)

    def setOverlaySubgraph(self, *args):
        """setOverlaySubgraph(self, Node node)"""
        return _osgSim.OverlayNode_setOverlaySubgraph(self, *args)

    def getOverlaySubgraph(self, *args):
        """
        getOverlaySubgraph(self) -> Node
        getOverlaySubgraph(self) -> Node
        """
        return _osgSim.OverlayNode_getOverlaySubgraph(self, *args)

    def dirtyOverlayTexture(self):
        """dirtyOverlayTexture(self)"""
        return _osgSim.OverlayNode_dirtyOverlayTexture(self)

    def setContinuousUpdate(self, *args):
        """setContinuousUpdate(self, bool update)"""
        return _osgSim.OverlayNode_setContinuousUpdate(self, *args)

    def getContinuousUpdate(self):
        """getContinuousUpdate(self) -> bool"""
        return _osgSim.OverlayNode_getContinuousUpdate(self)

    def setOverlayBaseHeight(self, *args):
        """setOverlayBaseHeight(self, double baseHeight)"""
        return _osgSim.OverlayNode_setOverlayBaseHeight(self, *args)

    def getOverlayBaseHeight(self):
        """getOverlayBaseHeight(self) -> double"""
        return _osgSim.OverlayNode_getOverlayBaseHeight(self)

    def setOverlayClearColor(self, *args):
        """setOverlayClearColor(self, Vec4 color)"""
        return _osgSim.OverlayNode_setOverlayClearColor(self, *args)

    def getOverlayClearColor(self):
        """getOverlayClearColor(self) -> Vec4"""
        return _osgSim.OverlayNode_getOverlayClearColor(self)

    def setTexEnvMode(self, *args):
        """setTexEnvMode(self, GLenum mode)"""
        return _osgSim.OverlayNode_setTexEnvMode(self, *args)

    def getTexEnvMode(self):
        """getTexEnvMode(self) -> GLenum"""
        return _osgSim.OverlayNode_getTexEnvMode(self)

    def setOverlayTextureUnit(self, *args):
        """setOverlayTextureUnit(self, unsigned int unit)"""
        return _osgSim.OverlayNode_setOverlayTextureUnit(self, *args)

    def getOverlayTextureUnit(self):
        """getOverlayTextureUnit(self) -> unsigned int"""
        return _osgSim.OverlayNode_getOverlayTextureUnit(self)

    def setOverlayTextureSizeHint(self, *args):
        """setOverlayTextureSizeHint(self, unsigned int size)"""
        return _osgSim.OverlayNode_setOverlayTextureSizeHint(self, *args)

    def getOverlayTextureSizeHint(self):
        """getOverlayTextureSizeHint(self) -> unsigned int"""
        return _osgSim.OverlayNode_getOverlayTextureSizeHint(self)

    def setThreadSafeRefUnref(self, *args):
        """setThreadSafeRefUnref(self, bool threadSafe)"""
        return _osgSim.OverlayNode_setThreadSafeRefUnref(self, *args)

    def resizeGLObjectBuffers(self, *args):
        """resizeGLObjectBuffers(self, unsigned int arg0)"""
        return _osgSim.OverlayNode_resizeGLObjectBuffers(self, *args)

    def releaseGLObjects(self, arg0 = None):
        """
        releaseGLObjects(self, State arg0 = None)
        releaseGLObjects(self)
        """
        return _osgSim.OverlayNode_releaseGLObjects(self, arg0)

OverlayNode_swigregister = _osgSim.OverlayNode_swigregister
OverlayNode_swigregister(OverlayNode)

OSGSIM_SCALARSTCOLORS = _osgSim.OSGSIM_SCALARSTCOLORS
class ScalarsToColors(osg.Referenced):
    """Proxy of C++ osgSim::ScalarsToColors class"""
    __swig_setmethods__ = {}
    for _s in [osg.Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarsToColors, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarsToColors, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, float scalarMin, float scalarMax) -> ScalarsToColors"""
        this = _osgSim.new_ScalarsToColors(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _osgSim.delete_ScalarsToColors
    __del__ = lambda self : None;
    def getColor(self, *args):
        """getColor(self, float scalar) -> Vec4"""
        return _osgSim.ScalarsToColors_getColor(self, *args)

    def getMin(self):
        """getMin(self) -> float"""
        return _osgSim.ScalarsToColors_getMin(self)

    def getMax(self):
        """getMax(self) -> float"""
        return _osgSim.ScalarsToColors_getMax(self)

ScalarsToColors_swigregister = _osgSim.ScalarsToColors_swigregister
ScalarsToColors_swigregister(ScalarsToColors)

OSGSIM_SECTOR = _osgSim.OSGSIM_SECTOR
class Sector(osg.Object):
    """Proxy of C++ osgSim::Sector class"""
    __swig_setmethods__ = {}
    for _s in [osg.Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sector, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Sector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.Sector_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.Sector_className(self)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.Sector_isSameKindAs(self, *args)

    def __call__(self, *args):
        """__call__(self, Vec3 arg0) -> float"""
        return _osgSim.Sector___call__(self, *args)

Sector_swigregister = _osgSim.Sector_swigregister
Sector_swigregister(Sector)

class AzimRange(_object):
    """Proxy of C++ osgSim::AzimRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AzimRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AzimRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> AzimRange"""
        this = _osgSim.new_AzimRange()
        try: self.this.append(this)
        except: self.this = this
    def setAzimuthRange(self, *args):
        """
        setAzimuthRange(self, float minAzimuth, float maxAzimuth, float fadeAngle = 0.0)
        setAzimuthRange(self, float minAzimuth, float maxAzimuth)
        """
        return _osgSim.AzimRange_setAzimuthRange(self, *args)

    def getAzimuthRange(self, *args):
        """getAzimuthRange(self, float minAzimuth, float maxAzimuth, float fadeAngle)"""
        return _osgSim.AzimRange_getAzimuthRange(self, *args)

    def azimSector(self, *args):
        """azimSector(self, Vec3 eyeLocal) -> float"""
        return _osgSim.AzimRange_azimSector(self, *args)

    __swig_destroy__ = _osgSim.delete_AzimRange
    __del__ = lambda self : None;
AzimRange_swigregister = _osgSim.AzimRange_swigregister
AzimRange_swigregister(AzimRange)

class ElevationRange(_object):
    """Proxy of C++ osgSim::ElevationRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElevationRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElevationRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ElevationRange"""
        this = _osgSim.new_ElevationRange()
        try: self.this.append(this)
        except: self.this = this
    def setElevationRange(self, *args):
        """
        setElevationRange(self, float minElevation, float maxElevation, float fadeAngle = 0.0)
        setElevationRange(self, float minElevation, float maxElevation)
        """
        return _osgSim.ElevationRange_setElevationRange(self, *args)

    def getMinElevation(self):
        """getMinElevation(self) -> float"""
        return _osgSim.ElevationRange_getMinElevation(self)

    def getMaxElevation(self):
        """getMaxElevation(self) -> float"""
        return _osgSim.ElevationRange_getMaxElevation(self)

    def getFadeAngle(self):
        """getFadeAngle(self) -> float"""
        return _osgSim.ElevationRange_getFadeAngle(self)

    def elevationSector(self, *args):
        """elevationSector(self, Vec3 eyeLocal) -> float"""
        return _osgSim.ElevationRange_elevationSector(self, *args)

    __swig_destroy__ = _osgSim.delete_ElevationRange
    __del__ = lambda self : None;
ElevationRange_swigregister = _osgSim.ElevationRange_swigregister
ElevationRange_swigregister(ElevationRange)

class AzimSector(Sector,AzimRange):
    """Proxy of C++ osgSim::AzimSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector,AzimRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AzimSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector,AzimRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AzimSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AzimSector
        __init__(self, AzimSector copy, CopyOp copyop = SHALLOW_COPY) -> AzimSector
        __init__(self, AzimSector copy) -> AzimSector
        __init__(self, float minAzimuth, float maxAzimuth, float fadeAngle = 0.0) -> AzimSector
        __init__(self, float minAzimuth, float maxAzimuth) -> AzimSector
        """
        this = _osgSim.new_AzimSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.AzimSector_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.AzimSector_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.AzimSector_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.AzimSector_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.AzimSector_className(self)

    def __call__(self, *args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.AzimSector___call__(self, *args)

AzimSector_swigregister = _osgSim.AzimSector_swigregister
AzimSector_swigregister(AzimSector)

class ElevationSector(Sector,ElevationRange):
    """Proxy of C++ osgSim::ElevationSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector,ElevationRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElevationSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector,ElevationRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElevationSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ElevationSector
        __init__(self, ElevationSector copy, CopyOp copyop = SHALLOW_COPY) -> ElevationSector
        __init__(self, ElevationSector copy) -> ElevationSector
        __init__(self, float minElevation, float maxElevation, float fadeAngle = 0.0) -> ElevationSector
        __init__(self, float minElevation, float maxElevation) -> ElevationSector
        """
        this = _osgSim.new_ElevationSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.ElevationSector_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.ElevationSector_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ElevationSector_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.ElevationSector_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.ElevationSector_className(self)

    def __call__(self, *args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.ElevationSector___call__(self, *args)

ElevationSector_swigregister = _osgSim.ElevationSector_swigregister
ElevationSector_swigregister(ElevationSector)

class AzimElevationSector(Sector,AzimRange,ElevationRange):
    """Proxy of C++ osgSim::AzimElevationSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector,AzimRange,ElevationRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AzimElevationSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector,AzimRange,ElevationRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AzimElevationSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> AzimElevationSector
        __init__(self, AzimElevationSector copy, CopyOp copyop = SHALLOW_COPY) -> AzimElevationSector
        __init__(self, AzimElevationSector copy) -> AzimElevationSector
        __init__(self, float minAzimuth, float maxAzimuth, float minElevation, 
            float maxElevation, float fadeAngle = 0.0) -> AzimElevationSector
        __init__(self, float minAzimuth, float maxAzimuth, float minElevation, 
            float maxElevation) -> AzimElevationSector
        """
        this = _osgSim.new_AzimElevationSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.AzimElevationSector_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.AzimElevationSector_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.AzimElevationSector_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.AzimElevationSector_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.AzimElevationSector_className(self)

    def __call__(self, *args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.AzimElevationSector___call__(self, *args)

AzimElevationSector_swigregister = _osgSim.AzimElevationSector_swigregister
AzimElevationSector_swigregister(AzimElevationSector)

class ConeSector(Sector):
    """Proxy of C++ osgSim::ConeSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConeSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConeSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ConeSector
        __init__(self, ConeSector copy, CopyOp copyop = SHALLOW_COPY) -> ConeSector
        __init__(self, ConeSector copy) -> ConeSector
        __init__(self, Vec3 axis, float angle, float fadeangle = 0.0) -> ConeSector
        __init__(self, Vec3 axis, float angle) -> ConeSector
        """
        this = _osgSim.new_ConeSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.ConeSector_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.ConeSector_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.ConeSector_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.ConeSector_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.ConeSector_className(self)

    def setAxis(self, *args):
        """setAxis(self, Vec3 axis)"""
        return _osgSim.ConeSector_setAxis(self, *args)

    def getAxis(self):
        """getAxis(self) -> Vec3"""
        return _osgSim.ConeSector_getAxis(self)

    def setAngle(self, *args):
        """
        setAngle(self, float angle, float fadeangle = 0.0)
        setAngle(self, float angle)
        """
        return _osgSim.ConeSector_setAngle(self, *args)

    def getAngle(self):
        """getAngle(self) -> float"""
        return _osgSim.ConeSector_getAngle(self)

    def getFadeAngle(self):
        """getFadeAngle(self) -> float"""
        return _osgSim.ConeSector_getFadeAngle(self)

    def __call__(self, *args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.ConeSector___call__(self, *args)

ConeSector_swigregister = _osgSim.ConeSector_swigregister
ConeSector_swigregister(ConeSector)

class DirectionalSector(Sector):
    """Proxy of C++ osgSim::DirectionalSector class"""
    __swig_setmethods__ = {}
    for _s in [Sector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectionalSector, name, value)
    __swig_getmethods__ = {}
    for _s in [Sector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DirectionalSector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> DirectionalSector
        __init__(self, DirectionalSector copy, CopyOp copyop = SHALLOW_COPY) -> DirectionalSector
        __init__(self, DirectionalSector copy) -> DirectionalSector
        __init__(self, Vec3 direction, float horizLobeAngle, float vertLobeAngle, 
            float lobeRollAngle, float fadeAngle = 0.0) -> DirectionalSector
        __init__(self, Vec3 direction, float horizLobeAngle, float vertLobeAngle, 
            float lobeRollAngle) -> DirectionalSector
        """
        this = _osgSim.new_DirectionalSector(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.DirectionalSector_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.DirectionalSector_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.DirectionalSector_isSameKindAs(self, *args)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.DirectionalSector_libraryName(self)

    def className(self):
        """className(self) -> char"""
        return _osgSim.DirectionalSector_className(self)

    def setDirection(self, *args):
        """setDirection(self, Vec3 direction)"""
        return _osgSim.DirectionalSector_setDirection(self, *args)

    def getDirection(self):
        """getDirection(self) -> Vec3"""
        return _osgSim.DirectionalSector_getDirection(self)

    def setHorizLobeAngle(self, *args):
        """setHorizLobeAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setHorizLobeAngle(self, *args)

    def getHorizLobeAngle(self):
        """getHorizLobeAngle(self) -> float"""
        return _osgSim.DirectionalSector_getHorizLobeAngle(self)

    def setLobeRollAngle(self, *args):
        """setLobeRollAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setLobeRollAngle(self, *args)

    def getLobeRollAngle(self):
        """getLobeRollAngle(self) -> float"""
        return _osgSim.DirectionalSector_getLobeRollAngle(self)

    def setVertLobeAngle(self, *args):
        """setVertLobeAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setVertLobeAngle(self, *args)

    def getVertLobeAngle(self):
        """getVertLobeAngle(self) -> float"""
        return _osgSim.DirectionalSector_getVertLobeAngle(self)

    def setFadeAngle(self, *args):
        """setFadeAngle(self, float angle)"""
        return _osgSim.DirectionalSector_setFadeAngle(self, *args)

    def getFadeAngle(self):
        """getFadeAngle(self) -> float"""
        return _osgSim.DirectionalSector_getFadeAngle(self)

    def __call__(self, *args):
        """__call__(self, Vec3 eyeLocal) -> float"""
        return _osgSim.DirectionalSector___call__(self, *args)

    def computeMatrix(self):
        """computeMatrix(self)"""
        return _osgSim.DirectionalSector_computeMatrix(self)

DirectionalSector_swigregister = _osgSim.DirectionalSector_swigregister
DirectionalSector_swigregister(DirectionalSector)

OSGSIM_SPHERESEGMENT = _osgSim.OSGSIM_SPHERESEGMENT
class SphereSegment(osg.Geode):
    """Proxy of C++ osgSim::SphereSegment class"""
    __swig_setmethods__ = {}
    for _s in [osg.Geode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereSegment, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Geode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereSegment, name)
    __repr__ = _swig_repr
    SURFACE = _osgSim.SphereSegment_SURFACE
    SPOKES = _osgSim.SphereSegment_SPOKES
    EDGELINE = _osgSim.SphereSegment_EDGELINE
    SIDES = _osgSim.SphereSegment_SIDES
    ALL = _osgSim.SphereSegment_ALL
    def __init__(self, *args): 
        """
        __init__(self) -> SphereSegment
        __init__(self, Vec3 centre, float radius, float azMin, float azMax, 
            float elevMin, float elevMax, int density) -> SphereSegment
        __init__(self, Vec3 centre, float radius, Vec3 vec, float azRange, 
            float elevRange, int density) -> SphereSegment
        __init__(self, SphereSegment rhs, CopyOp co) -> SphereSegment
        """
        this = _osgSim.new_SphereSegment(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCentre(self, *args):
        """setCentre(self, Vec3 c)"""
        return _osgSim.SphereSegment_setCentre(self, *args)

    def getCentre(self):
        """getCentre(self) -> Vec3"""
        return _osgSim.SphereSegment_getCentre(self)

    def setRadius(self, *args):
        """setRadius(self, float r)"""
        return _osgSim.SphereSegment_setRadius(self, *args)

    def getRadius(self):
        """getRadius(self) -> float"""
        return _osgSim.SphereSegment_getRadius(self)

    def setArea(self, *args):
        """
        setArea(self, Vec3 vec, float azRange, float elevRange)
        setArea(self, float azMin, float azMax, float elevMin, float elevMax)
        """
        return _osgSim.SphereSegment_setArea(self, *args)

    def getArea(self, *args):
        """
        getArea(self, Vec3 vec, float azRange, float elevRange)
        getArea(self, float azMin, float azMax, float elevMin, float elevMax)
        """
        return _osgSim.SphereSegment_getArea(self, *args)

    def setDensity(self, *args):
        """setDensity(self, int d)"""
        return _osgSim.SphereSegment_setDensity(self, *args)

    def getDensity(self):
        """getDensity(self) -> int"""
        return _osgSim.SphereSegment_getDensity(self)

    def setDrawMask(self, *args):
        """setDrawMask(self, int dm)"""
        return _osgSim.SphereSegment_setDrawMask(self, *args)

    def getDrawMask(self):
        """getDrawMask(self) -> int"""
        return _osgSim.SphereSegment_getDrawMask(self)

    def setSurfaceColor(self, *args):
        """setSurfaceColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setSurfaceColor(self, *args)

    def getSurfaceColor(self):
        """getSurfaceColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getSurfaceColor(self)

    def setSpokeColor(self, *args):
        """setSpokeColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setSpokeColor(self, *args)

    def getSpokeColor(self):
        """getSpokeColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getSpokeColor(self)

    def setEdgeLineColor(self, *args):
        """setEdgeLineColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setEdgeLineColor(self, *args)

    def getEdgeLineColor(self):
        """getEdgeLineColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getEdgeLineColor(self)

    def setSideColor(self, *args):
        """setSideColor(self, Vec4 c)"""
        return _osgSim.SphereSegment_setSideColor(self, *args)

    def getSideColor(self):
        """getSideColor(self) -> Vec4"""
        return _osgSim.SphereSegment_getSideColor(self)

    def setAllColors(self, *args):
        """setAllColors(self, Vec4 c)"""
        return _osgSim.SphereSegment_setAllColors(self, *args)

    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.SphereSegment_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.SphereSegment_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.SphereSegment_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.SphereSegment_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.SphereSegment_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.SphereSegment_accept(self, *args)

    def computeIntersectionSubgraph(self, *args):
        """
        computeIntersectionSubgraph(self, Matrixd matrix, Node subgraph) -> Node
        computeIntersectionSubgraph(self, Matrixd matrix, Drawable drawable) -> Node
        """
        return _osgSim.SphereSegment_computeIntersectionSubgraph(self, *args)

    __swig_destroy__ = _osgSim.delete_SphereSegment
    __del__ = lambda self : None;
SphereSegment_swigregister = _osgSim.SphereSegment_swigregister
SphereSegment_swigregister(SphereSegment)

OSGSIM_VERSION = _osgSim.OSGSIM_VERSION

def osgSimGetVersion():
  """osgSimGetVersion() -> char"""
  return _osgSim.osgSimGetVersion()

def osgSimGetLibraryName():
  """osgSimGetLibraryName() -> char"""
  return _osgSim.osgSimGetLibraryName()
OSGSIM_VISIBILITYGROUP = _osgSim.OSGSIM_VISIBILITYGROUP
class VisibilityGroup(osg.Group):
    """Proxy of C++ osgSim::VisibilityGroup class"""
    __swig_setmethods__ = {}
    for _s in [osg.Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisibilityGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [osg.Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisibilityGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> VisibilityGroup
        __init__(self, VisibilityGroup arg0, CopyOp copyop = SHALLOW_COPY) -> VisibilityGroup
        __init__(self, VisibilityGroup arg0) -> VisibilityGroup
        """
        this = _osgSim.new_VisibilityGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self):
        """cloneType(self) -> Object"""
        return _osgSim.VisibilityGroup_cloneType(self)

    def clone(self, *args):
        """clone(self, CopyOp copyop) -> Object"""
        return _osgSim.VisibilityGroup_clone(self, *args)

    def isSameKindAs(self, *args):
        """isSameKindAs(self, Object obj) -> bool"""
        return _osgSim.VisibilityGroup_isSameKindAs(self, *args)

    def className(self):
        """className(self) -> char"""
        return _osgSim.VisibilityGroup_className(self)

    def libraryName(self):
        """libraryName(self) -> char"""
        return _osgSim.VisibilityGroup_libraryName(self)

    def accept(self, *args):
        """accept(self, NodeVisitor nv)"""
        return _osgSim.VisibilityGroup_accept(self, *args)

    def traverse(self, *args):
        """traverse(self, NodeVisitor nv)"""
        return _osgSim.VisibilityGroup_traverse(self, *args)

    def setVisibilityVolume(self, *args):
        """setVisibilityVolume(self, Node node)"""
        return _osgSim.VisibilityGroup_setVisibilityVolume(self, *args)

    def getVisibilityVolume(self, *args):
        """
        getVisibilityVolume(self) -> Node
        getVisibilityVolume(self) -> Node
        """
        return _osgSim.VisibilityGroup_getVisibilityVolume(self, *args)

    def setVolumeIntersectionMask(self, *args):
        """setVolumeIntersectionMask(self, NodeMask mask)"""
        return _osgSim.VisibilityGroup_setVolumeIntersectionMask(self, *args)

    def getVolumeIntersectionMask(self):
        """getVolumeIntersectionMask(self) -> NodeMask"""
        return _osgSim.VisibilityGroup_getVolumeIntersectionMask(self)

    def setSegmentLength(self, *args):
        """setSegmentLength(self, float length)"""
        return _osgSim.VisibilityGroup_setSegmentLength(self, *args)

    def getSegmentLength(self):
        """getSegmentLength(self) -> float"""
        return _osgSim.VisibilityGroup_getSegmentLength(self)

VisibilityGroup_swigregister = _osgSim.VisibilityGroup_swigregister
VisibilityGroup_swigregister(VisibilityGroup)



